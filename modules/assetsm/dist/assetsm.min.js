const PROGRESS_EVENT_TYPE={loadstart:"loadstart",progress:"progress",abort:"abort",error:"error",load:"load",timeout:"timeout"},ERROR_MESSAGES={RECURSION_ERROR:"Too much recursion. Stop iteration.",ATLAS_IMAGE_LOADING_FAILED:"Can't load atlas image ",TILESET_LOADING_FAILED:"Can't load related tileset ",TILEMAP_LOADING_FAILED:"Can't load tilemap ",AUDIO_LOADING_FAILED:"Can't load audio ",NOT_CORRECT_METHOD_TYPE:"uploadMethod should be instance of Promise and return upload result value",XML_FORMAT_INCORRECT:" XML format is not correct.",XML_FILE_EXTENSION_INCORRECT:"Only xml files are supported",TILESET_FILE_EXTENSION_INCORRECT:"Related Tileset file extension is not correct, only .tsj or .json files are supported",TILEMAP_FILE_EXTENSION_INCORRECT:"Tilemap file extension is not correct, only .tmj or .json files are supported",INPUT_PARAMS_ARE_INCORRECT:"fileKey and url should be provided"};class Loader{#e;#t;#r=new Map;#s=new Map;constructor(e,t){this.#e=e,this.#t=(e,r,...s)=>{const i=t(e,r,...s);if(i instanceof Promise)return i.then((t=>this.#i(t,e)));throw new TypeError(ERROR_MESSAGES.NOT_CORRECT_METHOD_TYPE)}}#i=(e,t)=>new Promise(((r,s)=>{e&&0!==e.length||Warning("uploadMethod for "+this.#e+" should return Promise with upload value"),this.#o(t,e),this.#a(t),r()}));#o(e,t){this.#s.set(e,t)}#a(e){this.#r.delete(e)}get filesWaitingForUpload(){return this.#r.size}get loadingQueue(){return this.#r}get uploadMethod(){return this.#t}_addFile=(e,t)=>{this.#r.has(e)&&Warning("File "+this.#e+" with key "+e+" is already added"),this.#r.set(e,t)};_isFileInQueue=e=>this.#r.has(e);_getFile=e=>this.#s.get(e)}export default class AssetsManager{#n=5;#l=new EventTarget;#d=new Map;#h=0;constructor(){this.registerLoader("Audio",this._loadAudio),this.registerLoader("Image",this._loadImage),this.registerLoader("TileMap",this._loadTileMap),this.registerLoader("TileSet",this._loadTileSet),this.registerLoader("AtlasImageMap",this._loadAtlasImage),this.registerLoader("AtlasXML",this._loadAtlasXml)}get filesWaitingForUpload(){let e=0;return Array.from(this.#d.values()).map((t=>e+=t.filesWaitingForUpload)),e}registerLoader=(e,t=this._defaultUploadMethod)=>{this["add"+e]=(t,r,...s)=>{this.addFile(e,t,r,...s)},this["get"+e]=t=>this.getFile(e,t),this["is"+e+["InQueue"]]=t=>this.isFileInQueue(e,t);const r=this.#d.get(e)||new Loader(e,t);this.#d.set(e,r)};preload(){return this.#E(),new Promise((async(e,t)=>{this.#c().then((()=>{this.#u(),e()})).catch((e=>{t(e)}))}))}#c(e=0){return this.#g().then((t=>0===this.filesWaitingForUpload?Promise.resolve(t):++e>this.#n?Promise.reject(new Error(ERROR_MESSAGES.RECURSION_ERROR)):this.#c(e))).catch((e=>Promise.reject(e)))}#g(){return new Promise(((e,t)=>{let r=[];Array.from(this.#d.values()).forEach((e=>{Array.from(e.loadingQueue.entries()).forEach((t=>{const s=new Promise(((r,s)=>e.uploadMethod(t[0],...t[1]).then((e=>r(e)))));r.push(s)}))})),Promise.allSettled(r).then((r=>{for(const s of r){if("rejected"===s.status){const e=s.reason;this.#m(e)?t(e):(Warning(e),this.#p(e))}e(r)}}))}))}addEventListener(e,t,...r){PROGRESS_EVENT_TYPE[e]?this.#l.addEventListener(e,t,...r):Warning("Event type should be one of the ProgressEvent.type")}removeEventListener(e,t,...r){this.#l.removeEventListener(e,t,...r)}_loadAtlasXml=(e,t)=>(this.#_(t),fetch(t).then((e=>e.text())).then((e=>(new window.DOMParser).parseFromString(e,"text/xml"))).then((r=>{const s=r.documentElement||r.activeElement,i=s.attributes.getNamedItem("imagePath"),o=s.children;if(i){const r=this.#R(t);return this.addAtlasImageMap(e,r+i.value,o,r),Promise.resolve(s)}{const t=new Error(e+ERROR_MESSAGES.XML_FORMAT_INCORRECT);return Promise.reject(t)}})));_loadAtlasImage=(e,t,r,s="anonymous")=>new Promise(((e,i)=>{const o=new Image,a=new Map,n=document.createElement("canvas"),l=n.getContext("2d");o.crossOrigin=s,o.onload=()=>{const t=[];let s=[];n.width=o.width,n.height=o.height,l.drawImage(o,0,0);for(let e of r){const r=e.attributes,i=r.getNamedItem("name").value,o=i.includes(".")?i.split(".")[0]:i,a=r.getNamedItem("x").value,n=r.getNamedItem("y").value,d=r.getNamedItem("width").value,h=r.getNamedItem("height").value;t.push(createImageBitmap(l.getImageData(a,n,d,h),{premultiplyAlpha:"premultiply"})),s.push(o)}this.#I(),Promise.all(t).then((t=>{t.forEach(((e,t)=>{const r=s[t];a.set(r,e),this.addImage(r,"empty url",e)})),n.remove(),e(a)}))},o.onerror=()=>{const e=new Error(ERROR_MESSAGES.ATLAS_IMAGE_LOADING_FAILED+t);this.#p(e),i(e)},o.src=t}));_loadTileSet=(e,t,r=1,s)=>(this.#L(t),fetch(s?s+t:t).then((e=>e.json())).then((e=>{const{name:t,image:i,spacing:o,margin:a,tilewidth:n,tileheight:l}=e;return t&&i&&!this.isFileInQueue("Image",t)&&this.addImage(t,s?s+i:i),e.gid=r,Promise.resolve(e)})).catch((()=>{const e=new Error(ERROR_MESSAGES.TILESET_LOADING_FAILED+t);return Promise.reject(e)})));_defaultUploadMethod=(e,t)=>fetch(t);_loadTileMap=(e,t,r=!0)=>(this.#S(t),fetch(t).then((e=>e.json())).then((e=>{const s=this.#R(t);if(!0===r&&e.tilesets&&e.tilesets.length>0){const t=[];return e.tilesets.forEach(((e,r)=>{const{firstgid:i,source:o}=e,a=this._loadTileSet("default-"+i,o,i,s).then((e=>(this.#I(),Promise.resolve(e))));t.push(a)})),Promise.all(t).then((t=>{for(let r=0;r<t.length;r++){const s=t[r];e.tilesets[r].data=s}return Promise.resolve(e)}))}return Promise.resolve(e)})).catch((e=>(e.message.includes("JSON.parse:")&&(e=new Error(ERROR_MESSAGES.TILEMAP_LOADING_FAILED+t)),this.#p(e),Promise.reject(e)))));_loadAudio=(e,t)=>new Promise(((e,r)=>{const s=new Audio(t);s.addEventListener("loadeddata",(()=>{this.#I(),e(s)})),s.addEventListener("error",(()=>{const e=new Error(ERROR_MESSAGES.AUDIO_LOADING_FAILED+t);this.#p(e),r(e)}))}));_loadImage=(e,t,r,s="anonymous")=>new Promise(((e,i)=>{if(r)e(r);else{const r=new Image;r.crossOrigin=s,r.onload=()=>{createImageBitmap(r,{premultiplyAlpha:"premultiply"}).then((t=>{this.#I(),e(t)}))},r.onerror=()=>{const e=new Error(ERROR_MESSAGES.IMAGE_LOADING_FAILED+t);this.#p(e),i(e)},r.src=t}}));#_(e){e.includes(".xml")||Exception(ERROR_MESSAGES.XML_FILE_EXTENSION_INCORRECT)}#L(e){e.includes(".tsj")||e.includes(".json")||Exception(ERROR_MESSAGES.TILESET_FILE_EXTENSION_INCORRECT)}#S(e){e.includes(".tmj")||e.includes(".json")||Exception(ERROR_MESSAGES.TILEMAP_FILE_EXTENSION_INCORRECT)}#m(e){return e.message.includes(ERROR_MESSAGES.NOT_CORRECT_METHOD_TYPE)}#R(e){let t=e.split("/"),r=t.length,s="/";return t[r-1].includes(".tmj")||t[r-1].includes(".xml")||t[r-1].includes(".json")?(t.pop(),s=t.join("/")+"/"):(t[r-2].includes(".tmj")||t[r-2].includes(".xml")||t[r-2].includes(".json"))&&(t.splice(r-2,2),s=t.join("/")+"/"),s}addFile(e,t,r,...s){const i=this.#d.get(e);i?(this.#T(t,r),i._addFile(t,[r,...s])):Exception("Loader for "+e+" is not registered!")}isFileInQueue(e,t){const r=this.#d.get(e);if(r)return r._isFileInQueue(t);Exception("Loader for "+e+" is not registered!")}getFile(e,t){const r=this.#d.get(e);if(r)return r._getFile(t);Exception("Loader for "+e+" is not registered!")}#T(e,t){const r=ERROR_MESSAGES.INPUT_PARAMS_ARE_INCORRECT;e&&0!==e.trim().length||Exception(r),t&&0!==t.trim().length||Exception(r)}#E(){let e=this.filesWaitingForUpload;this.#l.dispatchEvent(new ProgressEvent(PROGRESS_EVENT_TYPE.loadstart,{total:e}))}#u(){this.#l.dispatchEvent(new ProgressEvent(PROGRESS_EVENT_TYPE.load))}#I(){const e=this.filesWaitingForUpload;this.#h+=1,this.#l.dispatchEvent(new ProgressEvent(PROGRESS_EVENT_TYPE.progress,{lengthComputable:!0,loaded:this.#h,total:e}))}#p(e){this.#l.dispatchEvent(new ProgressEvent(PROGRESS_EVENT_TYPE.error,{error:e}))}}function Exception(e){throw new Error(e)}function Warning(e){console.warn(e)}