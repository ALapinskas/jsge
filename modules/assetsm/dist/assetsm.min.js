const PROGRESS_EVENT_TYPE={loadstart:"loadstart",progress:"progress",abort:"abort",error:"error",load:"load",timeout:"timeout"},ERROR_MESSAGES={RECURSION_ERROR:"Too much recursion. Stop iteration.",ATLAS_IMAGE_LOADING_FAILED:"Can't load atlas image ",TILESET_LOADING_FAILED:"Can't load related tileset ",TILEMAP_LOADING_FAILED:"Can't load tilemap ",AUDIO_LOADING_FAILED:"Can't load audio ",NOT_CORRECT_METHOD_TYPE:"uploadMethod should be instance of Promise and return upload result value",XML_FORMAT_INCORRECT:" XML format is not correct.",XML_FILE_EXTENSION_INCORRECT:"Only xml files are supported",TILESET_FILE_EXTENSION_INCORRECT:"Related Tileset file extension is not correct, only .tsj or .json files are supported",TILEMAP_FILE_EXTENSION_INCORRECT:"Tilemap file extension is not correct, only .tmj or .json files are supported",INPUT_PARAMS_ARE_INCORRECT:"fileKey and url should be provided"};class Loader{#e;#t;#s=new Map;#r=new Map;constructor(e,t){this.#e=e,this.#t=(e,s,...r)=>{const i=t(e,s,...r);if(i instanceof Promise)return i.then((t=>this.#i(t,e)));throw new TypeError(ERROR_MESSAGES.NOT_CORRECT_METHOD_TYPE)}}#i=(e,t)=>new Promise(((s,r)=>{e&&0!==e.length||Warning("uploadMethod for "+this.#e+" should return Promise with upload value"),this.#o(t,e),this.#a(t),s()}));#o(e,t){this.#r.set(e,t)}#a(e){this.#s.delete(e)}get filesWaitingForUpload(){return this.#s.size}get loadingQueue(){return this.#s}get uploadMethod(){return this.#t}_addFile=(e,t)=>{this.#s.has(e)&&Warning("File "+this.#e+" with key "+e+" is already added"),this.#s.set(e,t)};_isFileInQueue=e=>this.#s.has(e);_getFile=e=>this.#r.get(e)}export default class AssetsManager{#n=5;#l=new EventTarget;#d=new Map;#E=0;constructor(){this.registerLoader("Audio",this._loadAudio),this.registerLoader("Image",this._loadImage),this.registerLoader("TileMap",this._loadTileMap),this.registerLoader("TileSet",this._loadTileSet),this.registerLoader("AtlasImageMap",this._loadAtlasImage),this.registerLoader("AtlasXML",this._loadAtlasXml)}get filesWaitingForUpload(){let e=0;return Array.from(this.#d.values()).map((t=>e+=t.filesWaitingForUpload)),e}registerLoader=(e,t=this._defaultUploadMethod)=>{this["add"+e]=(t,s,...r)=>{this.addFile(e,t,s,...r)},this["get"+e]=t=>this.getFile(e,t),this["is"+e+["InQueue"]]=t=>this.isFileInQueue(e,t);const s=this.#d.get(e)||new Loader(e,t);this.#d.set(e,s)};preload(){return this.#h(),new Promise((async(e,t)=>{this.#c().then((()=>{this.#u(),e()})).catch((e=>{t(e)}))}))}#c(e=0){return this.#g().then((t=>0===this.filesWaitingForUpload?Promise.resolve(t):++e>this.#n?Promise.reject(new Error(ERROR_MESSAGES.RECURSION_ERROR)):this.#c(e))).catch((e=>Promise.reject(e)))}#g(){return new Promise(((e,t)=>{let s=[];Array.from(this.#d.values()).forEach((e=>{Array.from(e.loadingQueue.entries()).forEach((t=>{const r=new Promise(((s,r)=>e.uploadMethod(t[0],...t[1]).then((e=>s(e)))));s.push(r)}))})),Promise.allSettled(s).then((s=>{for(const r of s){if("rejected"===r.status){const e=r.reason;this.#m(e)?t(e):(Warning(e),this.#p(e))}e(s)}}))}))}addEventListener(e,t,...s){PROGRESS_EVENT_TYPE[e]?this.#l.addEventListener(e,t,...s):Warning("Event type should be one of the ProgressEvent.type")}removeEventListener(e,t,...s){this.#l.removeEventListener(e,t,...s)}_loadAtlasXml=(e,t)=>(this.#_(t),fetch(t).then((e=>e.text())).then((e=>(new window.DOMParser).parseFromString(e,"text/xml"))).then((s=>{const r=s.documentElement||s.activeElement,i=r.attributes.getNamedItem("imagePath"),o=r.children;if(i){const s=this.#R(t);return this.addAtlasImageMap(e,s+i.value,o,s),Promise.resolve(r)}{const t=new Error(e+ERROR_MESSAGES.XML_FORMAT_INCORRECT);return Promise.reject(t)}})));_loadAtlasImage=(e,t,s,r="anonymous")=>new Promise(((e,i)=>{const o=new Image,a=new Map,n=document.createElement("canvas"),l=n.getContext("2d");o.crossOrigin=r,o.onload=()=>{const t=[];let r=[];n.width=o.width,n.height=o.height,l.drawImage(o,0,0);for(let e of s){const s=e.attributes,i=s.getNamedItem("name").value,o=i.includes(".")?i.split(".")[0]:i,a=s.getNamedItem("x").value,n=s.getNamedItem("y").value,d=s.getNamedItem("width").value,E=s.getNamedItem("height").value;t.push(createImageBitmap(l.getImageData(a,n,d,E))),r.push(o)}this.#I(),Promise.all(t).then((t=>{t.forEach(((e,t)=>{const s=r[t];a.set(s,e),this.addImage(s,"empty url",e)})),n.remove(),e(a)}))},o.onerror=()=>{const e=new Error(ERROR_MESSAGES.ATLAS_IMAGE_LOADING_FAILED+t);this.#p(e),i(e)},o.src=t}));_loadTileSet=(e,t,s=1,r)=>(this.#L(t),fetch(r?r+t:t).then((e=>e.json())).then((e=>{const{name:t,image:i,spacing:o,margin:a,tilewidth:n,tileheight:l}=e;return t&&i&&!this.isFileInQueue("Image",t)&&this.addImage(t,r?r+i:i),e.gid=s,Promise.resolve(e)})).catch((()=>{const e=new Error(ERROR_MESSAGES.TILESET_LOADING_FAILED+t);return Promise.reject(e)})));_defaultUploadMethod=(e,t)=>fetch(t);_loadTileMap=(e,t,s=!0)=>(this.#S(t),fetch(t).then((e=>e.json())).then((e=>{const r=this.#R(t);if(!0===s&&e.tilesets&&e.tilesets.length>0){const t=[];return e.tilesets.forEach(((e,s)=>{const{firstgid:i,source:o}=e,a=this._loadTileSet("default-"+i,o,i,r).then((e=>(this.#I(),Promise.resolve(e))));t.push(a)})),Promise.all(t).then((t=>{for(let s=0;s<t.length;s++){const r=t[s];e.tilesets[s].data=r}return Promise.resolve(e)}))}return Promise.resolve(e)})).catch((e=>(e.message.includes("JSON.parse:")&&(e=new Error(ERROR_MESSAGES.TILEMAP_LOADING_FAILED+t)),this.#p(e),Promise.reject(e)))));_loadAudio=(e,t)=>new Promise(((e,s)=>{const r=new Audio(t);r.addEventListener("loadeddata",(()=>{this.#I(),e(r)})),r.addEventListener("error",(()=>{const e=new Error(ERROR_MESSAGES.AUDIO_LOADING_FAILED+t);this.#p(e),s(e)}))}));_loadImage=(e,t,s,r="anonymous")=>new Promise(((e,i)=>{if(s)e(s);else{const s=new Image;s.crossOrigin=r,s.onload=()=>{e(s)},s.onerror=()=>{const e=new Error(ERROR_MESSAGES.IMAGE_LOADING_FAILED+t);this.#p(e),i(e)},s.src=t}}));#_(e){e.includes(".xml")||Exception(ERROR_MESSAGES.XML_FILE_EXTENSION_INCORRECT)}#L(e){e.includes(".tsj")||e.includes(".json")||Exception(ERROR_MESSAGES.TILESET_FILE_EXTENSION_INCORRECT)}#S(e){e.includes(".tmj")||e.includes(".json")||Exception(ERROR_MESSAGES.TILEMAP_FILE_EXTENSION_INCORRECT)}#m(e){return e.message.includes(ERROR_MESSAGES.NOT_CORRECT_METHOD_TYPE)}#R(e){let t=e.split("/"),s=t.length,r="/";return t[s-1].includes(".tmj")||t[s-1].includes(".xml")||t[s-1].includes(".json")?(t.pop(),r=t.join("/")+"/"):(t[s-2].includes(".tmj")||t[s-2].includes(".xml")||t[s-2].includes(".json"))&&(t.splice(s-2,2),r=t.join("/")+"/"),r}addFile(e,t,s,...r){const i=this.#d.get(e);i?(this.#T(t,s),i._addFile(t,[s,...r])):Exception("Loader for "+e+" is not registered!")}isFileInQueue(e,t){const s=this.#d.get(e);if(s)return s._isFileInQueue(t);Exception("Loader for "+e+" is not registered!")}getFile(e,t){const s=this.#d.get(e);if(s)return s._getFile(t);Exception("Loader for "+e+" is not registered!")}#T(e,t){const s=ERROR_MESSAGES.INPUT_PARAMS_ARE_INCORRECT;e&&0!==e.trim().length||Exception(s),t&&0!==t.trim().length||Exception(s)}#h(){let e=this.filesWaitingForUpload;this.#l.dispatchEvent(new ProgressEvent(PROGRESS_EVENT_TYPE.loadstart,{total:e}))}#u(){this.#l.dispatchEvent(new ProgressEvent(PROGRESS_EVENT_TYPE.load))}#I(){const e=this.filesWaitingForUpload;this.#E+=1,this.#l.dispatchEvent(new ProgressEvent(PROGRESS_EVENT_TYPE.progress,{lengthComputable:!0,loaded:this.#E,total:e}))}#p(e){this.#l.dispatchEvent(new ProgressEvent(PROGRESS_EVENT_TYPE.error,{error:e}))}}function Exception(e){throw new Error(e)}function Warning(e){console.warn(e)}