const PROGRESS_EVENT_TYPE={loadstart:"loadstart",progress:"progress",abort:"abort",error:"error",load:"load",timeout:"timeout"};class Loader{#e;#t;#s=new Map;#i=new Map;constructor(e,t){this.#e=e,this.#t=(e,s,...i)=>{const r=t(e,s,...i);if(r instanceof Promise)return r.then((t=>this.#r(t,e)));Exception("uploadMethod should be instance of Promise and return upload result value")}}#r=(e,t)=>new Promise(((s,i)=>{e&&0!==e.length||Warning("uploadMethod for "+this.#e+" should return Promise with upload value"),this.#o(t,e),this.#a(t),s()}));#o(e,t){this.#i.set(e,t)}#a(e){this.#s.delete(e)}get filesWaitingForUpload(){return this.#s.size}get loadingQueue(){return this.#s}get uploadMethod(){return this.#t}_addFile=(e,t)=>{this.#s.has(e)&&Warning("File "+this.#e+" with key "+e+" is already added"),this.#s.set(e,t)};_isFileInQueue=e=>this.#s.has(e);_getFile=e=>this.#i.get(e)}export default class AssetsManager{#n=new EventTarget;#d=new Map;#l=0;constructor(){this.registerLoader("Audio",this._loadAudio),this.registerLoader("Image",this._loadImage),this.registerLoader("TileMap",this._loadTileMap)}get filesWaitingForUpload(){let e=0;return Array.from(this.#d.values()).map((t=>e+=t.filesWaitingForUpload)),e}registerLoader=(e,t=this._defaultUploadMethod)=>{const s=this.#d.get(e)||new Loader(e,t);this["add"+e]=(t,s)=>{this.addFile(e,t,s)},this["get"+e]=t=>this.getFile(e,t),this["is"+e+["InQueue"]]=t=>this.isFileInQueue(e,t),this.#d.set(e,s)};preload(){return this.#h(),new Promise(((e,t)=>{this.#u().then((()=>{this.filesWaitingForUpload?this.#u().then((()=>{this.#c(),e()})):(this.#c(),e())}))}))}#u(){let e=[];return Array.from(this.#d.values()).forEach((t=>{Array.from(t.loadingQueue.entries()).forEach((s=>{e.push(t.uploadMethod(s[0],s[1]))}))})),Promise.allSettled(e).then((e=>{e.forEach((e=>{if("rejected"===e.status){const t=e.reason;Warning(t),this.#g(t)}}))}))}addEventListener(e,t,...s){PROGRESS_EVENT_TYPE[e]?this.#n.addEventListener(e,t,...s):Warning("Event type should be one of the ProgressEvent.type")}removeEventListener(e,t,...s){this.#n.removeEventListener(e,t,...s)}#p=(e,t)=>{const{firstgid:s,source:i}=e;return this.#E(i),fetch(t+i).then((e=>e.json())).then((e=>{const{name:i,image:r}=e;return i&&r&&!this.isImageInQueue(i)&&this.addImage(i,t?t+r:r,e),e.gid=s,Promise.resolve(e)})).catch((()=>{const e=new Error("Can't load related tileset ",i);return Promise.reject(e)}))};_defaultUploadMethod=(e,t)=>fetch(t);_loadTileMap=(e,t)=>(this.#m(t),fetch(t).then((e=>e.json())).then((e=>{let s,i=t.split("/"),r=i.length;if(i[r-1].includes(".tmj")||i[r-1].includes(".json")?(i.pop(),s=i.join("/")+"/"):(i[r-2].includes(".tmj")||i[r-2].includes(".json"))&&(i.splice(r-2,2),s=i.join("/")+"/"),e.tilesets&&e.tilesets.length>0){const t=[];return e.tilesets.forEach(((e,i)=>{const r=this.#p(e,s).then((e=>(this.#f(),Promise.resolve(e))));t.push(r)})),Promise.all(t).then((t=>{for(let s=0;s<t.length;s++){const i=t[s];e.tilesets[s].data=i}return Promise.resolve(e)}))}})).catch((e=>(e.message.includes("JSON.parse:")&&(e=new Error("Can't load tilemap "+t)),this.#g(e),Promise.reject(e)))));_loadAudio=(e,t)=>new Promise(((e,s)=>{const i=new Audio(t);i.addEventListener("loadeddata",(()=>{this.#f(),e(i)})),i.addEventListener("error",(()=>{const e=new Error("Can't load audio "+t);this.#g(e),s(e)}))}));_loadImage=(e,t,s="anonymous")=>new Promise(((e,i)=>{const r=new Image;r.crossOrigin=s,r.onload=()=>{createImageBitmap(r).then((t=>{this.#f(),e(t)}))},r.onerror=()=>{const e=new Error("Can't load image "+t);this.#g(e),i(e)},r.src=t}));#E(e){e.includes(".tsj")||e.includes(".json")||Exception("Related Tileset file type is not correct, only .tsj or .json files are supported")}#m(e){e.includes(".tmj")||e.includes(".json")||Exception("Tilemap file type is not correct, only .tmj or .json files are supported")}addFile(e,t,s){const i=this.#d.get(e);i?(this.#L(t,s),i._addFile(t,s)):Exception("Loader for "+e+" is not registered!")}isFileInQueue(e,t){const s=this.#d.get(e);if(s)return s._isFileInQueue(t);Exception("Loader for "+e+" is not registered!")}getFile(e,t){const s=this.#d.get(e);if(s)return s._getFile(t);Exception("Loader for "+e+" is not registered!")}#L(e,t){const s="fileKey and url should be provided";e&&0!==e.trim().length||Exception(s),t&&0!==t.trim().length||Exception(s)}#h(){let e=this.filesWaitingForUpload;this.#n.dispatchEvent(new ProgressEvent(PROGRESS_EVENT_TYPE.loadstart,{total:e}))}#c(){this.#n.dispatchEvent(new ProgressEvent(PROGRESS_EVENT_TYPE.load))}#f(){const e=this.filesWaitingForUpload;this.#l+=1,this.#n.dispatchEvent(new ProgressEvent(PROGRESS_EVENT_TYPE.progress,{lengthComputable:!0,loaded:this.#l,total:e}))}#g(e){this.#n.dispatchEvent(new ProgressEvent(PROGRESS_EVENT_TYPE.error,{error:e}))}}function Exception(e){throw new Error(e)}function Warning(e){console.warn(e)}