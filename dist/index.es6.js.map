{"version":3,"file":"index.es6.js","mappings":";;;;;;;;;;;;AAAA,2BAA2B,oGAAoG,iBAAiB,63BAA63B,aAAa,GAAG,GAAG,WAAW,WAAW,iBAAiB,+BAA+B,oBAAoB,yDAAyD,6DAA6D,+BAA+B,wHAAwH,GAAG,QAAQ,iBAAiB,MAAM,kBAAkB,4BAA4B,oBAAoB,mBAAmB,eAAe,mBAAmB,eAAe,iBAAiB,6GAA6G,iCAAiC,2BAA0C,oBAAoB,KAAK,mBAAmB,WAAW,KAAK,cAAc,ySAAyS,4BAA4B,QAAQ,2EAA2E,iDAAiD,2BAA2B,yBAAyB,wFAAwF,wCAAwC,kBAAkB,UAAU,2CAA2C,qBAAqB,cAAc,cAAc,KAAK,GAAG,GAAG,QAAQ,2BAA2B,4DAA4D,gBAAgB,kDAAkD,4EAA4E,kBAAkB,GAAG,KAAK,4BAA4B,SAAS,0CAA0C,kDAAkD,2EAA2E,UAAU,GAAG,mCAAmC,kBAAkB,0BAA0B,iBAAiB,kEAAkE,MAAM,GAAG,GAAG,2BAA2B,uIAAuI,8BAA8B,sCAAsC,wIAAwI,iGAAiG,MAAM,mBAAmB,kEAAkE,yDAAyD,sCAAsC,IAAI,4DAA4D,oFAAoF,8BAA8B,WAAW,SAAS,qDAAqD,gBAAgB,iNAAiN,kDAAkD,+BAA+B,aAAa,mCAAmC,mBAAmB,aAAa,0CAA0C,mBAAmB,GAAG,gBAAgB,+DAA+D,mBAAmB,SAAS,GAAG,mFAAmF,MAAM,2DAA2D,GAAG,iGAAiG,eAAe,2DAA2D,wCAAwC,IAAI,qCAAqC,4EAA4E,mBAAmB,4CAA4C,WAAW,mCAAmC,MAAM,oBAAoB,qFAAqF,UAAU,4BAA4B,YAAY,WAAW,KAAK,aAAa,qBAAqB,0BAA0B,GAAG,0BAA0B,6IAA6I,mCAAmC,qBAAqB,sCAAsC,eAAe,oCAAoC,yDAAyD,mBAAmB,GAAG,GAAG,uDAAuD,UAAU,KAAK,kBAAkB,8BAA8B,qBAAqB,+BAA+B,YAAY,eAAe,GAAG,gBAAgB,yDAAyD,mBAAmB,UAAU,GAAG,MAAM,6EAA6E,MAAM,sGAAsG,MAAM,sGAAsG,MAAM,sYAAsY,MAAM,oCAAoC,kOAAkO,oBAAoB,uBAAuB,4FAA4F,mBAAmB,uBAAuB,gCAAgC,iDAAiD,aAAa,uBAAuB,0BAA0B,iDAAiD,UAAU,kDAAkD,oGAAoG,KAAK,iCAAiC,uEAAuE,QAAQ,GAAG,KAAK,mEAAmE,KAAK,mCAAmC,iFAAiF,2CAA2C,GAAG,MAAM,oGAAoG,QAAQ,IAAI,sBAAsB,mBAAmB,oBAAoB;;;;;;;;;;;;;;;;ACA9jQ;AACY;;AAEvD;AACA;AACA;AACA,SAAS,yBAAyB;AAClC;AACO,+BAA+B,gEAAe;AACrD;AACA,cAAc;AACd;AACA;;AAEA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAc,iEAAsB;AACpC;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;AC9C2C;AACY;;AAEvD;AACA;AACA;AACA,SAAS,yBAAyB;AAClC;AACO,8BAA8B,gEAAe;AACpD;AACA,cAAc;AACd;AACA;;AAEA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAc,gEAAqB;AACnC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA,eAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;AC5EsD;AACE;AACD;AACQ;AACV;AACrD;AACA;AACA;AACA,SAAS,yBAAyB;AAClC;AACO,8BAA8B,gEAAe;AACpD;AACA,cAAc;AACd;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAc,gEAAqB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,eAAe,QAAQ;AACvB,gBAAgB,QAAQ;AACxB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB;AACA;AACA;AACA;;AAEA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB;AACA;AACA;AACA;;AAEA;AACA;AACA,gBAAgB,SAAS;AACzB,gBAAgB,uBAAuB,2BAA2B,IAAI;AACtE,gBAAgB,UAAU;AAC1B;AACA;AACA;AACA,YAAY,wDAAS,CAAC,8EAAmC,4EAA4E,2BAA2B;AAChK;AACA,mCAAmC,8DAAc;AACjD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,eAAe,SAAS;AACxB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;AClT2C;AACY;;AAEvD;AACA;AACA;AACA,SAAS,yBAAyB;AAClC;AACO,6BAA6B,gEAAe;AACnD;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAc,+DAAoB;AAClC;AACA;;AAEA;AACA,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;;;;AChC2C;AACY;;AAEvD;AACA;AACA,SAAS,yBAAyB;AAClC;AACO,gCAAgC,gEAAe;AACtD;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAc,kEAAuB;AACrC;AACA;;AAEA;AACA,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;;;;AC/B2C;AACY;;AAEvD;AACA;AACA,SAAS,yBAAyB;AAClC;AACO,6BAA6B,gEAAe;AACnD;AACA,cAAc;AACd;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAc,oEAAyB;AACvC;AACA;AACA;AACA;;AAEA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;;;;AC1D2C;AACJ;;AAEvC;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA,cAAc;AACd,cAAc;AACd;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,cAAc;AACd;AACA,UAAU,2DAAoB;AAC9B;AACA,cAAc;AACd;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,cAAc;AACd,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,eAAe,iBAAiB;AAChC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,iBAAiB;AACjB;AACA;AACA;AACA;;AAEA,wBAAwB,YAAY;AACpC;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,iBAAiB;AACjB;AACA;AACA;AACA;;AAEA,wBAAwB,YAAY;AACpC;AACA;;AAEA;AACA;;AAEA;AACA;;;AAGA;AACA,eAAe,8BAA8B,mBAAmB,GAAG;AACnE,iBAAiB;AACjB;AACA;AACA;AACA;AACA,mBAAmB,wEAAiC;AACpD,UAAU;AACV;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;AC1QuD;AACX;AACY;AACZ;AACmB;;AAE/D;AACA;AACA,SAAS,yBAAyB;AAClC;AACO,6BAA6B,gEAAe;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAc,+DAAoB;AAClC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA,mBAAmB,qDAAS;AAC5B;;AAEA;AACA;AACA;AACA;;AAEA;AACA,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,2DAA2D,0BAA0B,GAAG;AACxF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,UAAU;AACV,YAAY,wDAAS,CAAC,0EAA+B;AACrD;AACA;AACA;;;;;;;;;;;;;;;;;;AC9NsD;AACC;AACQ;AACU;AACzE;AACA;AACA,SAAS,yBAAyB;AAClC;AACO;AACP;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,iBAAiB;AAChC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,8DAAc;;AAE/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAiE;AACjE,8BAA8B;AAC9B;AACA,+DAA+D;AAC/D,8BAA8B;AAC9B;AACA,yFAAyF;AACzF,8BAA8B,OAAO;AACrC;AACA,kEAAkE;AAClE;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,mDAAmD;AACnD;AACA;AACA;AACA,gCAAgC,iFAAqB;AACrD,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,eAAe,OAAO,+BAA+B,GAAG;AACxD,iBAAiB,OAAO,2BAA2B;AACnD;AACA;AACA,mDAAmD,4DAA4D;AAC/G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,eAAe,QAAQ;AACvB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;ACzTA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;;;;AC7EO;AACP;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;AC9FwD;AACA;AACE;AACA;AACF;AACM;AACF;AACJ;AACE;AACP;AACR;AACG;;AAE9C;AACA;AACA;AACA;AACA;AACA,SAAS,iBAAiB;AAC1B;AACO;AACP;AACA,cAAc;AACd;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;;AAEA;AACA;AACA,eAAe,GAAG;AAClB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,iBAAiB;AACjB;AACA;AACA,iCAAiC,iEAAc;AAC/C;AACA;AACA;;AAEA;AACA,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,iBAAiB;AACjB;AACA;AACA,iCAAiC,iEAAc;AAC/C;AACA;AACA;;AAEA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,eAAe,SAAS;AACxB,eAAe,SAAS;AACxB,iBAAiB;AACjB;AACA;AACA,iCAAiC,mEAAe;AAChD;AACA;AACA;;AAEA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,iBAAiB;AACjB;AACA;AACA,iCAAiC,qEAAgB;AACjD;AACA;AACA;;AAEA;AACA,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,eAAe,OAAO,mBAAmB,KAAK,SAAS,GAAG;AAC1D,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,iBAAiB;AACjB;AACA;AACA;;AAEA;AACA,YAAY,yDAAS,CAAC,0EAA8B;AACpD;AACA;AACA,iCAAiC,mEAAe;AAChD;AACA;AACA;AACA;;AAEA;AACA,eAAe,eAAe;AAC9B,eAAe,QAAQ;AACvB,iBAAiB;AACjB;AACA;AACA,iCAAiC,iEAAc;AAC/C;AACA;AACA;;AAEA;AACA,eAAe,OAAO,mBAAmB,GAAG;AAC5C,eAAe,QAAQ;AACvB,iBAAiB;AACjB;AACA;AACA,iCAAiC,uEAAiB;AAClD;AACA;AACA;;AAEA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,eAAe,UAAU;AACzB,eAAe,kBAAkB;AACjC,iBAAiB;AACjB;AACA;AACA;AACA,wCAAwC;AACxC;AACA,yEAAyE;AACzE;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA,aAAa;AACb;AACA,+BAA+B,iEAAc;AAC7C;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,UAAU;AACzB;AACA;AACA;AACA;;AAEA;AACA;AACA,eAAe,UAAU;AACzB,eAAe,YAAY;AAC3B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,eAAe,eAAe;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACzNwD;AACZ;;AAErC;AACP;AACA;AACA;AACA;AACA,YAAY,wDAAS,CAAC,4EAAiC;AACvD;AACA;AACA;;AAEA;AACA,6BAA6B,+EAAoC;AACjE;;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;;;ACpBO;AACP;AACA;;AAEO;AACP;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACNoE;AACjB;AACC;AACkB;AACX;AACC;AACF;AACA;AACF;AACM;AACN;AACA;AACjB;AACU;AACF;AACwK;AAC3K;;AAE5C;AACA;AACA;AACA;AACA;AACA,SAAS,cAAc;AACvB;AACA;AACO;AACP;AACA,cAAc;AACd;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,SAAS;AACxB;AACA;AACA;AACA;AACA;AACA,8BAA8B,4DAAa;AAC3C;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAAS;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA;AACA,eAAe,aAAa;AAC5B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA,YAAY,sDAAO,CAAC,gFAAqC;AACzD,UAAU;AACV;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,GAAG;AAClB,eAAe,IAAI;AACnB;AACA;AACA;AACA;;AAEA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,GAAG;AAClB,eAAe,IAAI;AACnB;AACA;AACA;AACA;;AAEA;AACA;AACA,eAAe,SAAS;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,eAAe,mBAAmB;AAClC,eAAe,aAAa;AAC5B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,eAAe,iBAAiB;AAChC,kBAAkB,8BAA8B;AAChD;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,+DAAoB;AACjC,aAAa,oEAAyB;AACtC,aAAa,gEAAqB;AAClC,aAAa,gEAAqB;AAClC;AACA;AACA,cAAc;AACd;AACA;AACA,aAAa,iEAAsB;AACnC,YAAY,sDAAO,CAAC,qFAA0C;AAC9D;AACA,aAAa,+DAAoB;AACjC,YAAY,sDAAO,CAAC,qFAA0C;AAC9D;AACA;AACA,YAAY,sDAAO,CAAC,kFAAuC;AAC3D;AACA;AACA;;AAEA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,eAAe,iBAAiB;AAChC,eAAe,wBAAwB;AACvC,kBAAkB,8BAA8B,WAAW;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,+DAAoB;AACjC,aAAa,oEAAyB;AACtC,aAAa,gEAAqB;AAClC,aAAa,gEAAqB;AAClC;AACA;AACA,cAAc;AACd;AACA;AACA,aAAa,iEAAsB;AACnC,YAAY,sDAAO,CAAC,qFAA0C;AAC9D;AACA,aAAa,+DAAoB;AACjC,YAAY,sDAAO,CAAC,qFAA0C;AAC9D;AACA;AACA,YAAY,sDAAO,CAAC,kFAAuC;AAC3D;AACA;AACA;AACA;AACA;;AAEA;AACA,wBAAwB,SAAS;AACjC;AACA;;AAEA;AACA;AACA;AACA,iBAAiB,+DAAoB;AACrC,iBAAiB,oEAAyB;AAC1C,iBAAiB,gEAAqB;AACtC,iBAAiB,gEAAqB;AACtC;AACA;AACA,iBAAiB,iEAAsB;AACvC;AACA;AACA,iBAAiB,+DAAoB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA,wBAAwB,SAAS;AACjC;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB,+DAAoB;AACrC,iBAAiB,oEAAyB;AAC1C,iBAAiB,gEAAqB;AACtC,iBAAiB,gEAAqB;AACtC;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA,iBAAiB,iEAAsB;AACvC;AACA;AACA,iBAAiB,+DAAoB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,SAAS;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,4BAA4B,iEAAqB;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,wBAAwB,sDAAM;AAC9B;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,SAAS;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,4BAA4B,kEAAsB;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,2BAA2B,sDAAM;AACjC,0BAA0B,yDAAa;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,kBAAkB,8BAA8B;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,wBAAwB,SAAS;AACjC;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd,kCAAkC,iEAAqB,+BAA+B,eAAe;AACrG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,UAAU;AACtC;AACA,gCAAgC,oEAAwB,WAAW,gCAAgC;AACnG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,UAAU;AACtC;AACA;AACA,gCAAgC,kEAAsB,UAAU,gCAAgC;AAChG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,eAAe,sBAAsB;AACrC,eAAe,QAAQ;AACvB,kBAAkB,8BAA8B;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,wBAAwB,SAAS;AACjC;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd,kCAAkC,kEAAsB,gCAAgC,eAAe;AACvG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,UAAU;AACtC;AACA,gCAAgC,qEAAyB;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,UAAU;AACtC;AACA;AACA,gCAAgC,mEAAuB;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;AC/oBgD;AACP;;AAEe;AACE;AACE;AACF;AACF;AACM;AACN;AACA;AACxD;AACA;AACA;AACA,SAAS,iBAAiB;AAC1B;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,gBAAgB,2CAA2C;AAC3D;AACA;AACA;AACA;;AAEA;AACA;AACA,eAAe,sBAAsB;AACrC;AACA;AACA;AACA;AACA,wBAAwB,SAAS;AACjC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,sDAAO,CAAC,iFAAsC;AAC1D;AACA,6BAA6B,iCAAiC;AAC9D,6BAA6B,6CAA6C;AAC1E,6BAA6B,6CAA6C;AAC1E,6BAA6B,iCAAiC;AAC9D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,sDAAO,CAAC,iFAAsC;AAC1D;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;;AAEA;AACA;AACA,eAAe,sBAAsB;AACrC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,wBAAwB,SAAS;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,eAAe,QAAQ;AACvB,iBAAiB;AACjB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;ACniBuC;;AAEvC;AACA;AACA;AACA;AACO;AACP;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,UAAU;AACzB;AACA;AACA;AACA;;AAEA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,eAAe,eAAe;AAC9B,eAAe,eAAe;AAC9B,iBAAiB;AACjB;AACA;AACA;AACA;;AAEA;AACA;AACA,eAAe,0BAA0B;AACzC,iBAAiB;AACjB;AACA;AACA;AACA;;AAEA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,oEAAoE;AACnF,eAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;AC1DqD;AACV;AACN;AACiB;;AAEtD;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,wDAAS,CAAC,4EAAiC;AACvD;AACA;AACA;;AAEA;AACA,QAAQ,mOAA0B;AAClC,4EAA4E,sBAAsB;AAClG;AACA;AACA,SAAS;AACT;;AAEA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,0BAA0B,kGAAuD;AACjF;;AAEA;AACA,0BAA0B,8FAAmD;AAC7E;;AAEA;AACA,0BAA0B,8FAAmD;AAC7E;;AAEA;AACA,QAAQ,oDAAY;AACpB,qCAAqC,yGAA8D;AACnG;;AAEA;AACA,QAAQ,oDAAY;AACpB,qCAAqC,yGAA8D;AACnG;;AAEA;AACA;AACA;;AAEA;AACA,QAAQ,oDAAY;AACpB,+BAA+B,+DAAW,CAAC,8FAAmD;AAC9F;;AAEA;AACA,QAAQ,oDAAY;AACpB,+BAA+B,+DAAW,CAAC,0FAA+C;AAC1F;;AAEA;AACA,QAAQ,oDAAY;AACpB,+BAA+B,+DAAW,CAAC,uFAA4C,GAAG,UAAU;AACpG;;AAEA;AACA,QAAQ,oDAAY;AACpB,+BAA+B,+DAAW,CAAC,oFAAyC,GAAG,KAAK;AAC5F;;AAEA;AACA,QAAQ,oDAAY;AACpB,+BAA+B,+DAAW,CAAC,sFAA2C,GAAG,UAAU;AACnG;;AAEA;AACA,+BAA+B,+DAAW,CAAC,4FAAiD,GAAG,SAAS;AACxG;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;ACxIoD;AACS;AACR;AACN;AACI;AACnD,WAAW,sBAAsB;AACO;AACsE;AACgC;AACjG;AAC7C;AACA;AACA;AACA;AACA,SAAS,iBAAiB;AAC1B;AACA;AACO;AACP;AACA,cAAc;AACd;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA,8DAA8D,cAAc;AAC5E;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,8DAAW;AAC3C;AACA;AACA,6DAA6D,qFAA0C;AACvG,6DAA6D,0FAA+C;AAC5G;AACA;AACA;AACA;AACA;AACA,uDAAuD,2EAAgC,EAAE,wEAAe,EAAE,0EAAiB,EAAE,oEAAW,EAAE,sEAAa;AACvJ;AACA;AACA,uDAAuD,+EAAoC,EAAE,mFAAsB,EAAE,qFAAwB,EAAE,+EAAkB,EAAE,iFAAoB;AACvL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,GAAG;AAClB,eAAe,IAAI;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,GAAG;AAClB,eAAe,IAAI;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,gBAAgB,QAAQ;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,eAAe,eAAe;AAC9B,eAAe,eAAe;AAC9B,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,uCAAuC;AACtD,iBAAiB;AACjB;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,oEAAoE;AACnF,eAAe,SAAS;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,eAAe;AAC9B;AACA;AACA;AACA;AACA;AACA,aAAa,8DAAmB;AAChC;AACA,2CAA2C,sDAAU;AACrD;AACA,sDAAsD,2EAAgC,kBAAkB,2EAAgC;AACxI,sDAAsD,yEAA8B,kBAAkB,yEAA8B;AACpI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD,2EAAgC,YAAY,2EAAgC;AACjI,qDAAqD,yEAA8B,YAAY,yEAA8B;AAC7H;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,sDAAO,CAAC,6EAAkC;AAClE;AACA;AACA,iBAAiB;AACjB;AACA,aAAa;AACb,SAAS;AACT;AACA;;;;;;;;;;;;;;;;;;;;;;;;ACxSoE;AAChB;AACX;AACQ;AACF;AACuB;AACX;AAChB;AACJ;AACM;;AAE7C;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,cAAc;AACvB,SAAS,iBAAiB;AAC1B;AACO;AACP;AACA,cAAc;AACd;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,cAAc;AACd;AACA,mBAAmB,4EAAa;AAChC;AACA,cAAc;AACd;AACA;AACA;AACA,cAAc;AACd;AACA,6BAA6B,oEAAiB;AAC9C;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,wDAAS,CAAC,4EAAiC;AACvD;AACA;AACA;AACA,yCAAyC,0DAAY;AACrD,4EAA4E,kDAAQ;AACpF,4BAA4B,gDAAO;AACnC,+BAA+B,sDAAU;AACzC;AACA;AACA,uCAAuC,2EAAgC,kBAAkB,2EAAgC;AACzH,uCAAuC,yEAA8B,kBAAkB,yEAA8B;AACrH;;AAEA;AACA;AACA,eAAe,QAAQ;AACvB,gBAAgB,QAAQ;AACxB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,GAAG;AAClB,eAAe,IAAI;AACnB;AACA;AACA;AACA;;AAEA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,GAAG;AAClB,eAAe,IAAI;AACnB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;;AAEA;AACA,eAAe;AACf;AACA;AACA;AACA;;AAEA;AACA,eAAe;AACf;AACA;AACA;AACA;;AAEA;AACA,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,gBAAgB,QAAQ;AACxB,iBAAiB;AACjB;AACA;AACA;AACA;AACA,YAAY,sDAAO,CAAC,iFAAsC;AAC1D;AACA,UAAU;AACV;AACA;AACA;AACA;;AAEA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA;AACA,gBAAgB,wDAAS,CAAC,2EAAgC;AAC1D,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,yEAA8B;AACxD;AACA;AACA;AACA,UAAU;AACV,YAAY,wDAAS,CAAC,qEAA0B;AAChD;AACA;;AAEA;AACA;AACA,eAAe,QAAQ;AACvB;AACA;AACA;AACA,sBAAsB,wEAA6B;AACnD;AACA;AACA;AACA,UAAU;AACV,YAAY,wDAAS,CAAC,sEAA2B;AACjD;AACA;AACA;;;;;;;;;;;;;;;;;AC7NuE;AACvB;AACP;;AAEzC;AACA;AACA;AACA;AACA;AACA,SAAS,iBAAiB;AAC1B;AACA;AACO;AACP;AACA;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,eAAe,QAAQ;AACvB,iBAAiB;AACjB;AACA;AACA;AACA;AACA,YAAY,sDAAO,CAAC,yEAA8B;AAClD;AACA;AACA;AACA;AACA,UAAU;AACV,YAAY,sDAAO,CAAC,6EAAkC;AACtD;AACA;AACA;;AAEA;AACA;AACA,eAAe,QAAQ;AACvB,iBAAiB;AACjB;AACA;AACA;AACA;AACA,YAAY,sDAAO,CAAC,yEAA8B;AAClD;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,YAAY,sDAAO,CAAC,6EAAkC;AACtD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,eAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;AC7F+C;AACP;;AAEjC;AACP;AACA,YAAY,4DAAmB,KAAK,2DAAgB;AACpD;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACR+C;AACI;AACX;AACC;AACO;AAChD;AACwD;AACE;AACE;AACF;AACF;AACM;AACN;AACA;AACH;AACE;AACvD;AACoC;AACpC;AACA;AACA;AACA;AACA,SAAS,eAAe;AACxB;AACA;AACO;AACP;AACA,cAAc;AACd;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA,eAAe,eAAe;AAC9B;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA,eAAe,gBAAgB;AAC/B;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA,oCAAoC,iEAAe;AACnD;AACA;AACA;AACA;AACA,6EAA6E,sFAA2C;AACxH;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4GAA4G,qFAA0C;AACtJ;AACA,kBAAkB,2EAAgC;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA,sBAAsB,yEAA8B;AACpD;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,oBAAoB,sDAAO,CAAC,6EAAkC;AAC9D,iBAAiB;AACjB,cAAc;AACd,gBAAgB,sDAAO,CAAC,6EAAkC;AAC1D;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,SAAS;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,GAAG;AAClB,eAAe,IAAI;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,GAAG;AAClB,eAAe,IAAI;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,gBAAgB,QAAQ;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,8IAA8I;AAC7J,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,mBAAmB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,UAAU;AAC1C;AACA;AACA;AACA;AACA,mCAAmC,sEAA8B;AACjE,oDAAoD,8CAA8C;AAClG;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,UAAU;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,gBAAgB;AAC/B,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,yCAAyC;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,qBAAqB;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,iBAAiB;AACvD,0CAA0C,iBAAiB;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,WAAW;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACzZA;AACA;AACA,SAAS,kBAAkB;AAC3B;AACA;AACO;AACP;AACA,cAAc;AACd;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,eAAe,QAAQ;AACvB;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;AC5F8C;AACH;AACA;AACJ;AACQ;;AAEU;;AAEzD;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA,cAAc;AACd;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,eAAe,gBAAgB;AAC/B,eAAe,oBAAoB;AACnC;AACA;AACA;AACA,YAAY,wDAAS,CAAC,4EAAiC;AACvD;AACA;;AAEA;AACA;AACA;AACA;;AAEA,4BAA4B,gDAAO;;AAEnC,4CAA4C,iEAAY;;AAExD;AACA;AACA;AACA;;AAEA;AACA,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,WAAW;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,YAAY,wDAAS,CAAC,4EAAiC;AACvD;AACA;;AAEA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;;AAEA;AACA,uDAAuD,mBAAmB;AAC1E;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;;AC9FA;AACA;AACA;AACO;AACP;AACA,cAAc;AACd;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;;ACxCA;AACA;AACA;AACO;AACP;AACA,cAAc;AACd;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,eAAe,QAAQ;AACvB;AACA;AACA;AACA,eAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;AChEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;;;;;;;;;;;;;;;;;;AC/DA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACxEuE;AACzB;AACO;AACD;AACW;AAC/D;AACyD;AACI;AACF;AACF;AACM;AACN;AACA;AACzD;AACyE;AACzE;AACO;AACP;AACA,cAAc;AACd;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,wDAAS,CAAC,8EAAmC;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,uEAAmB,kBAAkB,2EAAgC;AACxG,mCAAmC,uEAAmB,wBAAwB,+EAAoC;AAClH,mCAAmC,4EAAsB,wBAAwB,+EAAoC;AACrH,mCAAmC,0EAAqB,mBAAmB,+EAAoC;AAC/G,mCAAmC,wEAAoB,mBAAmB,+EAAoC;AAC9G,mCAAmC,sEAAmB,wBAAwB,2EAAgC;AAC9G,mCAAmC,sEAAmB,kBAAkB,+EAAoC;AAC5G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8DAA8D,iEAAc;AAC5E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,yCAAyC;AAC/D;AACA;AACA;AACA,gCAAgC,qBAAqB;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,gBAAgB,sDAAO,CAAC,8EAAmC;AAC3D;AACA;AACA;AACA;AACA,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,uDAAuD,qFAA0C;AACjG;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,2CAA2C;AAC7E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,cAAc;AACd;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,eAAe,eAAe;AAC9B,eAAe,eAAe;AAC9B,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd,gBAAgB,wDAAS,CAAC,kEAAuB;AACjD;AACA;AACA;AACA;AACA;AACA,cAAc;AACd,gBAAgB,wDAAS,CAAC,kEAAuB;AACjD;AACA;AACA;AACA;AACA;AACA,gBAAgB,wDAAS,CAAC,kEAAuB,0CAA0C,KAAK;AAChG;AACA,UAAU;AACV,YAAY,wDAAS,CAAC,kEAAuB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,cAAc;AAC7B,eAAe,eAAe;AAC9B,eAAe,eAAe;AAC9B,iBAAiB,+CAA+C;AAChE;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,wDAAS,CAAC,kEAAuB;AACjD;AACA,UAAU;AACV,YAAY,wDAAS,CAAC,kEAAuB,qBAAqB,WAAW;AAC7E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,oEAAyB;AACtC;AACA;AACA;AACA,aAAa,+DAAoB;AACjC;AACA,aAAa,iEAAsB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,kEAAuB;AACpC;AACA;AACA;AACA;AACA,gBAAgB,sDAAO,CAAC,qFAA0C,cAAc,gBAAgB;AAChG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,uCAAuC;AACvC;AACA,eAAe,kCAAkC;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,uEAAgB;AACjD;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,uEAAgB;AACjD;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,uCAAuC;AACvC;AACA;AACA;AACA;AACA,iBAAiB,qFAA0C;AAC3D;AACA;AACA,iBAAiB,0FAA+C;AAChE,iBAAiB,qFAA0C;AAC3D;AACA;AACA,iBAAiB,iFAAsC;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,4BAA4B;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,uBAAuB;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,uEAAgB;AACzD;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,+EAAoC;AAC5E,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,8BAA8B,+EAAoC;AAChF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,sDAAO,CAAC,qFAA0C;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,+EAAoC;AAC5E,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,8BAA8B,+EAAoC;AAChF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,oEAAoE;AACnF,eAAe,SAAS;AACxB;AACA;AACA,4DAA4D,qEAAqE;AACjI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA,UAAU;AACV;AACA,sCAAsC,gEAAqB;AAC3D,gDAAgD,2EAAgC;AAChF,uDAAuD,2EAAgC;AACvF;AACA;AACA;AACA;AACA,wBAAwB,wDAAS,CAAC,yEAA8B;AAChE,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA,qBAAqB;AACrB,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,gBAAgB;AAC/B,eAAe,eAAe;AAC9B,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,yCAAyC;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,sDAAO,CAAC,kEAAuB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,qBAAqB;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,kBAAkB;AACpD;AACA,sCAAsC,kBAAkB;AACxgDAAgD,sDAAO;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0DAA0D;AAC1D;AACA;AACA;AACA;AACA,qDAAqD;AACrD,8CAA8C;AAC9C;AACA;AACA,8CAA8C;AAC9C;AACA;AACA;AACA;AACA,8CAA8C;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,yCAAyC;AAC3D;AACA;AACA;AACA;AACA,gBAAgB,sDAAO,CAAC,kEAAuB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,0BAA0B;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,iBAAiB;AACnD,sCAAsC,iBAAiB;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,eAAe,gBAAgB;AAC/B,eAAe,eAAe;AAC9B,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,yCAAyC;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,sDAAO,CAAC,kEAAuB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,qBAAqB;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,iBAAiB;AACjB;AACA;AACA,2FAA2F,QAAQ;AACnG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,sBAAsB;AACrC,eAAe,cAAc;AAC7B,iBAAiB;AACjB;AACA;AACA;AACA,qCAAqC,uDAAY,EAAE,8BAA8B,GAAG,8BAA8B;AAClH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,oBAAoB,sDAAO,CAAC,0EAA+B;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,QAAQ;AAChC;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;AC5tDuC;AACvC;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,2DAAgB;AAClC;AACA;AACA;AACA,iBAAiB,8DAAmB;AACpC,sBAAsB,iFAAsC;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,uBAAuB,sFAA2C;AAClE;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACxEO;AACP;AACA;AACA;AACA,KAAK;AACL,eAAe;AACf,aAAa;AACb;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL,oBAAoB;AACpB;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;AC9HiD;;AAE1C,2BAA2B,yDAAS;AAC3C;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,mBAAmB,wBAAwB;AAC3C;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC1C0C;AACM;AACe;AACT;AACA;AACR;AACP;AACH;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACPa;;AAEjD;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,4CAA4C,0DAAM;AAClD;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,YAAY,6CAA6C;AACzD,YAAY,6CAA6C;AACzD,cAAc,8BAA8B;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA,gBAAgB;AAChB,MAAM;AACN;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,eAAe,0DAAM;AACrB;;AAEA;AACA,gBAAgB,0DAAM,wDAAwD,0DAAM;AACpF;;AAEA;AACA,sBAAsB,0DAAM;AAC5B,uBAAuB,0DAAM,kDAAkD,0DAAM;;AAErF;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,sBAAsB;AACjC,YAAY,6CAA6C;AACzD,cAAc,8BAA8B;AAC5C;AACA;AACA;AACA;AACA,oBAAoB,SAAS;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,oBAAoB,SAAS;AAC7B;AACA;;AAEA;AACA;AACA;AACA;;AAEA,kCAAkC,IAAI,GAAG,+DAA+D;AACxG;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,oBAAoB,SAAS;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,MAAM;AACN;AACA;AACA;;AAEA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;;AAEA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,YAAY,+BAA+B;AAC3C,aAAa;AACb;AACA;AACA;AACA,iCAAiC,0DAAM;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,gBAAgB,mBAAmB;AACnC,gBAAgB,mBAAmB;AACnC,gBAAgB,qBAAqB;AACrC,gBAAgB,qBAAqB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA,yBAAyB;AACzB;AACA,MAAM;AACN;AACA;AACA;;AAEA;AACA;AACA,WAAW,eAAe;AAC1B,WAAW,sBAAsB;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,sBAAsB;AAClD,4BAA4B,sBAAsB;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,sCAAsC;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,eAAe;AAC1B,YAAY,+BAA+B;AAC3C,cAAc,8BAA8B;AAC5C;AACA;AACA;AACA;AACA,gCAAgC,gDAAgD;AAChF;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB,UAAU;AACV;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,eAAe;AAC1B,WAAW,sBAAsB;AACjC,aAAa;AACb;AACA;AACA;;AAEA,oBAAoB,SAAS;AAC7B;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,oBAAoB,SAAS;AAC7B;AACA;AACA;AACA;AACA;;AAEA;AACA,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,aAAa;AACb;AACA;AACA;;AAEA,oBAAoB,YAAY;AAChC;AACA;;AAEA;AACA;;AAEA;AACA;;;;;;;;SCzaA;SACA;;SAEA;SACA;SACA;SACA;SACA;SACA;SACA;SACA;SACA;SACA;SACA;SACA;SACA;;SAEA;SACA;;SAEA;SACA;SACA;;SAEA;SACA;;;;;UCzBA;UACA;UACA;UACA;UACA,yCAAyC,wCAAwC;UACjF;UACA;UACA;;;;;UCPA;UACA;UACA;UACA;UACA;UACA;UACA;UACA,EAAE;UACF;;;;;UCRA;UACA;UACA;UACA;UACA;;;;;UCJA;;;;;UCAA;UACA;UACA;UACA;UACA,uBAAuB,4BAA4B;UACnD;UACA;UACA;UACA,iBAAiB,oBAAoB;UACrC;UACA,mGAAmG,YAAY;UAC/G;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA,mEAAmE,iCAAiC;UACpG;UACA;UACA;UACA;;;;;UCxCA;UACA;UACA;UACA,uDAAuD,iBAAiB;UACxE;UACA,gDAAgD,aAAa;UAC7D;;;;;UCNA;UACA;UACA;UACA;UACA;UACA;UACA;;;;;UCNA;;UAEA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;UACA;UACA,iCAAiC;;UAEjC;UACA;UACA;UACA,KAAK;UACL,eAAe;UACf;UACA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA,MAAM;UACN;UACA;UACA;;UAEA;;UAEA;;UAEA;;UAEA;;UAEA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA,MAAM,qBAAqB;UAC3B;UACA;UACA;UACA;UACA;UACA;;UAEA;;UAEA;UACA;UACA;;;;;SErFA;SACA;SACA;SACA","sources":["webpack://jsge/./modules/assetsm/dist/assetsm.min.js","webpack://jsge/./src/base/2d/DrawCircleObject.js","webpack://jsge/./src/base/2d/DrawConusObject.js","webpack://jsge/./src/base/2d/DrawImageObject.js","webpack://jsge/./src/base/2d/DrawLineObject.js","webpack://jsge/./src/base/2d/DrawPolygonObject.js","webpack://jsge/./src/base/2d/DrawRectObject.js","webpack://jsge/./src/base/2d/DrawShapeObject.js","webpack://jsge/./src/base/2d/DrawTextObject.js","webpack://jsge/./src/base/2d/DrawTiledLayer.js","webpack://jsge/./src/base/2d/Primitives.js","webpack://jsge/./src/base/AnimationEvent.js","webpack://jsge/./src/base/DrawObjectFactory.js","webpack://jsge/./src/base/Events/SystemEvent.js","webpack://jsge/./src/base/Exception.js","webpack://jsge/./src/base/GameStage.js","webpack://jsge/./src/base/GameStageData.js","webpack://jsge/./src/base/IExtension.js","webpack://jsge/./src/base/INetwork.js","webpack://jsge/./src/base/IRender.js","webpack://jsge/./src/base/ISystem.js","webpack://jsge/./src/base/ISystemAudio.js","webpack://jsge/./src/base/Logger.js","webpack://jsge/./src/base/RenderLoop.js","webpack://jsge/./src/base/RenderLoopDebug.js","webpack://jsge/./src/base/System.js","webpack://jsge/./src/base/Temp/ImageTempStorage.js","webpack://jsge/./src/base/Temp/TiledLayerTempStorage.js","webpack://jsge/./src/base/WebGl/ImagesDrawProgram.js","webpack://jsge/./src/base/WebGl/PrimitivesDrawProgram.js","webpack://jsge/./src/base/WebGl/WebGlEngine.js","webpack://jsge/./src/configs.js","webpack://jsge/./src/constants.js","webpack://jsge/./src/design/LoadingStage.js","webpack://jsge/./src/index.js","webpack://jsge/./src/utils.js","webpack://jsge/webpack/bootstrap","webpack://jsge/webpack/runtime/define property getters","webpack://jsge/webpack/runtime/ensure chunk","webpack://jsge/webpack/runtime/get javascript chunk filename","webpack://jsge/webpack/runtime/hasOwnProperty shorthand","webpack://jsge/webpack/runtime/load script","webpack://jsge/webpack/runtime/make namespace object","webpack://jsge/webpack/runtime/publicPath","webpack://jsge/webpack/runtime/jsonp chunk loading","webpack://jsge/webpack/before-startup","webpack://jsge/webpack/startup","webpack://jsge/webpack/after-startup"],"sourcesContent":["const PROGRESS_EVENT_TYPE={loadstart:\"loadstart\",progress:\"progress\",abort:\"abort\",error:\"error\",load:\"load\",timeout:\"timeout\"},ERROR_MESSAGES={LOADER_NOT_REGISTERED:\" loader is not registered.\",RECURSION_ERROR:\"Too much recursion. Stop iteration.\",NOT_CORRECT_METHOD_TYPE:\"uploadMethod should be instance of Promise and return upload result value\",XML_FILE_EXTENSION_INCORRECT:\" AtlasXML file extension is incorrect, only .xml file supported\",TILESET_FILE_EXTENSION_INCORRECT:\" tileset file extension is not correct, only .tsj or .json files are supported\",TILEMAP_FILE_EXTENSION_INCORRECT:\" tilemap file extension is not correct, only .tmj or .json files are supported\",INPUT_PARAMS_ARE_INCORRECT:\" fileKey and url should be provided\",ATLAS_IMAGE_LOADING_FAILED:\"Error loading atlas image \",TILESET_LOADING_FAILED:\"Error loading related tileset \",TILEMAP_LOADING_FAILED:\"Error loading tilemap \",AUDIO_LOADING_FAILED:\"Error loading audio \",IMAGE_LOADING_FAILED:\"Error loading image \",XML_FORMAT_INCORRECT:\" XML format is not correct.\"};class Loader{#e;#t;#r=new Map;#s=new Map;constructor(e,t){this.#e=e,this.#t=(e,r,...s)=>{const i=t(e,r,...s);if(i instanceof Promise)return i.then((t=>this.#i(t,e)));throw new TypeError(ERROR_MESSAGES.NOT_CORRECT_METHOD_TYPE)}}#i=(e,t)=>new Promise(((r,s)=>{e||null===e||Warning(\"AssetsManager: uploadMethod for \"+this.#e+\" returns incorrect value\"),this.#o(t,e),this.#a(t),r()}));#o(e,t){this.#s.set(e,t)}#a(e){this.#r.delete(e)}get filesWaitingForUpload(){return this.#r.size}get loadingQueue(){return this.#r}get uploadMethod(){return this.#t}_addFile=(e,t)=>{this.#r.has(e)&&Warning(\"AssetsManager: File \"+this.#e+\" with key \"+e+\" is already added\"),this.#r.set(e,t)};_isFileInQueue=e=>this.#r.has(e);_getFile=e=>this.#s.get(e)}export default class AssetsManager{#n=5;#l=new EventTarget;#d=new Map;#E=0;constructor(){this.registerLoader(\"Audio\",this._loadAudio),this.registerLoader(\"Image\",this._loadImage),this.registerLoader(\"TileMap\",this._loadTileMap),this.registerLoader(\"TileSet\",this._loadTileSet),this.registerLoader(\"AtlasImageMap\",this._loadAtlasImage),this.registerLoader(\"AtlasXML\",this._loadAtlasXml)}get filesWaitingForUpload(){let e=0;return Array.from(this.#d.values()).map((t=>e+=t.filesWaitingForUpload)),e}registerLoader=(e,t=this._defaultUploadMethod)=>{this[\"add\"+e]=(t,r,...s)=>{this.addFile(e,t,r,...s)},this[\"get\"+e]=t=>this.getFile(e,t),this[\"is\"+e+[\"InQueue\"]]=t=>this.isFileInQueue(e,t);const r=this.#d.get(e)||new Loader(e,t);this.#d.set(e,r)};preload(){return this.#h(),new Promise((async(e,t)=>{this.#u().then((()=>{this.#c(),e()})).catch((e=>{t(e)}))}))}#u(e=0){return this.#R().then((t=>{if(0===this.filesWaitingForUpload)return Promise.resolve(t);if(++e>this.#n){const e=new Error(ERROR_MESSAGES.RECURSION_ERROR);return this.#g(e),Promise.reject(new Error(ERROR_MESSAGES.RECURSION_ERROR))}return this.#u(e)}))}#R(){return new Promise(((e,t)=>{let r=[];Array.from(this.#d.values()).forEach((e=>{Array.from(e.loadingQueue.entries()).forEach((t=>{const s=new Promise(((r,s)=>e.uploadMethod(t[0],...t[1]).then((e=>r(e)))));r.push(s)}))})),Promise.allSettled(r).then((r=>{for(const s of r){if(\"rejected\"===s.status){const e=s.reason;this.#_(e)?t(e):(Warning(\"AssetsManager: \"+e.message),this.#g(e))}e(r)}}))}))}addEventListener(e,t,...r){PROGRESS_EVENT_TYPE[e]?this.#l.addEventListener(e,t,...r):Warning(\"AssetsManager: Event type should be one of the ProgressEvent.type\")}removeEventListener(e,t,...r){this.#l.removeEventListener(e,t,...r)}_loadAtlasXml=(e,t)=>(this.#m(t),fetch(t).then((e=>e.text())).then((e=>(new window.DOMParser).parseFromString(e,\"text/xml\"))).then((r=>{const s=r.documentElement||r.activeElement,i=s.attributes.getNamedItem(\"imagePath\"),o=s.children;if(i){const r=this.#p(t);return this.addAtlasImageMap(e,r+i.value,o,r),Promise.resolve(s)}{const t=new Error(e+ERROR_MESSAGES.XML_FORMAT_INCORRECT);return this.#g(t),Promise.resolve(t)}})));_loadAtlasImage=(e,t,r,s=\"anonymous\")=>new Promise(((e,i)=>{const o=new Image,a=new Map,n=document.createElement(\"canvas\"),l=n.getContext(\"2d\");o.crossOrigin=s,o.onload=()=>{const t=[];let s=[];n.width=o.width,n.height=o.height,l.drawImage(o,0,0);for(let e of r){const r=e.attributes,i=r.getNamedItem(\"name\").value,o=i.includes(\".\")?i.split(\".\")[0]:i,a=r.getNamedItem(\"x\").value,n=r.getNamedItem(\"y\").value,d=r.getNamedItem(\"width\").value,E=r.getNamedItem(\"height\").value;t.push(createImageBitmap(l.getImageData(a,n,d,E),{premultiplyAlpha:\"premultiply\"})),s.push(o)}this.#S(),Promise.all(t).then((t=>{t.forEach(((e,t)=>{const r=s[t];a.set(r,e),this.addImage(r,\"empty url\",e)})),n.remove(),e(a)}))},o.onerror=()=>{const r=new Error(ERROR_MESSAGES.ATLAS_IMAGE_LOADING_FAILED+t);this.#g(r),e(null)},o.src=t}));_loadTileSet=(e,t,r=1,s)=>(this.#I(t),fetch(s?s+t:t).then((e=>e.json())).then((e=>{const{name:t,image:i,spacing:o,margin:a,tilewidth:n,tileheight:l}=e;return t&&i&&!this.isFileInQueue(\"Image\",t)&&this.addImage(t,s?s+i:i),e.gid=r,Promise.resolve(e)})).catch((()=>{const e=new Error(ERROR_MESSAGES.TILESET_LOADING_FAILED+t);return this.#g(e),Promise.resolve(null)})));_defaultUploadMethod=(e,t)=>fetch(t);_loadTileMap=(e,t,r=!0)=>(this.#L(t),fetch(t).then((e=>e.json())).then((e=>{const s=this.#p(t);if(!0===r&&e.tilesets&&e.tilesets.length>0){const t=[];return e.tilesets.forEach(((e,r)=>{const{firstgid:i,source:o}=e,a=this._loadTileSet(\"default-\"+i,o,i,s).then((e=>(this.#S(),Promise.resolve(e))));t.push(a)})),Promise.all(t).then((t=>{for(let r=0;r<t.length;r++){const s=t[r];e.tilesets[r].data=s}return Promise.resolve(e)}))}return Promise.resolve(e)})).catch((e=>(e.message.includes(\"JSON.parse:\")&&(e=new Error(ERROR_MESSAGES.TILEMAP_LOADING_FAILED+t)),this.#g(e),Promise.resolve(null)))));_loadAudio=(e,t)=>new Promise((e=>{const r=new Audio(t);r.addEventListener(\"loadeddata\",(()=>{this.#S(),e(r)})),r.addEventListener(\"error\",(()=>{const r=new Error(ERROR_MESSAGES.AUDIO_LOADING_FAILED+t);this.#g(r),e(null)}))}));_loadImage=(e,t,r,s=\"anonymous\")=>new Promise(((e,i)=>{if(r)e(r);else{const r=new Image;r.crossOrigin=s,r.onload=()=>{createImageBitmap(r,{premultiplyAlpha:\"premultiply\"}).then((t=>{this.#S(),e(t)}))},r.onerror=()=>{const r=new Error(ERROR_MESSAGES.IMAGE_LOADING_FAILED+t);this.#g(r),e(null)},r.src=t}}));#m(e){e.includes(\".xml\")||Exception(e+ERROR_MESSAGES.XML_FILE_EXTENSION_INCORRECT)}#I(e){e.includes(\".tsj\")||e.includes(\".json\")||Exception(e+ERROR_MESSAGES.TILESET_FILE_EXTENSION_INCORRECT)}#L(e){e.includes(\".tmj\")||e.includes(\".json\")||Exception(e+ERROR_MESSAGES.TILEMAP_FILE_EXTENSION_INCORRECT)}#_(e){return e.message.includes(ERROR_MESSAGES.NOT_CORRECT_METHOD_TYPE)||e.message.includes(ERROR_MESSAGES.XML_FILE_EXTENSION_INCORRECT)||e.message.includes(ERROR_MESSAGES.TILESET_FILE_EXTENSION_INCORRECT)||e.message.includes(ERROR_MESSAGES.TILEMAP_FILE_EXTENSION_INCORRECT)||e.message.includes(ERROR_MESSAGES.INPUT_PARAMS_ARE_INCORRECT)||e.message.includes(ERROR_MESSAGES.LOADER_NOT_REGISTERED)}#p(e){let t=e.split(\"/\"),r=t.length,s=\"/\";return t[r-1].includes(\".tmj\")||t[r-1].includes(\".xml\")||t[r-1].includes(\".json\")?(t.pop(),s=t.join(\"/\")+\"/\"):(t[r-2].includes(\".tmj\")||t[r-2].includes(\".xml\")||t[r-2].includes(\".json\"))&&(t.splice(r-2,2),s=t.join(\"/\")+\"/\"),s}addFile(e,t,r,...s){const i=this.#d.get(e);i?(this.#A(t,r,e),i._addFile(t,[r,...s])):Exception(e+ERROR_MESSAGES.LOADER_NOT_REGISTERED)}isFileInQueue(e,t){const r=this.#d.get(e);if(r)return r._isFileInQueue(t);Exception(\"Loader for \"+e+\" is not registered!\")}getFile(e,t){const r=this.#d.get(e);if(r)return r._getFile(t);Exception(\"Loader for \"+e+\" is not registered!\")}#A(e,t,r){const s=ERROR_MESSAGES.INPUT_PARAMS_ARE_INCORRECT;e&&0!==e.trim().length||Exception(\"add\"+r+\"()\"+s),t&&0!==t.trim().length||Exception(\"add\"+r+\"()\"+s)}#h(){let e=this.filesWaitingForUpload;this.#l.dispatchEvent(new ProgressEvent(PROGRESS_EVENT_TYPE.loadstart,{total:e}))}#c(){this.#l.dispatchEvent(new ProgressEvent(PROGRESS_EVENT_TYPE.load))}#S(){const e=this.filesWaitingForUpload;this.#E+=1,this.#l.dispatchEvent(new ProgressEvent(PROGRESS_EVENT_TYPE.progress,{lengthComputable:!0,loaded:this.#E,total:e}))}#g(e){Warning(\"AssetsManger: \"+e.message),this.#l.dispatchEvent(new ErrorEvent(PROGRESS_EVENT_TYPE.error,{error:e}))}}function Exception(e){throw new Error(e)}function Warning(e){console.warn(e)}","import { CONST } from \"../../constants.js\";\nimport { DrawShapeObject } from \"./DrawShapeObject.js\";\n\n/**\n * Circle object to draw.\n * @extends DrawShapeObject\n * @see {@link DrawObjectFactory} should be created with factory method\n */\nexport class DrawCircleObject extends DrawShapeObject {\n    /**\n     * @type {number}\n     */\n    #radius;\n\n    /**\n     * @type {Array<number>}\n     */\n    #vertices;\n\n    /**\n     * @hideconstructor\n     */\n    constructor(x, y, radius, bgColor) {\n        super(CONST.DRAW_TYPE.CIRCLE, x, y, bgColor);\n        this.#radius = radius;\n        this.#vertices = this._interpolateConus(radius);\n    }\n\n    /**\n     * Array of [x,y] cords.\n     * @type {Array<number>}\n     */\n    get vertices () {\n        return this.#vertices;\n    }\n\n    set vertices(value) {\n        this.#vertices = value;\n    }\n\n    /**\n     * @type {number}\n     */\n    get radius() {\n        return this.#radius;\n    }\n}","import { CONST } from \"../../constants.js\";\nimport { DrawShapeObject } from \"./DrawShapeObject.js\";\n\n/**\n * Conus object to draw.\n * @extends DrawShapeObject\n * @see {@link DrawObjectFactory} should be created with factory method\n */\nexport class DrawConusObject extends DrawShapeObject {\n    /**\n     * @type {number}\n     */\n    #radius;\n\n    /**\n     * @type {number}\n     */\n    #angle;\n\n    /**\n     * Array of [x,y] cords.\n     * @type {Array<number>}\n     */\n    #vertices;\n    #fade_min;\n\n    /**\n     * @hideconstructor\n     */\n    constructor(x, y, radius, bgColor, angle, fade = 0) {\n        super(CONST.DRAW_TYPE.CONUS, x, y, bgColor);\n        this.#radius = radius;\n        this.#angle = angle;\n        this.#fade_min = fade;\n        this.#vertices = this._interpolateConus(radius, angle);\n    }\n\n    /**\n     * Array of [x,y] cords.\n     * @type {Array<number>}\n     */\n    get vertices () {\n        return this.#vertices;\n    }\n\n    set vertices(value) {\n        this.#vertices = value;\n    }\n\n    /**\n     * @type {number}\n     */\n    get radius() {\n        return this.#radius;\n    }\n\n    /**\n     * @type {number}\n     */\n    get angle() {\n        return this.#angle;\n    }\n\n    /**\n     * @type {number}\n     */\n    get fade_min() {\n        return this.#fade_min;\n    }\n\n    /**\n     * @param {number} value - fade start pos in px\n     */\n    set fade_min(value) {\n        this.#fade_min = value;\n    }\n}","import { AnimationEvent } from \"../AnimationEvent.js\";\nimport { CONST, ERROR_CODES } from \"../../constants.js\";\nimport { DrawShapeObject } from \"./DrawShapeObject.js\";\nimport { ImageTempStorage } from \"../Temp/ImageTempStorage.js\";\nimport { Exception, Warning } from \"../Exception.js\";\n/**\n * Image object to draw\n * @extends DrawShapeObject\n * @see {@link DrawObjectFactory} should be created with factory method\n */\nexport class DrawImageObject extends DrawShapeObject {\n    /**\n     * @type {number}\n     */\n    #w;\n    /**\n     * @type {number}\n     */\n    #h;\n    /**\n     * Image sprite key\n     * @type {string}\n     */\n    #key;\n    /**\n     * @type {ImageBitmap}\n     */\n    #image;\n    /**\n     * @type {EventTarget}\n     */\n    #emitter;\n    /**\n     * @type {Map<string, AnimationEvent>}\n     */\n    #animations;\n    /**\n     * @type {null | string}\n     */\n    #activeAnimation;\n    /**\n     * @type {number}\n     */\n    #imageIndex;\n    /**\n     * @type {number}\n     */\n    #spacing = 0;\n    /**\n     * @type {number}\n     */\n    #margin = 0;\n    /**\n     * @type {Array<Array<number>>}\n     */\n    #vertices;\n    /**\n     * @type {Object | null}\n     */\n    #circleBoundaries;\n    /**\n     * @type {ImageTempStorage}\n     */\n    #textureStorage;\n\n    /**\n     * @hideconstructor\n     */\n    constructor(mapX, mapY, width, height, key, imageIndex = 0, boundaries, image, spacing = 0, margin = 0) {\n        super(CONST.DRAW_TYPE.IMAGE, mapX, mapY);\n        this.#key = key;\n        this.#emitter = new EventTarget();\n        this.#animations = new Map();\n        this.image = image;\n        this.#imageIndex = imageIndex;\n        this.#spacing = spacing;\n        this.#margin = margin;\n        this.#w = width;\n        this.#h = height;\n        this.#vertices = boundaries && !boundaries.r ? this._convertVerticesArray(boundaries) : boundaries && boundaries.r ? this._calculateConusBoundaries(boundaries.r) : this._calculateRectVertices(width, height);\n        this.#circleBoundaries = boundaries && typeof boundaries.r !== \"undefined\" ? boundaries : null;\n    }\n\n    /**\n     * @type {number}\n     */\n    get width() {\n        return this.#w;\n    }\n\n    /**\n     * @type {number}\n     */\n    get height() {\n        return this.#h;\n    }\n\n    set width(w) {\n        this.#w = w;\n    }\n\n    set height(h) {\n        this.#h = h;\n    }\n\n    /**\n     * A key should match an image loaded through AssetsManager\n     * @type {string}\n     */\n    get key() {\n        return this.#key;\n    }\n\n    /**\n     * @type {ImageBitmap}\n     */\n    get image() {\n        return this.#image;\n    }\n\n    set image(value) {\n        if (this.#textureStorage) {\n            this.#textureStorage._isTextureRecalculated = true;\n        }\n\n        this.#image = value;\n    }\n\n    /**\n     * Current image index\n     * @type {number}\n     */\n    get imageIndex() {\n        return this.#imageIndex;\n    }\n\n    set imageIndex(value) {\n        this.#imageIndex = value;\n    }\n\n    /**\n     * Image spacing (for tilesets.spacing > 0)\n     * @type {number}\n     */\n    get spacing() {\n        return this.#spacing;\n    }\n\n    /**\n     * Image spacing (for tilesets.margin > 0)\n     * @type {number}\n     */\n    get margin() {\n        return this.#margin;\n    }\n\n    /**\n     * Determines if image is animated or not\n     * @type {boolean}\n     */\n    get hasAnimations() {\n        return this.#animations.size > 0;\n    }\n\n    /**\n     * @type {null | string}\n     */\n    get activeAnimation() {\n        return this.#activeAnimation;\n    }\n\n    /**\n     * @deprecated - use .vertices instead \n     * @type {Array<Array<number>>}\n     */\n    get boundaries() {\n        return this.#vertices;\n    }\n\n    get vertices() {\n        return this.#vertices;\n    }\n\n    get circleBoundaries() {\n        return this.#circleBoundaries;\n    }\n\n    /**\n     * @ignore\n     */\n    _processActiveAnimations() {\n        const activeAnimation = this.#activeAnimation;\n        if (activeAnimation) {\n            const animationEvent = this.#animations.get(activeAnimation);\n            animationEvent.iterateAnimationIndex();\n            this.#imageIndex = animationEvent.currentSprite;\n        }\n    }\n    /**\n     * @ignore\n     */\n    get _textureStorage() {\n        return this.#textureStorage;\n    }\n\n    /**\n     * @ignore\n     */\n    set _textureStorage(texture) {\n        this.#textureStorage = texture;\n    }\n\n    /**\n     * Emit event\n     * @param {string} eventName \n     * @param  {...any} eventParams \n     */\n    emit(eventName, ...eventParams) {\n        const event = new Event(eventName);\n        event.data = [...eventParams];\n        this.#emitter.dispatchEvent(event);\n    }\n\n    /**\n     * Subscribe\n     * @param {string} eventName \n     * @param {*} listener \n     * @param {*} options \n     */\n    addEventListener(eventName, listener, options) {\n        this.#emitter.addEventListener(eventName, listener, options);\n    }\n\n    /**\n     * Unsubscribe\n     * @param {string} eventName \n     * @param {*} listener \n     * @param {*} options \n     */\n    removeEventListener(eventName, listener, options) {\n        this.#emitter.removeEventListener(eventName, listener, options);\n    }\n\n    /**\n     * Adds image animations\n     * @param { string } eventName -animation name\n     * @param { Array<number> | Array<{duration:number, id:number}> } animationSpriteIndexes - animation image indexes\n     * @param { boolean } [isRepeated = false] - animation is cycled or not, cycled animation could be stopped only with stopRepeatedAnimation();\n     */\n    addAnimation (eventName, animationSpriteIndexes, isRepeated) {\n        if (!this.#checkAnimationParams(animationSpriteIndexes)) {\n            Exception(ERROR_CODES.UNEXPECTED_INPUT_PARAMS, \" animationSpriteIndexes should be Array of indexes, or Array of objects {duration:number, id:number}\");\n        }\n        const animationEvent = new AnimationEvent(eventName, animationSpriteIndexes, isRepeated);\n        this.#animations.set(eventName, animationEvent);\n        this.addEventListener(eventName, this.#activateAnimation);\n    }\n\n    #checkAnimationParams (animationSpriteIndexes) {\n        let isCorrect = true;\n        animationSpriteIndexes.forEach(element => {\n            if (typeof element !== \"number\") {\n                if (typeof element.duration !== \"number\" || typeof element.id !== \"number\") {\n                    isCorrect = false;\n                }\n            }     \n        });\n        return isCorrect;\n    }\n    #activateAnimation = (event) => {\n        const animationName = event.type,\n            animationEvent = this.#animations.get(animationName);\n        // only one active animation can exist at a time\n        if (this.#activeAnimation && this.#activeAnimation !== animationName) {\n            this.stopRepeatedAnimation(this.#activeAnimation);\n        }\n        animationEvent.activateAnimation();\n        this.#activeAnimation = animationName;\n        this.#imageIndex = animationEvent.currentSprite;\n    }; \n\n    /**\n     *\n     * @param {string=} eventName - animation name, if not provided - stop current active animation event\n     */\n    stopRepeatedAnimation (eventName) {\n        this.#animations.get(eventName).deactivateAnimation();\n        this.#activeAnimation = null;\n    }\n\n    /**\n     * Removes animations\n     */\n    removeAllAnimations() {\n        for (let [eventName, animationEvent] of this.#animations.entries()) {\n            this.removeEventListener(eventName, animationEvent.activateAnimation);\n            animationEvent.deactivateAnimation();\n        }\n        this.#animations.clear();\n        this.#animations = undefined;\n    }\n\n    destroy() {\n        this.removeAllAnimations();\n        super.destroy();\n    }\n}","import { CONST } from \"../../constants.js\";\nimport { DrawShapeObject } from \"./DrawShapeObject.js\";\n\n/**\n * Line object to draw.\n * @extends DrawShapeObject\n * @see {@link DrawObjectFactory} should be created with factory method\n */\nexport class DrawLineObject extends DrawShapeObject {\n    /**\n     * @type {Array<Array<number>>}\n     */\n    #vertices;\n\n    /**\n     * @hideconstructor\n     */\n    constructor(vertices, bgColor) {\n        super(CONST.DRAW_TYPE.LINE, vertices[0][0], vertices[0][1], bgColor);\n        this.#vertices = vertices;\n    }\n\n    /**\n     * @type {Array<Array<number>>}\n     */\n    get vertices () {\n        return this.#vertices;\n    }\n\n    set vertices(value) {\n        this.#vertices = value;\n    }\n}","import { CONST } from \"../../constants.js\";\nimport { DrawShapeObject } from \"./DrawShapeObject.js\";\n\n/**\n * @extends DrawShapeObject\n * @see {@link DrawObjectFactory} should be created with factory method\n */\nexport class DrawPolygonObject extends DrawShapeObject {\n    /**\n     * @type {Array<Array<number>>}\n     */\n    #vertices;\n\n    /**\n     * @hideconstructor\n     */\n    constructor(vertices, bgColor) {\n        super(CONST.DRAW_TYPE.POLYGON, vertices[0].x, vertices[0].y, bgColor);\n        this.#vertices = this._convertVerticesArray(vertices);\n    }\n\n    /**\n     * @type {Array<Array<number>>}\n     */\n    get vertices () {\n        return this.#vertices;\n    }\n\n    set vertices(value) {\n        this.#vertices = value;\n    }\n}","import { CONST } from \"../../constants.js\";\nimport { DrawShapeObject } from \"./DrawShapeObject.js\";\n\n/**\n * @extends DrawShapeObject\n * @see {@link DrawObjectFactory} should be created with factory method\n */\nexport class DrawRectObject extends DrawShapeObject {\n    /**\n     * @type {number}\n     */\n    #w;\n    /**\n     * @type {number}\n     */\n    #h;\n    /**\n     * @type {Array<Array<number>>}\n     */\n    #vertices;\n\n    /**\n     * @hideconstructor\n     */\n    constructor(x, y, w, h, bgColor) {\n        super(CONST.DRAW_TYPE.RECTANGLE, x, y, bgColor);\n        this.#w = w;\n        this.#h = h;\n        this.#vertices = this._calculateRectVertices(w,h);\n    }\n\n    /**\n     * @type {Array<Array<number>>}\n     */\n    get vertices () {\n        return this.#vertices;\n    }\n    /**\n     * @type {number}\n     */\n    get width() {\n        return this.#w;\n    }\n\n    /**\n     * @type {number}\n     */\n    get height() {\n        return this.#h;\n    }\n\n    set width(w) {\n        this.#w = w;\n    }\n\n    set height(h) {\n        this.#h = h;\n    }\n}","import { CONST } from \"../../constants.js\";\nimport { utils } from \"../../index.js\";\n\n/**\n * A base draw object.\n */\nexport class DrawShapeObject {\n    #x;\n    #y;\n    #bg;\n    /**\n     * @type {string}\n     * @enum {CONST.DRAW_TYPE}\n     */\n    #type;\n    /**\n     * Is used for blending pixel arithmetic\n     * https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/blendFunc.\n     * @type {Array<number>}\n     */\n    #blendFunc;\n    \n    /**\n     * @type {number}\n     */\n    #sortIndex = 0;\n    /**\n     * @type {number}\n     */\n    #rotation = 0;\n    /**\n     * @type {number}\n     */\n    #id = utils.generateUniqId();\n    /**\n     * @type {boolean}\n     */\n    #isRemoved = false;\n    /**\n     * @type {undefined | number | null}\n     */\n    #attachedMaskId;\n    /**\n     * @type {boolean}\n     */\n    #isMask;\n    /**\n     * @type {boolean}\n     */\n    #isOffsetTurnedOff = false;\n\n    /**\n     * @type {boolean}\n     */\n    #isChanged = false;\n    /**\n     * @hideconstructor\n     */\n    constructor(type, mapX, mapY, bgColor) {\n        this.#x = mapX;\n        this.#y = mapY;\n        this.#bg = bgColor;\n        this.#type = type;\n    }\n\n    /**\n     * Background color as rgba(r,g,b,a).\n     * @type {string}\n     */\n    get bgColor() {\n        return this.#bg;\n    }\n\n    set bgColor(value) {\n        this.#bg = value;\n    }\n\n    /**\n     * @type {string}\n     * @enum {CONST.DRAW_TYPE}\n     */\n    get type() {\n        return this.#type;\n    }\n\n    /**\n     * @type {number}\n     */\n    get x() {\n        return this.#x;\n    }\n\n    /**\n     * @type {number}\n     */\n    get y () {\n        return this.#y;\n    }\n\n    set x(posX) {\n        this.#x = posX;\n    }\n\n    set y(posY) {\n        this.#y = posY;\n    }\n\n    /**\n     * @type {number}\n     */\n    get sortIndex () {\n        return this.#sortIndex;\n    }\n\n    set sortIndex(value) {\n        this.#sortIndex = value;\n    }\n\n    get blendFunc () {\n        return this.#blendFunc;\n    }\n\n    set blendFunc(value) {\n        this.#blendFunc = value;\n    }\n\n    /**\n     * @type {number}\n     */\n    get rotation() {\n        return this.#rotation;\n    }\n\n    set rotation(value) {\n        this.#rotation = value;\n    }\n\n    /**\n     * @type {number}\n     */\n    get id() {\n        return this.#id;\n    }\n\n    /**\n     * @type {boolean}\n     */\n    get isRemoved() {\n        return this.#isRemoved;\n    }\n    /**\n     * Destroy object on next render iteration.\n     */\n    destroy() {\n        this.#isRemoved = true;\n    }\n\n    get isMaskAttached() {\n        return !!this.#attachedMaskId;\n    }\n\n    /**\n     * @ignore\n     */\n    get _maskId() {\n        return this.#attachedMaskId;\n    }\n\n    /**\n     * \n     * @param {DrawShapeObject} mask \n     */\n    setMask(mask) {\n        mask._isMask = true;\n        this.#attachedMaskId = mask.id;\n    }\n\n    removeMask() {\n        this.#attachedMaskId = null;\n    }\n\n    set _isMask(isSet) {\n        this.#isMask = isSet;\n    }\n\n    get _isMask() {\n        return this.#isMask;\n    }\n\n    get isOffsetTurnedOff() {\n        return this.#isOffsetTurnedOff;\n    }\n\n    /**\n     * turn off offset for specific draw object\n     * gameStageData.centerCameraPosition() will take no effect on such object\n     * Can be used for something that should be always on screen: control buttons, overlay masks etc.\n     */\n    turnOffOffset() {\n        this.#isOffsetTurnedOff = true;\n    }\n    /**\n     * @ignore\n     * @param {number} width \n     * @param {number} height \n     * @returns {Array<Array<number>>}\n     */\n    _calculateRectVertices = (width, height) => {\n        const halfW = width/2,\n            halfH = height/2;\n        return [[-halfW, -halfH], [halfW, -halfH], [halfW, halfH], [-halfW, halfH]];\n    };\n\n    /**\n     * @param {number} radius \n     * @param {number} [angle = 2 * Math.PI]\n     * @param {number} [step = Math.PI/12] \n     * @returns {Array<number>}\n     * @ignore\n     */\n    _interpolateConus(radius, angle = 2*Math.PI, step = Math.PI/14) {\n        let conusPolygonCoords = [0, 0];\n\n        for (let r = 0; r <= angle; r += step) {\n            let x2 = Math.cos(r) * radius,\n                y2 = Math.sin(r) * radius;\n\n            conusPolygonCoords.push(x2, y2);\n        }\n\n        return conusPolygonCoords;\n    }\n\n    /**\n     * @param {number} radius \n     * @param {number} [angle = 2 * Math.PI]\n     * @param {number} [step = Math.PI/12] \n     * @returns {Array<Array<number>>}\n     * @ignore\n     */\n    _calculateConusBoundaries(radius, angle = 2*Math.PI, step = Math.PI/14) {\n        let conusPolygonCoords = [];\n\n        for (let r = 0; r <= angle; r += step) {\n            let x2 = Math.cos(r) * radius,\n                y2 = Math.sin(r) * radius;\n\n            conusPolygonCoords.push([x2, y2]);\n        }\n\n        return conusPolygonCoords;\n    }\n\n\n    /**\n     * @param {Array<Array<number>> | Array<{x:number, y:number}>} boundaries\n     * @returns {Array<Array<number>>}\n     * @ignore\n     */\n    _convertVerticesArray(boundaries) {\n        if (typeof boundaries[0].x !== \"undefined\" && typeof boundaries[0].y !== \"undefined\") {\n            return utils.verticesArrayToArrayNumbers(boundaries);\n        } else {\n            return boundaries;\n        }\n    }\n}","import { DrawShapeObject } from \"./DrawShapeObject.js\";\nimport { Rectangle } from \"./Primitives.js\";\nimport { CONST, ERROR_CODES } from \"../../constants.js\";\nimport { Exception } from \"../Exception.js\";\nimport { ImageTempStorage } from \"../Temp/ImageTempStorage.js\";\n\n/**\n * @extends DrawShapeObject\n * @see {@link DrawObjectFactory} should be created with factory method\n */\nexport class DrawTextObject extends DrawShapeObject {\n    #font;\n    #textAlign;\n    #textBaseline;\n    #fillStyle;\n    #strokeStyle;\n    #text;\n    #textMetrics;\n    /**\n     * @type {HTMLCanvasElement}\n     */\n    #textureCanvas = document.createElement(\"canvas\");\n\n    /**\n     * @type {ImageTempStorage}\n     */\n    #textureStorage;\n\n    /**\n     * @hideconstructor\n     */\n    constructor(mapX, mapY, text, font, fillStyle) {\n        super(CONST.DRAW_TYPE.TEXT, mapX, mapY);\n        this.#text = text;\n        this.#font = font;\n        this.#fillStyle = fillStyle;\n        this.#textMetrics;\n        this.#calculateCanvasTextureAndMeasurements();\n    }\n\n    /**\n     * Rectangle text box.\n     * @type {Rectangle}\n     */\n    get boundariesBox() {\n        const width = this.textMetrics ? Math.floor(this.textMetrics.width) : 300,\n            height = this.textMetrics ? Math.floor(this.textMetrics.fontBoundingBoxAscent + this.textMetrics.fontBoundingBoxDescent): 30;\n        return new Rectangle(this.x, this.y - height, width, height);\n    }\n\n    get vertices() {\n        const bb = this.boundariesBox;\n        return this._calculateRectVertices(bb.width, bb.height);\n    }\n\n    /**\n     * @type {string}\n     */\n    get text() {\n        return this.#text;\n    }\n\n    set text(value) {\n        if (value !== this.#text) {\n            this.#text = value;\n            this.#calculateCanvasTextureAndMeasurements();\n        }\n    }\n\n    /**\n     * @type {string}\n     */\n    get font() {\n        return this.#font;\n    }\n\n    set font(value) {\n        if (value !== this.#font) {\n            this.#font = value;\n            this.#calculateCanvasTextureAndMeasurements();\n        }\n    }\n\n    /**\n     * @type {string}\n     */\n    get textAlign() {\n        return this.#textAlign;\n    }\n\n    set textAlign(value) {\n        if (value !== this.#textAlign) {\n            this.#textAlign = value;\n            this.#calculateCanvasTextureAndMeasurements();\n        }\n    }\n\n    /**\n     * @type {string}\n     */\n    get textBaseline() {\n        return this.#textBaseline;\n    }\n\n    set textBaseline(value) {\n        if (value !== this.#textBaseline) {\n            this.#textBaseline = value;\n            this.#calculateCanvasTextureAndMeasurements();\n        }\n    }\n\n    /**\n     * font color\n     * @type {string}\n     */\n    get fillStyle() {\n        return this.#fillStyle;\n    }\n\n    /**\n     * font color\n     */\n    set fillStyle(value) {\n        if (value !== this.#fillStyle) {\n            this.#fillStyle = value;\n            this.#calculateCanvasTextureAndMeasurements();\n        }\n    }\n\n    /**\n     * font stroke color\n     * @type {string}\n     */\n    get strokeStyle() {\n        return this.#strokeStyle;\n    }\n\n    /**\n     * font stroke color\n     */\n    set strokeStyle(value) {\n        if (value !== this.#strokeStyle) {\n            this.#strokeStyle = value;\n            this.#calculateCanvasTextureAndMeasurements();\n        }\n    }\n\n    /**\n     * @type {TextMetrics}\n     */\n    get textMetrics() {\n        return this.#textMetrics;\n    }\n\n    /**\n     * @ignore\n     */\n    set _textMetrics(value) {\n        this.#textMetrics = value;\n    }\n\n    /**\n     * @ignore\n     */\n    get _textureStorage() {\n        return this.#textureStorage;\n    }\n\n    /**\n     * @ignore\n     */\n    set _textureStorage(texture) {\n        this.#textureStorage = texture;\n    }\n\n    /**\n     * @ignore\n     */\n    get _textureCanvas() {\n        return this.#textureCanvas;\n    }\n\n    /**\n     * \n     * @returns {void}\n     */\n    #calculateCanvasTextureAndMeasurements() {\n        const ctx = this.#textureCanvas.getContext(\"2d\", { willReadFrequently: true }); // cpu counting instead gpu\n        if (ctx) {\n            //ctx.clearRect(0, 0, this.#textureCanvas.width, this.#textureCanvas.height);\n            ctx.font = this.font;\n            this._textMetrics = ctx.measureText(this.text);\n            const boxWidth = this.boundariesBox.width, \n                boxHeight = this.boundariesBox.height;\n            \n            ctx.canvas.width = boxWidth;\n            ctx.canvas.height = boxHeight;\n            // after canvas resize, have to cleanup and set the font again\n            ctx.clearRect(0, 0, boxWidth, boxHeight);\n            ctx.font = this.font;\n            ctx.textBaseline = \"bottom\";// bottom\n            if (this.fillStyle) {\n                ctx.fillStyle = this.fillStyle;\n                ctx.fillText(this.text, 0, boxHeight);\n            } \n            if (this.strokeStyle) {\n                ctx.strokeStyle = this.strokeStyle;\n                ctx.strokeText(this.text, 0, boxHeight);\n            }\n            \n            if (this.#textureStorage) {\n                this.#textureStorage._isTextureRecalculated = true;\n            }\n\n            // debug canvas\n            // this.#textureCanvas.style.position = \"absolute\";\n            // document.body.appendChild(this.#textureCanvas);\n            \n        } else {\n            Exception(ERROR_CODES.UNHANDLED_EXCEPTION, \"can't getContext('2d')\");\n        }\n    }\n}","import { AnimationEvent } from \"../AnimationEvent.js\";\nimport { DrawShapeObject } from \"./DrawShapeObject.js\";\nimport { ImageTempStorage } from \"../Temp/ImageTempStorage.js\";\nimport { TiledLayerTempStorage } from \"../Temp/TiledLayerTempStorage.js\";\n/**\n * A render object represents a layer from tiled editor\n * @see {@link DrawObjectFactory} should be created with factory method\n */\nexport class DrawTiledLayer {\n    #layerKey;\n    #tileMapKey;\n    #tilemap;\n    #tilesets;\n    /**\n     * @type {string}\n     */\n    #DELIMITER = \"-#-\";\n    #tilesetImages;\n    /**\n     * @type {Array<ImageTempStorage>}\n     */\n    #textureStorages;\n    #layerData;\n    #setBoundaries;\n    #drawBoundaries;\n    #attachedMaskId;\n    /**\n     * @type {number}\n     */\n    #sortIndex = 0;\n    /**\n     * @type {Map<string, AnimationEvent>}\n     */\n    #animations = new Map();\n    #isOffsetTurnedOff;\n\n    /**\n     * @hideconstructor\n     */\n    constructor(layerKey, tileMapKey, tilemap, tilesets, tilesetImages, layerData, setBoundaries = false, shapeMask) {\n        this.#layerKey = layerKey;\n        this.#tileMapKey = tileMapKey;\n        this.#tilemap = tilemap;\n        this.#tilesets = tilesets;\n        this.#textureStorages = [];\n        this.#tilesetImages = tilesetImages;\n        this.#layerData = layerData;\n        \n        this.#setBoundaries = setBoundaries;\n        this.#drawBoundaries = setBoundaries ? setBoundaries : false;\n        if (shapeMask) {\n            this.setMask(shapeMask);\n        }\n        this.#processData(tilesets, layerData);\n    }\n\n    /**\n     * A layer name.\n     * @type {string}\n     */\n    get layerKey() {\n        return this.#layerKey;\n    }\n\n    /**\n     * A tilemap layer key, should match key from the tilemap.\n     * @type {string}\n     */\n    get tileMapKey() {\n        return this.#tileMapKey;\n    }\n\n    get tilemap() {\n        return this.#tilemap;\n    }\n    \n    get tilesets() {\n        return this.#tilesets;\n    }\n\n    get tilesetImages() {\n        return this.#tilesetImages;\n    }\n\n    get layerData() {\n        return this.#layerData;\n    }\n    /**\n     * Should the layer borders used as boundaries, or not\n     * Can be set in GameStage.addRenderLayer() method.\n     * @type {boolean}\n     */\n    get setBoundaries() {\n        return this.#setBoundaries;\n    }\n\n    /**\n     * Should draw a boundaries helper, or not\n     * Can be set in SystemSettings.\n     * @type {boolean}\n     */\n    get drawBoundaries() {\n        return this.#drawBoundaries;\n    }\n\n    set drawBoundaries(value) {\n        this.#drawBoundaries = value;\n    }\n\n    /**\n     * @ignore\n     */\n    get _maskId() {\n        return this.#attachedMaskId;\n    }\n    /**\n     * \n     * @param {DrawShapeObject} mask \n     */\n    setMask(mask) {\n        mask._isMask = true;\n        this.#attachedMaskId = mask.id;\n    }\n\n    removeMask() {\n        this.#attachedMaskId = null;\n    }\n\n    /**\n     * @type {number}\n     */\n    get sortIndex () {\n        return this.#sortIndex;\n    }\n\n    set sortIndex(value) {\n        this.#sortIndex = value;\n    }\n\n    get isOffsetTurnedOff() {\n        return this.#isOffsetTurnedOff;\n    }\n    turnOffOffset() {\n        this.#isOffsetTurnedOff = true;\n    }\n\n    /**\n     * Determines if image is animated or not\n     * @type {boolean}\n     */\n    get hasAnimations() {\n        return this.#animations.size > 0;\n    }\n\n    /**\n     * @ignore\n     */\n    get _textureStorages() {\n        return this.#textureStorages;\n    }\n\n    /**\n     * @ignore\n     */\n    _setTextureStorage(index, value) {\n        this.#textureStorages[index] = value;\n    }\n\n    /**\n     * Tilesets has a property tiles, which could contain tile animations\n     * or object boundaries, this is workaround for split this and add\n     * additional properties for use in draw phase:\n     * _hasAnimations\n     * _animations - Map<id:activeSprite>\n     * _hasBoundaries\n     * _boundaries - Map<id:objectgroup>\n     * @param {*} tilesets\n     */\n    #processData(tilesets, layerData) {\n        // границы для слоя создаются одни, даже если они высчитываются с разных тайлсетов\n        // поэтому суммируем и находим максимальное их количество\n        let ellipseBLen = 0,\n            pointBLen = 0,\n            polygonBLen = 0;\n        tilesets.forEach((tileset, idx) => {\n            const tiles = tileset.data.tiles,\n                name = tileset.data.name,\n                firstgid = tileset.firstgid,\n                nextTileset = this.tilesets[idx + 1],\n                nextgid = nextTileset ? nextTileset.firstgid : 1_000_000_000;\n                \n            if (tiles) {\n                for (let tile of tiles) {\n                    const animation = tile.animation,\n                        objectgroup = tile.objectgroup,\n                        id = tile.id;\n                    if (animation) {\n                        const eventName = name + this.#DELIMITER + id, \n                            animationIndexes = this.#fixAnimationsItems(animation),\n                            animationEvent = new AnimationEvent(eventName, animationIndexes, true);\n\n                        this.#animations.set(eventName, animationEvent);\n                        // add additional properties\n                        if (!tileset.data._hasAnimations) {\n                            tileset.data._hasAnimations = true;\n                            tileset.data._animations = new Map();\n                            //\n                            tileset.data._animations.set(id, animationIndexes[0][0]);\n                        }\n                        this.#activateAnimation(animationEvent);\n                    }\n                    if (objectgroup && this.#setBoundaries) {\n                        if (tileset.data._hasBoundaries) {\n                            tileset.data._boundaries.set(id, objectgroup);\n                        } else {\n                            // add additional properties\n                            tileset.data._hasBoundaries = true;\n                            tileset.data._boundaries = new Map();\n                            tileset.data._boundaries.set(id, objectgroup);\n                        }\n                        objectgroup.objects.forEach((object) => {\n                            if (object.ellipse) {\n                                const cellsWithB = layerData.data.filter((tile) => tile === id + firstgid).length;\n                                ellipseBLen += (4 * cellsWithB); // (x, y, wRad, hRad) * layer items\n                            } else if (object.point) {\n                                const cellsWithB = layerData.data.filter((tile) => tile === id + firstgid).length;\n                                pointBLen += (2 * cellsWithB); // (x, y) * layer items\n                            } else if (object.polygon) {\n                                const cellsWithB = layerData.data.filter((tile) => tile === id + firstgid).length;\n                                polygonBLen += (object.polygon.length * 2 * cellsWithB); // (each point * 2(x,y) ) * layer items\n                            } else { // rect object\n                                const cellsWithB = layerData.data.filter((tile) => tile === id + firstgid).length;\n                                polygonBLen += (16 * cellsWithB); // (4 faces * 4 cords for each one) * layer items\n                            }\n                        });\n                    }\n                }\n            }\n            \n            const nonEmptyCells = layerData.data.filter((tile) => ((tile >= firstgid) && (tile < nextgid))).length,\n                cells = layerData.data.length;\n\n            if (this.#setBoundaries) {\n                polygonBLen+=(nonEmptyCells * 16); // potential boundaries also nonEmptyCells\n            }\n            // создаем вспомогательный объект для расчетов и хранения данных отрисовки\n            // help class for draw calculations\n            tileset._temp = new TiledLayerTempStorage(cells, nonEmptyCells);\n        });\n        \n        // save boundaries max possible lengths\n        layerData.ellipseBoundariesLen = ellipseBLen;\n        layerData.pointBoundariesLen = pointBLen;\n        layerData.polygonBoundariesLen = polygonBLen;\n    }\n\n    /**\n     * \n     * @param {Array<{duration:number, tileid:number}>} animation \n     * @returns {Array<{duration:number, id:number}>}\n     */\n    #fixAnimationsItems(animation) {\n        return animation.map((animation_item) => ({duration:animation_item.duration, id: animation_item.tileid}));\n    }\n    /**\n     * @ignore\n     */\n    _processActiveAnimations() {\n        for (let animationEvent of this.#animations.values()) {\n            if (animationEvent.isActive) {\n                animationEvent.iterateAnimationIndex();\n                this.#switchCurrentActiveSprite(animationEvent);\n            }\n        }\n    }\n\n    #activateAnimation = (animationEvent) => {\n        animationEvent.activateAnimation();\n        this.#switchCurrentActiveSprite(animationEvent);\n    }; \n\n    #switchCurrentActiveSprite = (animationEvent) => {\n        const [tilesetKey, animationId] = animationEvent.name.split(this.#DELIMITER),\n            tilesetIndex = this.#tilesets.findIndex(tileset => tileset.data.name === tilesetKey),\n            tileset = this.#tilesets[tilesetIndex];\n            \n        tileset.data._animations.set(parseInt(animationId), animationEvent.currentSprite);\n    };\n\n    /**\n     *\n     * @param {string} eventName - animation name\n     */\n    stopRepeatedAnimation (eventName) {\n        this.#animations.get(eventName).deactivateAnimation();\n    }\n\n    /**\n     * Removes animations\n     */\n    removeAllAnimations() {\n        for (let [eventName, animationEvent] of this.#animations.entries()) {\n            this.removeEventListener(eventName, animationEvent.activateAnimation);\n            animationEvent.deactivateAnimation();\n        }\n        this.#animations.clear();\n        this.#animations = undefined;\n    }\n\n    destroy() {\n        this.removeAllAnimations();\n        super.destroy();\n    }\n}\n","class Vertex {\n    #x;\n    #y;\n    constructor(x, y) {\n        this.#x = x;\n        this.#y = y;\n    }\n\n    get x() {\n        return this.#x;\n    }\n\n    get y() {\n        return this.#y;\n    }\n}\n\nclass Rectangle {\n    #x;\n    #y;\n    #w;\n    #h;\n    constructor(x, y, w, h) {\n        this.#x = x;\n        this.#y = y;\n        this.#w = w;\n        this.#h = h; \n    }\n    /**\n     * @type {number}\n     */\n    get x() {\n        return this.#x;\n    }\n    /**\n     * @type {number}\n     */\n    get y() {\n        return this.#y;\n    }\n    /**\n     * @type {number}\n     */\n    get width() {\n        return this.#w;\n    }\n    /**\n     * @type {number}\n     */\n    get height() {\n        return this.#h;\n    }\n}\n\nclass Vector {\n    #x;\n    #y;\n    constructor(x1, y1, x2, y2) {\n        this.#x = x2 - x1;\n        this.#y = y2 - y1;\n    }\n\n    get x() {\n        return this.#x;\n    }\n\n    get y() {\n        return this.#y;\n    }\n\n    get length() {\n        return Math.sqrt(Math.pow(this.#x, 2) + Math.pow(this.#y, 2));\n    }\n\n    get tetaAngle() {\n        return Math.atan2(this.#y, this.#x);\n    }\n}\n\nexport { Vertex, Rectangle, Vector };","export class AnimationEvent {\n    #eventName;\n    /**\n     * @type {number}\n     */\n    #defaultDurationTime = 100;\n    /**\n     * Array [sprite index, duration]\n     * @type { Array<Array<number, number>> }\n     */\n    #animationSpriteIndexes;\n    /**\n     * \n     * @type {number}\n     */\n    #currentAnimationItemIndex;\n    /**\n     * @type {boolean}\n     */\n    #isActive;\n    /**\n     * @type {boolean}\n     */\n    #isRepeated;\n    #lastAnimationTimeStamp;\n    \n    constructor(eventName, animationSpriteIndexes, isRepeated = false, currentSpriteIndex, isActive = false) {\n        this.#eventName = eventName;\n        this.#animationSpriteIndexes = this.#convertToArray(animationSpriteIndexes);\n        this.#currentAnimationItemIndex = currentSpriteIndex ? currentSpriteIndex : 0;\n        this.#isActive = isActive;\n        this.#isRepeated = isRepeated;\n    }\n\n    get name() {\n        return this.#eventName;\n    }\n\n    get isActive() {\n        return this.#isActive;\n    }\n\n    get currentSprite() {\n        return this.#animationSpriteIndexes[this.#currentAnimationItemIndex][0];\n    }\n\n    get _isLastSprite() {\n        return (this.#animationSpriteIndexes.length - 1) === this.#currentAnimationItemIndex;\n    }\n\n    iterateAnimationIndex() {\n        const currentIndex = this.#currentAnimationItemIndex,\n            currentDuration = this.#animationSpriteIndexes[currentIndex][1],\n            lastIterationTime = Date.now() - this.#lastAnimationTimeStamp;\n        // iterate or skip\n        if (currentDuration < lastIterationTime) {\n            if (!this._isLastSprite) {\n                this.#currentAnimationItemIndex++;\n            } else {\n                if (!this.#isRepeated) {\n                    this.deactivateAnimation();\n                } else {\n                    // take first element\n                    this.#currentAnimationItemIndex = 0;\n                    \n                }\n            }\n            // reset timestamp\n            this.#lastAnimationTimeStamp = Date.now();\n        }\n    }\n\n    activateAnimation = () => {\n        this.#isActive = true;\n        this.#currentAnimationItemIndex = 0;\n        this.#lastAnimationTimeStamp = Date.now();\n    };\n\n    deactivateAnimation = () => {\n        this.#isActive = false;\n    };\n\n    #convertToArray(animationSpriteIndexes) {\n        let animationArray = [];\n        animationSpriteIndexes.forEach(element => {\n            if (typeof element.id === \"number\" && typeof element.duration === \"number\") {\n                animationArray.push([element.id, element.duration]);\n            } else {\n                animationArray.push([element, this.#defaultDurationTime]);\n            }\n            \n        });\n        return animationArray;\n    }\n}","import { DrawRectObject } from \"./2d/DrawRectObject.js\";\nimport { DrawTextObject } from \"./2d/DrawTextObject.js\";\nimport { DrawConusObject } from \"./2d/DrawConusObject.js\";\nimport { DrawImageObject } from \"./2d/DrawImageObject.js\";\nimport { DrawLineObject } from \"./2d/DrawLineObject.js\";\nimport { DrawPolygonObject } from \"./2d/DrawPolygonObject.js\";\nimport { DrawCircleObject } from \"./2d/DrawCircleObject.js\";\nimport { DrawTiledLayer } from \"./2d/DrawTiledLayer.js\";\nimport { DrawShapeObject } from \"./2d/DrawShapeObject.js\";\nimport { GameStageData } from \"./GameStageData.js\";\nimport { Exception } from \"./Exception.js\";\nimport { ERROR_CODES } from \"../constants.js\";\n\n/**\n * Creates drawObjects instances.<br>\n * accessible via GameStage.draw <br>\n * Attach images for image objects and tilemaps <br>\n * Adds drawObjects to current GameStage.stageData\n * @see {@link GameStage} a part of GameStage\n */\nexport class DrawObjectFactory {\n    /**\n     * @type {AssetsManager}\n     */\n    #iLoader;\n    /**\n     * @type {GameStageData | null}\n     */\n    #currentPageData;\n    /**\n     * @hideconstructor \n     */\n    constructor(iLoader) {\n        this.#iLoader = iLoader;\n    }\n\n    /**\n     * @returns {GameStageData}\n     */\n    get stageData() {\n        return this.#currentPageData;\n    }\n\n    /**\n     * \n     * @param {*} renderObject \n     * @returns {Object}\n     */\n    #addObjectToPageData(renderObject) {\n        this.#currentPageData._renderObject = renderObject;\n        this.#currentPageData._sortRenderObjectsBySortIndex();\n        return renderObject;\n    }\n    /**\n     * @param {number} x \n     * @param {number} y \n     * @param {number} width \n     * @param {number} height \n     * @param {string} backgroundColor - rgba(r,g,b,a)\n     * @returns {DrawRectObject}\n     */\n    rect(x, y, width, height, backgroundColor) {\n        const renderObject = new DrawRectObject(x, y, width, height, backgroundColor);\n        this.#addObjectToPageData(renderObject);\n        return renderObject; \n    }\n\n    /**\n     * @param {number} x \n     * @param {number} y \n     * @param {string} text \n     * @param {string} font - size fontFamily\n     * @param {string} color - rgba(r,g,b,a)\n     * @returns {DrawTextObject}\n     */\n    text(x, y, text, font, color) {\n        const renderObject = new DrawTextObject(x, y, text, font, color);\n        this.#addObjectToPageData(renderObject);\n        return renderObject;\n    }\n\n    /**\n     * \n     * @param {number} radius \n     * @param {string} bgColor - rgba(r,g,b,a)\n     * @param {number=} angle\n     * @param {number=} [fade=0] (0 - 1)\n     * @returns {DrawConusObject}\n     */\n    conus(x, y, radius, bgColor, angle, fade = 0) {\n        const renderObject = new DrawConusObject(x, y, radius, bgColor, angle, fade);\n        this.#addObjectToPageData(renderObject);\n        return renderObject;\n    }\n\n    /**\n     * \n     * @param {number} radius \n     * @param {string} bgColor - rgba(r,g,b,a)\n     * @returns {DrawCircleObject}\n     */\n    circle(x, y, radius, bgColor) {\n        const renderObject = new DrawCircleObject(x, y, radius, bgColor);\n        this.#addObjectToPageData(renderObject);\n        return renderObject;\n    }\n\n    /**\n     * @param {number} x \n     * @param {number} y \n     * @param {number} width \n     * @param {number} height \n     * @param {string} key \n     * @param {number} [imageIndex = 0]\n     * @param {Array<{x:Number, y:Number}> | {r:number}=} boundaries - boundaries as polygon, or circle\n     * @param {number} [spacing = 0] - for tilesets.spacing > 0\n     * @param {number} [margin = 0] - for tilesets.margin > 0\n     * @returns {DrawImageObject}\n     */\n    image(x, y, width, height, key, imageIndex = 0, boundaries, spacing = 0, margin = 0) {\n        const image = this.#iLoader.getImage(key);\n\n        if (!image) {\n            Exception(ERROR_CODES.CANT_GET_THE_IMAGE, \"iLoader can't get the image with key: \" + key);\n        }\n            \n        const renderObject = new DrawImageObject(x, y, width, height, key, imageIndex, boundaries, image, spacing, margin);\n        \n        this.#addObjectToPageData(renderObject);\n        return renderObject;\n    }\n\n    /**\n     * @param {Array<number>} vertices \n     * @param {string} color - rgba(r,g,b,a)\n     * @returns {DrawLineObject}\n     */\n    line(vertices, color) {\n        const renderObject = new DrawLineObject(vertices, color);\n        this.#addObjectToPageData(renderObject);\n        return renderObject;\n    }\n\n    /**\n     * @param {Array<{x:number, y:number}>} vertices - should go in anticlockwise order\n     * @param {string} bgColor - rgba(r,g,b,a)\n     * @returns {DrawPolygonObject}\n     */\n    polygon(vertices, bgColor) {\n        const renderObject = new DrawPolygonObject(vertices, bgColor);\n        this.#addObjectToPageData(renderObject);\n        return renderObject;\n    }\n\n    /**\n     * \n     * @param {string} layerKey \n     * @param {string} tileMapKey \n     * @param {boolean=} setBoundaries \n     * @param {DrawShapeObject=} shapeMask \n     * @returns {DrawTiledLayer}\n     */\n    tiledLayer(layerKey, tileMapKey, setBoundaries, shapeMask) {\n        const tilemap = this.#iLoader.getTileMap(tileMapKey),\n            layerData = Object.assign({}, tilemap.layers.find((layer) => layer.name === layerKey)), // copy to avoid change same tilemap instance in different tiledLayers\n            tilesetIds = Array.from(new Set(layerData.data.filter((id) => id !== 0))).sort((a, b) => a - b),\n            tilesets = tilemap.tilesets.map((tileset) => Object.assign({}, tileset)).filter((tileset) => {\n                const tilesetStartI = tileset.firstgid,\n                    tilesetLastI = tilesetStartI + tileset.data.tilecount;\n                if (tilesetIds.find((id) => ((id >= tilesetStartI) && (id <= tilesetLastI)))) {\n                    return true;\n                } else {\n                    return false;\n                }\n            }), // copy to avoid change same tilemap instance in different tiledLayers\n            tilesetImages = tilesets.map((tileset) => this.#iLoader.getImage(tileset.data.name)),\n            renderObject = new DrawTiledLayer(layerKey, tileMapKey, tilemap, tilesets, tilesetImages, layerData, setBoundaries, shapeMask);\n        //console.log(layerKey);\n        //console.log(tilesetIds);\n        //console.log(tilesets);\n        this.#addObjectToPageData(renderObject);\n        return renderObject;\n    }\n\n    /**\n     * @ignore\n     * @param {string} methodKey \n     * @param {Function} createObjectInstance\n     */\n    _registerNewObjectMethod = (methodKey, createObjectInstance) => {\n        this[methodKey] = (...args) => this.#createObjectAndAddToPageData(createObjectInstance, ...args);\n    };\n\n    /**\n     * @ignore\n     * @param {Function} createInstance\n     * @param {Array<any>} args\n     */\n    #createObjectAndAddToPageData = (createInstance, ...args) => {\n        const instance = createInstance(...args);\n        this.#addObjectToPageData(instance);\n        return instance;\n    };\n\n    /**\n     * @ignore\n     * @param {GameStageData} pageData;\n     */\n    _attachPageData = (pageData) => {\n        this.#currentPageData = pageData;\n    };\n    /**\n     * @ignore\n     */\n    _detachPageData = () => {\n        this.#currentPageData = null;\n    };\n}","import { CONST, ERROR_CODES } from \"../../constants.js\";\nimport { Exception } from \"../Exception.js\";\n\nexport class SystemEvent extends Event {\n    #data;\n    constructor(eventValue, data){\n        super(eventValue);\n        if (!this.#isEventExist(eventValue)) {\n            Exception(ERROR_CODES.UNEXPECTED_EVENT_NAME, \", Please check if event is exist\");\n        }\n        this.#data = data;\n    }\n\n    #isEventExist(eventValue) {\n        return Object.values(CONST.EVENTS.WEBSOCKET.SERVER_CLIENT).find(eventVal => eventVal === eventValue);\n    }\n\n    get data () {\n        return this.#data;\n    }\n}","export function Exception (code, message) {\n    throw new Error(code + \": \" + message);\n}\n\nexport function Warning (code, message) {\n    console.warn(code, message);\n}","import { CONST, ERROR_CODES, WARNING_CODES } from \"../constants.js\";\nimport { GameStageData } from \"./GameStageData.js\";\nimport { Exception, Warning } from \"./Exception.js\";\nimport AssetsManager from \"../../modules/assetsm/dist/assetsm.min.js\";\nimport { DrawObjectFactory } from \"./DrawObjectFactory.js\";\nimport { DrawCircleObject } from \"./2d/DrawCircleObject.js\";\nimport { DrawConusObject } from \"./2d/DrawConusObject.js\";\nimport { DrawImageObject } from \"./2d/DrawImageObject.js\";\nimport { DrawLineObject } from \"./2d/DrawLineObject.js\";\nimport { DrawPolygonObject } from \"./2d/DrawPolygonObject.js\";\nimport { DrawRectObject } from \"./2d/DrawRectObject.js\";\nimport { DrawTextObject } from \"./2d/DrawTextObject.js\";\nimport { ISystem } from \"./ISystem.js\";\nimport { ISystemAudio } from \"./ISystemAudio.js\";\nimport { SystemSettings } from \"../configs.js\";\nimport { isPointLineIntersect, isEllipseCircleIntersect, isPointCircleIntersect, isEllipsePolygonIntersect, isPolygonLineIntersect, isPointPolygonIntersect, angle_2points, isCircleLineIntersect } from \"../utils.js\";\nimport { Vector } from \"./2d/Primitives.js\";\n\n/**\n * Represents the stage of the game,<br>\n * Contains pages logic.<br>\n * Instances should be created and registered with System.registerStage() factory method\n * \n * @see {@link System} instances of this class holds by the System class\n * @hideconstructor\n */\nexport class GameStage {\n    /**\n     * @type {string}\n     */\n    #name;\n    /**\n     * @type {boolean}\n     */\n    #isInitiated = false;\n    /**\n     * @type {boolean}\n     */\n    #isActive;\n    /**\n     * @typedef {ISystem}\n     */\n    #iSystemReference;\n    /**\n     * @type {GameStageData}\n     */\n    #stageData;\n\n    constructor() {\n        this.#isActive = false;\n        \n    }\n\n    /**\n     * Register stage\n     * @param {string} name\n     * @param {ISystem} system \n     * @ignore\n     */\n    _register(name, system) {\n        this.#name = name;\n        this.#iSystemReference = system;\n        this.#stageData = new GameStageData(this.#iSystemReference.systemSettings.gameOptions);\n        this.#setWorldDimensions();\n        this.#setCanvasSize();\n        this.register();\n    }\n\n    /**\n     * Initialization stage\n     * @ignore\n     */\n    _init() {\n        this.init();\n        this.#isInitiated = true;\n    }\n\n    /**\n     * @tutorial stages_lifecycle\n     * Custom logic for register stage\n     */\n    register() {}\n    /**\n     * @tutorial stages_lifecycle\n     * Custom logic for init stage\n     */\n    init() {}\n    /**\n     * Custom logic for start stage\n     * @param {Object=} options\n     */\n    start(options) {}\n    /**\n     * @tutorial stages_lifecycle\n     * Custom logic for stop stage\n     */\n    stop() {}\n    /**\n     * Custom logic for resize stage\n     */\n    resize() {}\n\n    /**\n     * @tutorial assets_manager\n     * @type {AssetsManager}\n     */\n    get iLoader() {\n        return this.#iSystemReference.iLoader;\n    }\n\n    /**\n     * @type {DrawObjectFactory}\n     */\n    get draw() {\n        return this.#iSystemReference.drawObjectFactory;\n    }\n\n    /**\n     * Attach all canvas elements from the #views to container\n     * @param {HTMLElement} container\n     * @ignore\n     */\n    _attachCanvasToContainer(container) {\n        this.#attachElementToContainer(this.canvasHtmlElement, container);\n    }\n\n    /**\n     * Add render object to the stageData\n     * @param { DrawConusObject | DrawImageObject | \n     *          DrawLineObject | DrawPolygonObject | \n     *          DrawRectObject | DrawCircleObject | \n     *          DrawTextObject } renderObject \n     */\n    addRenderObject = (renderObject) => {\n        const data = this.stageData,\n            isDataAlreadyAdded = data.renderObjects.indexOf(renderObject) !== -1;\n        if (isDataAlreadyAdded) {\n            Warning(WARNING_CODES.NEW_BEHAVIOR_INTRODUCED, \"stage.draw methods add objects to pageData, no need to call addRenderObject\");\n        } else {\n            data._renderObject = renderObject;\n            data._sortRenderObjectsBySortIndex(); \n        }\n    };\n\n    /**\n     * Determines if this stage render is Active or not\n     * @type {boolean}\n     */\n    get isActive() {\n        return this.#isActive;\n    }\n\n    /**\n     * Determines if this stage is initialized or not\n     * @type {boolean}\n     */\n    get isInitiated() {\n        return this.#isInitiated;\n    }\n\n    /**\n     * Current stage name\n     * @type {string}\n     */\n    get name () {\n        return this.#name;\n    }\n\n    /**\n     * @type {GameStageData}\n     */\n    get stageData() {\n        return this.#stageData;\n    }\n\n    /**\n     * @type {SystemSettings}\n     */\n    get systemSettings() {\n        return this.#iSystemReference.systemSettings;\n    }\n\n    /**\n     * @type {ISystemAudio}\n     */\n    get audio() {\n        return this.#iSystemReference.audio;\n    }\n\n    /**\n     * @type {ISystem}\n     */\n    get iSystem() {\n        return this.#iSystemReference;\n    }\n\n    get canvasHtmlElement() {\n        return document.getElementsByTagName(\"canvas\")[0];\n    }\n\n    /**\n     * \n     * @param {string} eventName \n     * @param {*} listener \n     * @param {*=} options \n     */\n    addEventListener = (eventName, listener, options) => {\n        this.iSystem.addEventListener(eventName, listener, options);\n    };\n\n    /**\n     * \n     * @param {string} eventName \n     * @param {*} listener \n     * @param {*=} options \n     */\n    removeEventListener = (eventName, listener, options) => {\n        this.iSystem.removeEventListener(eventName, listener, options);\n    };\n\n    /**\n     * Start stage render\n     * @param {Object=} options \n     * @ignore\n     */\n    _start(options) {\n        this.start(options);\n        this.#isActive = true;\n        window.addEventListener(\"resize\", this._resize);\n        this._resize();\n    }\n\n    /**\n     * Stop stage render\n     * @ignore\n     */\n    _stop() {\n        this.#isActive = false;\n        window.removeEventListener(\"resize\", this._resize);\n        this.stop();\n    }\n\n    /**\n     * Resize event\n     * @ignore\n     */\n    _resize = () => {\n        this.#setCanvasSize();\n        this.resize();\n    };\n\n    /**\n     * \n     * @param {HTMLCanvasElement} htmlElement \n     * @param {HTMLElement} container \n     */\n    #attachElementToContainer(htmlElement, container) {\n        container.appendChild(htmlElement);\n    }\n\n    #setWorldDimensions() {\n        const width = this.systemSettings.worldSize ? this.systemSettings.worldSize.width : 0,\n            height = this.systemSettings.worldSize ? this.systemSettings.worldSize.height : 0;\n            \n        this.stageData._setWorldDimensions(width, height);\n    }\n\n    //////////////////////////////////////////////////////\n    //***************************************************/\n    //****************** Collisions ********************//\n    //**************************************************//\n    //////////////////////////////////////////////////////\n\n    /**\n     * \n     * @param {number} x \n     * @param {number} y \n     * @param {DrawImageObject} drawObject \n     * @returns {{x:number, y:number, p:number} | boolean}\n     */\n    isBoundariesCollision = (x, y, drawObject) => {\n        const drawObjectType = drawObject.type,\n            vertices = drawObject.vertices,\n            circleBoundaries = drawObject.circleBoundaries;\n        switch(drawObjectType) {\n        case CONST.DRAW_TYPE.TEXT:\n        case CONST.DRAW_TYPE.RECTANGLE:\n        case CONST.DRAW_TYPE.CONUS:\n        case CONST.DRAW_TYPE.IMAGE:\n            if (!circleBoundaries) {\n                return this.#isPolygonToBoundariesCollision(x, y, vertices, drawObject.rotation);\n            } else {\n                return this.#isCircleToBoundariesCollision(x, y, drawObject.circleBoundaries.r);\n            }\n        case CONST.DRAW_TYPE.CIRCLE:\n            Warning(CONST.WARNING_CODES.METHOD_NOT_IMPLEMENTED, \"isObjectCollision.circle check is not implemented yet!\");\n            break;\n        case CONST.DRAW_TYPE.LINE:\n            Warning(CONST.WARNING_CODES.METHOD_NOT_IMPLEMENTED, \"isObjectCollision.line check is not implemented yet, please use .rect instead line!\");\n            break;\n        default:\n            Warning(CONST.WARNING_CODES.UNKNOWN_DRAW_OBJECT, \"unknown object type!\");\n        }\n        return false;\n    };\n\n    /**\n     * \n     * @param {number} x \n     * @param {number} y \n     * @param {DrawImageObject} drawObject\n     * @param {Array<DrawImageObject>} objects - objects array to check\n     * @returns {{x:number, y:number, p:number} | boolean} - the closest collision\n     */\n    isObjectsCollision = (x, y, drawObject, objects) => {\n        const drawObjectType = drawObject.type,\n            drawObjectBoundaries = drawObject.vertices,\n            circleBoundaries = drawObject.circleBoundaries;\n        switch(drawObjectType) {\n        case CONST.DRAW_TYPE.TEXT:\n        case CONST.DRAW_TYPE.RECTANGLE:\n        case CONST.DRAW_TYPE.CONUS:\n        case CONST.DRAW_TYPE.IMAGE:\n            if (!circleBoundaries) {\n                return this.#isPolygonToObjectsCollision(x, y, drawObjectBoundaries, drawObject.rotation, objects);\n            } else {\n                return this.#isCircleToObjectsCollision(x, y, circleBoundaries, objects);\n            }\n        case CONST.DRAW_TYPE.CIRCLE:\n            Warning(CONST.WARNING_CODES.METHOD_NOT_IMPLEMENTED, \"isObjectCollision.circle check is not implemented yet!\");\n            break;\n        case CONST.DRAW_TYPE.LINE:\n            Warning(CONST.WARNING_CODES.METHOD_NOT_IMPLEMENTED, \"isObjectCollision.line check is not implemented yet, please use .rect instead line!\");\n            break;\n        default:\n            Warning(CONST.WARNING_CODES.UNKNOWN_DRAW_OBJECT, \"unknown object type!\");\n        }\n        return false;\n    };\n    #isPolygonToObjectsCollision(x, y, polygonVertices, polygonRotation, objects) {\n        const len = objects.length;\n\n        let collisions = [];\n        for (let i = 0; i < len; i++) {\n            const mapObject = objects[i],\n                drawMapObjectType = mapObject.type;\n\n            let coll;\n            \n            switch(drawMapObjectType) {\n            case CONST.DRAW_TYPE.TEXT:\n            case CONST.DRAW_TYPE.RECTANGLE:\n            case CONST.DRAW_TYPE.CONUS:\n            case CONST.DRAW_TYPE.IMAGE:\n                coll = this.#isPolygonToPolygonCollision(x, y, polygonVertices, polygonRotation, mapObject);\n                break;\n            case CONST.DRAW_TYPE.CIRCLE:\n                console.warn(\"isObjectCollision.circle check is not implemented yet!\");\n                break;\n            case CONST.DRAW_TYPE.LINE:\n                console.warn(\"isObjectCollision.line check is not implemented, please use rect instead\");\n                break;\n            default:\n                console.warn(\"unknown object type!\");\n            }\n            if (coll) {\n                collisions.push(coll);\n            }\n        }\n        if (collisions.length > 0) {\n            return this.#takeTheClosestCollision(collisions);\n        } else {\n            return null;\n        }\n    }\n\n    #isCircleToObjectsCollision(x, y, drawObjectBoundaries, objects) {\n        const radius = drawObjectBoundaries.r;\n\n        const len = objects.length;\n\n        let collisions = [];\n        for (let i = 0; i < len; i++) {\n            const mapObject = objects[i],\n                drawMapObjectType = mapObject.type,\n                circleBoundaries = mapObject.circleBoundaries;\n\n            let coll;\n            \n            switch(drawMapObjectType) {\n            case CONST.DRAW_TYPE.TEXT:\n            case CONST.DRAW_TYPE.RECTANGLE:\n            case CONST.DRAW_TYPE.CONUS:\n            case CONST.DRAW_TYPE.IMAGE:\n                if (!circleBoundaries) {\n                    coll = this.#isCircleToPolygonCollision(x, y, radius, mapObject);\n                } else {\n                    coll = this.#isCircleToCircleCollision(x, y, radius, mapObject.x, mapObject.y, circleBoundaries.r);\n                }\n                break;\n            case CONST.DRAW_TYPE.CIRCLE:\n                console.warn(\"isObjectCollision.circle check is not implemented yet!\");\n                break;\n            case CONST.DRAW_TYPE.LINE:\n                console.warn(\"isObjectCollision.line check is not implemented, please use rect instead\");\n                break;\n            default:\n                console.warn(\"unknown object type!\");\n            }\n            if (coll) {\n                collisions.push(coll);\n            }\n        }\n        if (collisions.length > 0) {\n            return this.#takeTheClosestCollision(collisions);\n        } else {\n            return null;\n        }\n    }\n \n    #takeTheClosestCollision(collisions) {\n        return collisions.sort((a,b) => a.p < b.p)[0];\n    }\n\n    #isCircleToPolygonCollision(x, y, radius, mapObject) {\n        const [mapOffsetX, mapOffsetY] = this.stageData.worldOffset,\n            xWithOffset = x - mapOffsetX,\n            yWithOffset = y - mapOffsetY,\n            mapObjXWithOffset = mapObject.x - mapOffsetX,\n            mapObjYWithOffset = mapObject.y - mapOffsetY,\n            mapObjVertices = mapObject.vertices, \n            mapObjRotation = mapObject.rotation,\n            len = mapObjVertices.length;\n        //console.log(\"map object check:\");\n        //console.log(mapObject);\n        for (let i = 0; i < len; i+=1) {\n            const mapObjFirstVertex = mapObjVertices[i];\n            let mapObjNextVertex = mapObjVertices[i + 1];\n            if (!mapObjNextVertex) {\n                mapObjNextVertex = mapObjVertices[0];\n            }\n            const vertex = this.#calculateShiftedVertexPos(mapObjFirstVertex, mapObjXWithOffset, mapObjYWithOffset, mapObjRotation),\n                nextVertex = this.#calculateShiftedVertexPos(mapObjNextVertex, mapObjXWithOffset, mapObjYWithOffset, mapObjRotation),\n                edge = {\n                    x1: vertex[0],\n                    y1: vertex[1],\n                    x2: nextVertex[0],\n                    y2: nextVertex[1]\n                },\n                intersect = isCircleLineIntersect(xWithOffset, yWithOffset, radius, edge);\n            if (intersect) {\n            //console.log(\"polygon: \", polygonWithOffsetAndRotation);\n            //console.log(\"intersect: \", intersect);\n                return intersect;\n            }\n        }\n        return false;\n    }\n\n    #isCircleToCircleCollision(circle1X, circle1Y, circle1R, circle2X, circle2Y, circle2R) {\n        const len = new Vector(circle1X, circle1Y, circle2X, circle2Y).length;\n        console.log(len);\n        console.log(circle1R);\n        console.log(circle2R);\n        if ((len - (circle1R + circle2R)) > 0) {\n            return false;\n        } else {\n            //@todo calculate point of intersect\n            return true;\n        }\n    }\n\n    #isPolygonToPolygonCollision(x, y, polygonVertices, polygonRotation, mapObject) {\n        const [mapOffsetX, mapOffsetY] = this.stageData.worldOffset,\n            xWithOffset = x - mapOffsetX,\n            yWithOffset = y - mapOffsetY,\n            mapObjXWithOffset = mapObject.x - mapOffsetX,\n            mapObjYWithOffset = mapObject.y - mapOffsetY,\n            mapObjVertices = mapObject.vertices, \n            mapObjRotation = mapObject.rotation,\n            polygonWithOffsetAndRotation = polygonVertices.map((vertex) => (this.#calculateShiftedVertexPos(vertex, xWithOffset, yWithOffset, polygonRotation))),\n            len = mapObjVertices.length;\n        //console.log(\"map object check:\");\n        //console.log(mapObject);\n        for (let i = 0; i < len; i+=1) {\n            const mapObjFirstVertex = mapObjVertices[i];\n            let mapObjNextVertex = mapObjVertices[i + 1];\n            if (!mapObjNextVertex) {\n                mapObjNextVertex = mapObjVertices[0];\n            }\n            const vertex = this.#calculateShiftedVertexPos(mapObjFirstVertex, mapObjXWithOffset, mapObjYWithOffset, mapObjRotation),\n                nextVertex = this.#calculateShiftedVertexPos(mapObjNextVertex, mapObjXWithOffset, mapObjYWithOffset, mapObjRotation),\n                edge = {\n                    x1: vertex[0],\n                    y1: vertex[1],\n                    x2: nextVertex[0],\n                    y2: nextVertex[1]\n                },\n                intersect = isPolygonLineIntersect(polygonWithOffsetAndRotation, edge);\n            if (intersect) {\n                //console.log(\"polygon: \", polygonWithOffsetAndRotation);\n                //console.log(\"intersect: \", intersect);\n                return intersect;\n            }\n        }\n        return false;\n    }\n\n    #calculateShiftedVertexPos(vertex, centerX, centerY, rotation) {\n        const vector = new Vector(0, 0, vertex[0], vertex[1]),\n            vertexAngle = angle_2points(0, 0, vertex[0], vertex[1]),\n            len = vector.length;\n            \n        const newX = centerX + (len * Math.cos(rotation + vertexAngle)),\n            newY = centerY + (len * Math.sin(rotation + vertexAngle));\n        return [newX, newY];\n    }\n    /**\n     * \n     * @param {number} x \n     * @param {number} y \n     * @param {number} r \n     * @returns {{x:number, y:number, p:number} | boolean}\n     */\n    #isCircleToBoundariesCollision(x, y, r) {\n        const mapObjects = this.stageData.getRawBoundaries(),\n            ellipseB = this.stageData.getEllipseBoundaries(),\n            pointB = this.stageData.getPointBoundaries(),\n            [mapOffsetX, mapOffsetY] = this.stageData.worldOffset,\n            xWithOffset = x - mapOffsetX,\n            yWithOffset = y - mapOffsetY,\n            len = this.stageData.boundariesLen,\n            eLen = this.stageData.ellipseBLen,\n            pLen = this.stageData.pointBLen;\n\n        for (let i = 0; i < len; i+=4) {\n            const x1 = mapObjects[i],\n                y1 = mapObjects[i + 1],\n                x2 = mapObjects[i + 2],\n                y2 = mapObjects[i + 3];\n\n            if (x1 === 0 && y1 === 0 && x2 === 0 && y2 === 0) {\n                continue;\n            } else {\n                const intersect = isCircleLineIntersect(xWithOffset, yWithOffset, r, {x1, y1, x2, y2});\n                \n                if (intersect) {\n                    //console.log(\"rotation: \", rotation);\n                    //console.log(\"polygon: \", polygonWithOffsetAndRotation);\n                    //console.log(\"intersect: \", intersect);\n                    return intersect;\n                }\n            }\n        }\n        if (eLen > 0) {\n            for (let i = 0; i < eLen; i+=4) {\n                const ellipse = [ellipseB[i], ellipseB[i+1], ellipseB[i+2], ellipseB[i+3]],\n                    intersect = isEllipseCircleIntersect(ellipse, {x:xWithOffset, y:yWithOffset, r});\n                if (intersect) {\n                    //console.log(\"rotation: \", rotation);\n                    //console.log(\"polygon: \", polygonWithOffsetAndRotation);\n                    //console.log(\"intersect: \", intersect);\n                    return intersect;\n                }\n            }\n        }\n        \n        if (pLen > 0) {\n            for (let i = 0; i < pLen; i+=2) {\n                const xP = pointB[i],\n                    yP = pointB[i + 1],\n                    intersect = isPointCircleIntersect(xP, yP, {x:xWithOffset, y:yWithOffset, r});\n                if (intersect) {\n                    //console.log(\"rotation: \", rotation);\n                    //console.log(\"polygon: \", polygonWithOffsetAndRotation);\n                    //console.log(\"intersect: \", intersect);\n                    return intersect;\n                }\n            }\n        }\n        return false;\n    }\n\n    /**\n     * @param {number} x\n     * @param {number} y\n     * @param {Array<Array<number>>} polygon\n     * @param {number} rotation\n     * @returns {{x:number, y:number, p:number} | boolean}\n     */\n    #isPolygonToBoundariesCollision(x, y, polygon, rotation) {\n        const mapObjects = this.stageData.getRawBoundaries(),\n            ellipseB = this.stageData.getEllipseBoundaries(),\n            pointB = this.stageData.getPointBoundaries(),\n            [mapOffsetX, mapOffsetY] = this.stageData.worldOffset,\n            xWithOffset = x - mapOffsetX,\n            yWithOffset = y - mapOffsetY,\n            polygonWithOffsetAndRotation = polygon.map((vertex) => (this.#calculateShiftedVertexPos(vertex, xWithOffset, yWithOffset, rotation))),\n            len = this.stageData.boundariesLen,\n            eLen = this.stageData.ellipseBLen,\n            pLen = this.stageData.pointBLen;\n\n        for (let i = 0; i < len; i+=4) {\n            const x1 = mapObjects[i],\n                y1 = mapObjects[i + 1],\n                x2 = mapObjects[i + 2],\n                y2 = mapObjects[i + 3];\n\n            if (x1 === 0 && y1 === 0 && x2 === 0 && y2 === 0) {\n                continue;\n            } else {\n                const intersect = isPolygonLineIntersect(polygonWithOffsetAndRotation, {x1, y1, x2, y2});\n                if (intersect) {\n                    //console.log(\"rotation: \", rotation);\n                    //console.log(\"polygon: \", polygonWithOffsetAndRotation);\n                    //console.log(\"intersect: \", intersect);\n                    return intersect;\n                }\n            }\n        }\n        if (eLen > 0) {\n            for (let i = 0; i < eLen; i+=4) {\n                const ellipse = [ellipseB[i], ellipseB[i+1], ellipseB[i+2], ellipseB[i+3]],\n                    intersect = isEllipsePolygonIntersect(ellipse, polygonWithOffsetAndRotation);\n                if (intersect) {\n                    //console.log(\"rotation: \", rotation);\n                    //console.log(\"polygon: \", polygonWithOffsetAndRotation);\n                    //console.log(\"intersect: \", intersect);\n                    return intersect;\n                }\n            }\n        }\n        \n        if (pLen > 0) {\n            for (let i = 0; i < pLen; i+=2) {\n                const x = pointB[i],\n                    y = pointB[i+1],\n                    intersect = isPointPolygonIntersect(x, y, polygonWithOffsetAndRotation);\n                if (intersect) {\n                //console.log(\"rotation: \", rotation);\n                //console.log(\"polygon: \", polygonWithOffsetAndRotation);\n                //console.log(\"intersect: \", intersect);\n                    return intersect;\n                }\n            }\n        }\n        return false;\n    }\n    //****************** End Collisions ****************//\n\n    #setCanvasSize() {\n        const canvasWidth = this.systemSettings.canvasMaxSize.width && (this.systemSettings.canvasMaxSize.width < window.innerWidth) ? this.systemSettings.canvasMaxSize.width : window.innerWidth,\n            canvasHeight = this.systemSettings.canvasMaxSize.height && (this.systemSettings.canvasMaxSize.height < window.innerHeight) ? this.systemSettings.canvasMaxSize.height : window.innerHeight;\n        this.stageData._setCanvasDimensions(canvasWidth, canvasHeight);\n    }\n}","import { WARNING_CODES } from \"../constants.js\";\nimport { Warning } from \"./Exception.js\";\n\nimport { DrawTiledLayer } from \"./2d/DrawTiledLayer.js\";\nimport { DrawImageObject } from \"./2d/DrawImageObject.js\";\nimport { DrawCircleObject } from \"./2d/DrawCircleObject.js\";\nimport { DrawConusObject } from \"./2d/DrawConusObject.js\";\nimport { DrawLineObject } from \"./2d/DrawLineObject.js\";\nimport { DrawPolygonObject } from \"./2d/DrawPolygonObject.js\";\nimport { DrawRectObject } from \"./2d/DrawRectObject.js\";\nimport { DrawTextObject } from \"./2d/DrawTextObject.js\";\n/**\n * A storage for stage data, such as gameObjects,\n * boundaries, worldDimensions and offset\n * @see {@link GameStage} a part of GameStage\n * @hideconstructor\n */\nexport class GameStageData {\n    #worldWidth;\n    #worldHeight;\n    #viewWidth;\n    #viewHeight;\n    #xOffset = 0;\n    #yOffset = 0;\n    #centerX = 0;\n    #centerY = 0;\n    #rotate = 0;\n\n    #maxBoundariesSize = 0;\n    #maxEllipseBoundSize = 0;\n    #maxPointBSize = 0;\n    /**\n     * Points to next empty cell\n     * @type {number}\n     */\n    #bPointer = 0;\n    /**\n     * Points to next empty cell\n     * @type {number}\n     */\n    #pPointer = 0;\n    /**\n     * Points to next empty cell\n     * @type {number}\n     */\n    #ePointer = 0;\n    /**\n     * current screen boundaries, recalculated every render cycles\n     * stored as floatArray, \n     * each 4 cells, represent a line with coords x1,y1,x2,y2\n     * @type {Float32Array}\n     */\n    #boundaries;\n    /**\n     * ellipse boundaries\n     * stored as floatArray, \n     * each 4 cells, represent am ellipse with cords centerX, centerY, radiusX, radiusY\n     * @type {Float32Array}\n     */\n    #ellipseBoundaries;\n    /**\n     * point boundaries\n     * stored as floatArray, \n     * each 2 cells, represent a point with coords x1,y1\n     * @type {Float32Array}\n     */\n    #pointBoundaries;\n    /**\n     * whole world boundaries, calculated once on prepare stage\n     * @type {Array<Array<number>>}\n     */\n    #wholeWorldBoundaries;\n    /**\n     * @type {Array<DrawImageObject | DrawCircleObject | DrawConusObject | DrawLineObject | DrawPolygonObject | DrawRectObject | DrawTextObject | DrawTiledLayer>}\n     */\n    #renderObjects = [];\n    \n    /**\n     * @type {boolean}\n     */\n    #isOffsetTurnedOff;\n    /**\n     * @deprecated\n     * @type {boolean}\n     */\n    #isWorldBoundariesEnabled = false;\n\n    constructor(gameOptions) {\n        //this.#boundaries = new Float32Array(this.#maxBoundariesSize);\n        //this.#ellipseBoundaries = new Float32Array(this.#maxBoundariesSize);\n        //this.#pointBoundaries = new Float32Array(this.#maxBoundariesSize);\n    }\n\n    /**\n     * \n     * @returns {boolean}\n     */\n    isOffsetTurnedOff() {\n        return this.#isOffsetTurnedOff;\n    }\n    set mapRotate(value) {\n        this.#rotate = value;\n    }\n\n    /**\n     * Add a Boundaries line\n     * @param {{x1:number,y1:number,x2:number, y2:number}} boundaries \n     */\n    #addBoundaries(boundaries) {\n        this._addBoundaryLine(boundaries.x1,boundaries.y1, boundaries.x2, boundaries.y2);\n    }\n\n    /**\n     * Add array of boundaries lines\n     * @param {Array<Array<number>>} boundaries \n     * @ignore\n     */\n    _addBoundariesArray(boundaries) {\n        const len = boundaries.length;\n        for (let i = 0; i < len; i++) {\n            const boundary = boundaries[i];\n            this._addBoundaryLine(boundary[0], boundary[1], boundary[2], boundary[3]);\n        }\n    }\n\n    _addBoundaryLine(x1, y1, x2, y2) {\n        this.#boundaries[this.#bPointer] = x1;\n        this.#bPointer++;\n        this.#boundaries[this.#bPointer] = y1;\n        this.#bPointer++;\n        this.#boundaries[this.#bPointer] = x2;\n        this.#bPointer++;\n        this.#boundaries[this.#bPointer] = y2;\n        this.#bPointer++;\n    }\n\n    _addEllipseBoundary(w, h, x, y) {\n        this.#ellipseBoundaries[this.#ePointer] = w;\n        this.#ePointer++;\n        this.#ellipseBoundaries[this.#ePointer] = h;\n        this.#ePointer++;\n        this.#ellipseBoundaries[this.#ePointer] = x;\n        this.#ePointer++;\n        this.#ellipseBoundaries[this.#ePointer] = y;\n        this.#ePointer++;\n    }\n\n    _addPointBoundary(x,y) {\n        this.#pointBoundaries[this.#pPointer] = x;\n        this.#pPointer++;\n        this.#pointBoundaries[this.#pPointer] = y;\n        this.#pPointer++;\n    }\n\n    _removeBoundaryLine(startPos) {\n        this.#boundaries[startPos] = 0;\n        this.#boundaries[startPos + 1] = 0;\n        this.#boundaries[startPos + 2] = 0;\n        this.#boundaries[startPos + 3] = 0;\n    }\n\n    /**\n     * Clear map boundaries\n     * @ignore\n     */\n    _clearBoundaries() {\n        this.#boundaries.fill(0);\n        this.#ellipseBoundaries.fill(0);\n        this.#pointBoundaries.fill(0);\n        \n        this.#bPointer = 0;\n        this.#ePointer = 0;\n        this.#pPointer = 0;\n    }\n\n    _initiateBoundariesData() {\n        this.#boundaries = new Float32Array(this.#maxBoundariesSize);\n        this.#ellipseBoundaries = new Float32Array(this.#maxEllipseBoundSize);\n        this.#pointBoundaries = new Float32Array(this.#maxPointBSize);\n    }\n\n    /**\n     * \n     * @param {number} bSize\n     * @param {number} eSize - ellipse boundaries size\n     * @param {number} pSize - points boundaries size\n     * @ignore\n     */\n    _setMaxBoundariesSize(bSize, eSize = 0, pSize = 0) {\n        this.#maxBoundariesSize = bSize;\n        this.#maxEllipseBoundSize = eSize;\n        this.#maxPointBSize = pSize;\n    }\n\n    /**\n     * \n     * @param {number} width \n     * @param {number} height \n     * @ignore\n     */\n    _setWorldDimensions(width, height) {\n        this.#worldWidth = width;\n        this.#worldHeight = height;\n    }\n\n    /**\n     * \n     * @param {number} width \n     * @param {number} height \n     * @ignore\n     */\n    _setCanvasDimensions(width, height) {\n        this.#viewWidth = width;\n        this.#viewHeight = height;\n    }\n\n    /**\n     * Set map borders\n     * @ignore\n     */\n    _setMapBoundaries() {\n        const [w, h] = [this.#worldWidth, this.#worldHeight],\n            [offsetX, offsetY] = [this.#xOffset, this.#yOffset],\n            wOffset = w - offsetX,\n            hOffset = h -offsetY;\n        if (!w || !h) {\n            Warning(WARNING_CODES.WORLD_DIMENSIONS_NOT_SET, \"Can't set map boundaries.\");\n        }\n        this.#addBoundaries({x1: 0, y1: 0, x2: wOffset, y2: 0});\n        this.#addBoundaries({x1: wOffset, y1: 0, x2: wOffset, y2: hOffset});\n        this.#addBoundaries({x1: wOffset, y1: hOffset, x2: 0, y2: hOffset});\n        this.#addBoundaries({x1: 0, y1: hOffset, x2: 0, y2: 0});\n    }\n\n    /**\n     * @ignore\n     */\n    _setWholeWorldMapBoundaries() {\n        const [w, h] = [this.#worldWidth, this.#worldHeight];\n        if (!w || !h) {\n            Warning(WARNING_CODES.WORLD_DIMENSIONS_NOT_SET, \"Can't set map boundaries.\");\n        }\n        this.#wholeWorldBoundaries.push([0, 0, w, 0]);\n        this.#wholeWorldBoundaries.push([w, 0, w, h]);\n        this.#wholeWorldBoundaries.push([w, h, 0, h]);\n        this.#wholeWorldBoundaries.push([0, h, 0, 0]);\n    }\n\n    /**\n     * Merge same boundaries\n     * !not used\n     * @ignore\n     * @deprecated\n     */\n    _mergeBoundaries(isWholeMapBoundaries = false) {\n        const boundaries = isWholeMapBoundaries ? this.getWholeWorldBoundaries() : this.getBoundaries(),\n            boundariesSet = new Set(boundaries);\n\n        for (const line of boundariesSet.values()) {\n            const lineX1 = line[0],\n                lineY1 = line[1],\n                lineX2 = line[2],\n                lineY2 = line[3];\n            for (const line2 of boundariesSet.values()) {\n                const line2X1 = line2[0],\n                    line2Y1 = line2[1],\n                    line2X2 = line2[2],\n                    line2Y2 = line2[3];\n                if (lineX1 === line2X2 && lineY1 === line2Y2 &&\n                    lineX2 === line2X1 && lineY2 === line2Y1) {\n                    //remove double lines\n                    boundariesSet.delete(line);\n                    boundariesSet.delete(line2);\n                }\n                if (lineX2 === line2X1 && lineY2 === line2Y1 && (lineX1 === line2X2 || lineY1 === line2Y2)) {\n                    //merge lines\n                    line2[0] = lineX1;\n                    line2[1] = lineY1;\n                    boundariesSet.delete(line);\n                }\n            }\n        }\n        if (isWholeMapBoundaries) {\n            this.#boundaries = Array.from(boundariesSet);\n        } else {\n            this.#wholeWorldBoundaries = Array.from(boundariesSet);\n        }\n        boundariesSet.clear();\n    }\n\n    /**\n     * @ignore\n     * @param {Array<Array<number>>} boundaries \n     */\n    _setWholeMapBoundaries(boundaries) {\n        this.#wholeWorldBoundaries.push(...boundaries);\n    }\n\n    /**\n     * @deprecated\n     * @ignore\n     */\n    _enableMapBoundaries() {\n        this.#isWorldBoundariesEnabled = true;\n    }\n\n    /**\n     * current screen boundaries, \n     * this method is for backward capability with jsge@1.4.4\n     * recommended to use getRawBoundaries()\n     * @returns {Array<Array<number>>}\n     */\n    getBoundaries() {\n        const boundaries = this.#boundaries, \n            len = this.#bPointer;\n\n        let bTempArray = [],\n            bArray = [];\n        \n        for (let i = 0; i < len; i++) {\n            const element = boundaries[i];\n            bTempArray.push(element);\n            if (((i + 1) % 4) === 0) {\n                bArray.push(bTempArray);\n                bTempArray = [];\n            }\n        }\n        return bArray;\n    }\n\n    /**\n     * current screen boundaries\n     * polygon boundaries from Tiled and Tiled boundaries layers are merged here\n     * each 4 cells, represent a line with coords x1,y1,x2,y2\n     * @returns {Float32Array}\n     */\n    getRawBoundaries() {\n        return this.#boundaries;\n    }\n\n    /**\n     * ellipse boundaries from Tiled,\n     * stored as floatArray, \n     * each 4 cells, represent am ellipse with cords centerX, centerY, radiusX, radiusY\n     * @returns {Float32Array}\n     */\n    getEllipseBoundaries() {\n        return this.#ellipseBoundaries;\n    }\n\n    /**\n     * point boundaries from Tiled,\n     * stored as floatArray, \n     * each 2 cells, represent a point with coords x1,y1\n     * @returns {Float32Array}\n     */\n    getPointBoundaries() {\n        return this.#pointBoundaries;\n    }\n\n    getWholeWorldBoundaries() {\n        return this.#wholeWorldBoundaries;\n    }\n\n    /**\n     * @deprecated\n     */\n    get isWorldBoundariesEnabled() {\n        return this.#isWorldBoundariesEnabled;\n    }\n    /**\n     * Current canvas dimensions\n     * @type {Array<number>}\n     */\n    get canvasDimensions() {\n        return [this.#viewWidth, this.#viewHeight];\n    }\n\n    /**\n     * Current game world dimensions\n     * @type {Array<number>}\n     */\n    get worldDimensions() {\n        return [this.#worldWidth, this.#worldHeight];\n    }\n    \n    /**\n     * Current word x/y offset\n     * @type {Array<number>}\n     */\n    get worldOffset() {\n        return [this.#xOffset, this.#yOffset];\n    }\n\n    /**\n     * Current focus point\n     * @type {Array<number>}\n     */\n    get mapCenter() {\n        return [this.#centerX, this.#centerY];\n    }\n\n    /**\n     * @type {number}\n     */\n    get mapRotate() {\n        return this.#rotate;\n    }\n\n    /**\n     * Tiled polygon and Tiled layer boundaries length\n     * @type {number}\n     */\n    get boundariesLen() {\n        return this.#bPointer;\n    }\n\n    /**\n     * Tiled ellipse boundaries length\n     * @type {number}\n     */\n    get ellipseBLen() {\n        return this.#ePointer;\n    }\n\n    /**\n     * Tiled point length\n     * @type {number}\n     */\n    get pointBLen() {\n        return this.#pPointer;\n    }\n\n    /**\n     * @method\n     * @param {number} x \n     * @param {number} y \n     */\n    centerCameraPosition = (x, y) => {\n        let [mapOffsetX, mapOffsetY] = this.worldOffset;\n        const [canvasWidth, canvasHeight] = this.canvasDimensions,\n            [mapWidth, mapHeight] = this.worldDimensions,\n            halfScreenWidth = canvasWidth/2,\n            halfScreenHeight = canvasHeight/2,\n            currentCenterX = halfScreenWidth - mapOffsetX,\n            currentCenterY = halfScreenHeight - mapOffsetY;\n        if (currentCenterX < x) {\n            if (x < mapWidth - halfScreenWidth) {\n                const newXOffset = x - halfScreenWidth;\n                if (newXOffset >= 0)\n                    this.#xOffset = Math.round(newXOffset);\n            } else if (mapWidth > canvasWidth) {\n                const newXOffset = mapWidth - canvasWidth;\n                this.#xOffset = Math.round(newXOffset);\n            }\n        }\n        if (currentCenterY < y) {\n            if (y < mapHeight - halfScreenHeight) {\n                const newYOffset = y - halfScreenHeight;\n                if (newYOffset >= 0)\n                    this.#yOffset = Math.round(newYOffset);\n            } else if (mapHeight > canvasHeight) {\n                const newYOffset = mapHeight - canvasHeight;\n                this.#yOffset = Math.round(newYOffset);\n            }\n        }\n\n        this.#centerX = x;\n        this.#centerY = y;\n        //Logger.debug(\"center camera position, offset: \", this.worldOffset);\n        //Logger.debug(\"center: \", this.mapCenter);   \n    };\n\n    personRotatedCenterCamera = (x, y, rotationAngle) => {\n        console.log(\"new centering algorithm\");\n        /*\n        let [mapOffsetX, mapOffsetY] = this.worldOffset;\n        const [canvasWidth, canvasHeight] = this.canvasDimensions,\n            [mapWidth, mapHeight] = this.worldDimensions,\n            halfScreenWidth = canvasWidth/2,\n            halfScreenHeight = canvasHeight/2,\n            currentCenterX = halfScreenWidth - mapOffsetX,\n            currentCenterY = halfScreenHeight - mapOffsetY;\n        if (currentCenterX < x) {\n            if (x < mapWidth - halfScreenWidth) {\n                const newXOffset = x - halfScreenWidth;\n                if (newXOffset >= 0)\n                    this.#xOffset = Math.round(newXOffset);\n            } else if (mapWidth > canvasWidth) {\n                const newXOffset = mapWidth - canvasWidth;\n                this.#xOffset = Math.round(newXOffset);\n            }\n        }\n        if (currentCenterY < y) {\n            if (y < mapHeight - halfScreenHeight) {\n                const newYOffset = y - halfScreenHeight;\n                if (newYOffset >= 0)\n                    this.#yOffset = Math.round(newYOffset);\n            } else if (mapHeight > canvasHeight) {\n                const newYOffset = mapHeight - canvasHeight;\n                this.#yOffset = Math.round(newYOffset);\n            }\n        }\n\n        this.#centerX = x;\n        this.#centerY = y;\n        Logger.debug(\"center camera position, offset: \", this.worldOffset);\n        Logger.debug(\"center: \", this.mapCenter);   \n        */\n    };\n\n    /**\n     * a getter to retrieve all attached renderObjects\n     */\n    get renderObjects() {\n        return this.#renderObjects;\n    }\n\n    /**\n     * Retrieve specific objects instances\n     * @param {Object} instance - drawObjectInstance to retrieve \n     * @returns {Array<Object>}\n     */\n    getObjectsByInstance(instance) {\n        return this.#renderObjects.filter((object) => object instanceof instance);\n    }\n\n    /**\n     * @ignore\n     */\n    _sortRenderObjectsBySortIndex() {\n        this.#renderObjects = this.#renderObjects.sort((obj1, obj2) => obj1.sortIndex - obj2.sortIndex);\n    }\n\n    /**\n     * @ignore\n     */\n    set _renderObject(object) {\n        this.#renderObjects.push(object);\n    } \n\n    /**\n     * @ignore\n     */\n    set _renderObjects(objects) {\n        this.#renderObjects = objects;\n    } \n}","import { ISystem } from \"./ISystem.js\";\n\n/**\n * Class for creating modules\n * Accessed via ISystem.extensionInterface\n */\nexport class IExtension {\n    /**\n     * @type {ISystem}\n     */\n    #systemReference;\n    /**\n     * @hideconstructor\n     */\n    constructor(iSystem) {\n        this.#systemReference = iSystem;\n    }\n    /**\n     * Is used for registering new Object in DrawObjectFactory, \\\n     * registered method could be then called with this.draw[createInstanceKey]\n     * @param {string} createInstanceKey - a key for calling method from DrawObjectFactory\n     * @param {function} createInstanceMethod - method \n     */\n    registerDrawObject(createInstanceKey, createInstanceMethod) {\n        this.#systemReference.drawObjectFactory._registerNewObjectMethod(createInstanceKey, createInstanceMethod);\n    }\n\n    /**\n     * Used to register a new draw program\n     * @param {string} programName\n     * @param {string} vertexShader - raw vertex shader program\n     * @param {string} fragmentShader - raw fragment shader program \n     * @param {Array<string>} uVars - program uniform variables names\n     * @param {Array<string>} aVars - program attribute variables names\n     * @returns {Promise<void>}\n     */\n    registerAndCompileWebGlProgram(programName, vertexShader, fragmentShader, uVars, aVars) {\n        return this.#systemReference.iRender._registerAndCompileWebGlProgram(programName, vertexShader, fragmentShader, uVars, aVars);\n    }\n\n    /**\n     * Inject method to render.init stage. Should be Promise based.\n     * @param {function():Promise<void>} method \n     * @returns {void}\n     */\n    registerRenderInit(method) {\n        this.#systemReference.iRender._registerRenderInit(method);\n    }\n\n    /**\n     * Register render method for class.\n     * @param {string} objectClassName - object name registered to DrawObjectFactory\n     * @param {function(renderObject, gl, pageData, program, vars):Promise<any[]>} objectRenderMethod - should be promise based returns vertices number and draw program\n     * @param {string} objectWebGlDrawProgram - a webgl program name previously registered with iExtension.registerAndCompileWebGlProgram()\n     */\n    registerObjectRender(objectClassName, objectRenderMethod, objectWebGlDrawProgram) {\n        this.#systemReference.iRender._registerObjectRender(objectClassName, objectRenderMethod, objectWebGlDrawProgram);\n    }\n}","import { CONST, ERROR_CODES } from \"../constants.js\";\nimport { Exception } from \"./Exception.js\";\nimport { Logger } from \"./Logger.js\";\nimport { SystemEvent } from \"./Events/SystemEvent.js\";\n\n/**\n * Represents Socket connection\n * \n * From 1.4.4 disabled by default,\n * to enable, set settings.network.enabled to true\n */\nexport class INetwork extends EventTarget {\n    #systemSettings;\n    #socket;\n\n    /**\n     * @hideconstructor\n     */\n    constructor(systemSettings) {\n        super();\n        if (!systemSettings) {\n            Exception(ERROR_CODES.CREATE_INSTANCE_ERROR, \"systemSettings should be passed to class instance\");\n        }\n        this.#systemSettings = systemSettings;\n    }\n\n    init() {\n        import(\"socket.io-client\").then((module) => {\n            this.#socket = module.io(this.#systemSettings.network.address, {withCredentials: true});\n            \n            this.#registerSocketListeners();\n        });\n    }\n\n    /**\n     * @returns {boolean}\n     */\n    get isServerConnected () {\n        if (this.#socket && this.#socket.connected) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n    \n    get playerId() {\n        return this.#socket.id;\n    }\n\n    sendGatherRoomsInfo() {\n        this.#socket.emit(CONST.EVENTS.WEBSOCKET.CLIENT_SERVER.ROOMS_INFO_REQUEST);\n    }\n\n    sendCreateOrJoinRoom(roomName, map) {\n        this.#socket.emit(CONST.EVENTS.WEBSOCKET.CLIENT_SERVER.CREATE_OR_JOIN, roomName , map);\n    }\n\n    sendMessage(message) {\n        this.#socket.emit(CONST.EVENTS.WEBSOCKET.CLIENT_SERVER.CLIENT_MESSAGE, message);\n    }\n\n    #onConnect = () => {\n        Logger.debug(\"connected, socket id: \" + this.#socket.id);\n        this.dispatchEvent(new Event(CONST.EVENTS.WEBSOCKET.SERVER_CLIENT.CONNECTION_STATUS_CHANGED));\n    };\n\n    #onDisconnect = (reason) => {\n        Logger.debug(\"server disconnected, reason: \" + reason);\n        this.dispatchEvent(new Event(CONST.EVENTS.WEBSOCKET.SERVER_CLIENT.CONNECTION_STATUS_CHANGED));\n    };\n\n    #onData = (event) => {\n        console.warn(\"server data: \", event);\n    };\n\n    #onMessage = (message) => {\n        Logger.debug(\"received new message from server: \" + message);\n        this.dispatchEvent(new SystemEvent(CONST.EVENTS.WEBSOCKET.SERVER_CLIENT.SERVER_MESSAGE, message));\n    };\n\n    #onRoomsInfo = (rooms) => {\n        Logger.debug(\"received roomsInfo \" + rooms);\n        this.dispatchEvent(new SystemEvent(CONST.EVENTS.WEBSOCKET.SERVER_CLIENT.ROOMS_INFO, rooms));\n    };\n\n    #onCreateNewRoom = (room, map) => {\n        Logger.debug(\"CLIENT SOCKET: Created room  \" + room);\n        this.dispatchEvent(new SystemEvent(CONST.EVENTS.WEBSOCKET.SERVER_CLIENT.CREATED, {room, map}));\n    };\n\n    #onRoomIsFull = (room) => {\n        Logger.debug(\"CLIENT SOCKET: Room is full, can't join: \" + room);\n        this.dispatchEvent(new SystemEvent(CONST.EVENTS.WEBSOCKET.SERVER_CLIENT.FULL, {room}));\n    };\n\n    #onJoinedToRoom = (room, map) => {\n        Logger.debug(\"CLIENT SOCKET: Joined to room: \" + room, \", map: \", map);\n        this.dispatchEvent(new SystemEvent(CONST.EVENTS.WEBSOCKET.SERVER_CLIENT.JOINED, {room, map}));\n    };\n\n    #onUnjoinedFromRoom = (playerId) => {\n        this.dispatchEvent(new SystemEvent(CONST.EVENTS.WEBSOCKET.SERVER_CLIENT.DISCONNECTED, {playerId}));\n    };\n\n    #registerSocketListeners() {\n        this.#socket.on(\"connect\", this.#onConnect);\n        this.#socket.on(\"disconnect\", this.#onDisconnect);\n        this.#socket.on(\"data\", this.#onData);\n\n        this.#socket.on(\"roomsInfo\", this.#onRoomsInfo);\n    \n        this.#socket.on(\"created\", this.#onCreateNewRoom);\n    \n        this.#socket.on(\"full\", this.#onRoomIsFull);\n    \n        this.#socket.on(\"joined\", this.#onJoinedToRoom);\n    \n        this.#socket.on(\"log\", function(array) {\n            console.log.apply(console, array);\n        });\n    \n        this.#socket.on(\"message\", this.#onMessage);\n    \n        this.#socket.on(\"removed\", function(message) {\n            console.log(\"removed message\");\n            console.log(message);\n        });\n\n        this.#socket.on(\"disconnected\", this.#onUnjoinedFromRoom);\n\n        addEventListener(\"beforeunload\", this.#disconnect);\n    }\n\n    #disconnect = () => {\n        this.#socket.disconnect();\n    };\n}","import { Exception, Warning } from \"./Exception.js\";\r\nimport { ERROR_CODES, WARNING_CODES } from \"../constants.js\";\r\nimport { WebGlEngine } from \"./WebGl/WebGlEngine.js\";\r\nimport { SystemSettings } from \"../configs.js\";\r\nimport { GameStageData } from \"./GameStageData.js\";\r\n//import { calculateBufferData } from \"../wa/release.js\";\r\nimport { CONST } from \"../constants.js\";\r\nimport { imgVertexShader, imgFragmentShader, imgUniforms, imgAttributes } from \"./WebGl/ImagesDrawProgram.js\";\r\nimport { primitivesVertexShader, primitivesFragmentShader, primitivesUniforms, primitivesAttributes } from \"./WebGl/PrimitivesDrawProgram.js\";\r\nimport { RenderLoop } from \"./RenderLoop.js\";\r\n\r\n/**\r\n * IRender class controls the render(start/stop/speed) \r\n * And drawObjects(animations, removing, and rendering)\r\n * @see {@link GameStage} a part of GameStage\r\n * @hideconstructor\r\n */\r\nexport class IRender {\r\n    /**\r\n     * @type {HTMLCanvasElement}\r\n     */\r\n    #canvas;\r\n    /**\r\n     * @type {WebGLRenderingContext | null}\r\n     */\r\n    #drawContext;\r\n    /**\r\n     * @type {WebGlEngine}\r\n     */\r\n    #webGlEngine;\r\n    /**\r\n     * @type {GameStageData | null}\r\n     */\r\n    #currentGameStageData;\r\n\r\n    /**\r\n     * ISystem.systemSettings\r\n     * @type {SystemSettings}\r\n     */\r\n    #systemSettingsReference;\r\n    /**\r\n     * A reference to the systemInterface.iLoader\r\n     * @type {AssetsManager}\r\n     */\r\n    #loaderReference;\r\n    \r\n\r\n    #renderLoopInstance;\r\n    /**\r\n     * @type {boolean}\r\n     */\r\n    #isBoundariesPrecalculations = false;\r\n\r\n    /**\r\n     * @type {Array<function():Promise<void>>}\r\n     */\r\n    #initPromises = [];\r\n    /**\r\n     * @type {EventTarget}\r\n     */\r\n    #emitter = new EventTarget();\r\n    constructor(systemSettings, iLoader, canvasContainer) {\r\n        \r\n        this.#canvas = document.createElement(\"canvas\");\r\n        canvasContainer.appendChild(this.#canvas);\r\n        this.#drawContext = this.#canvas.getContext(\"webgl\", {stencil: true});\r\n\r\n        this.#systemSettingsReference = systemSettings;\r\n        this.#loaderReference = iLoader;\r\n\r\n        this.#isBoundariesPrecalculations = this.systemSettings.gameOptions.render.boundaries.wholeWorldPrecalculations;\r\n\r\n        this.#webGlEngine = new WebGlEngine(this.#drawContext, this.#systemSettingsReference.gameOptions, this.iLoader);\r\n        \r\n        this._registerRenderInit(this.#webGlEngine._initiateJsRender);\r\n        if (this.systemSettings.gameOptions.optimization === CONST.OPTIMIZATION.WEB_ASSEMBLY.NATIVE_WAT ||\r\n            this.systemSettings.gameOptions.optimization === CONST.OPTIMIZATION.WEB_ASSEMBLY.ASSEMBLY_SCRIPT) {\r\n            this._registerRenderInit(this.#webGlEngine._initiateWasm);\r\n        }\r\n\r\n        this._registerRenderInit(this.fixCanvasSize);\r\n        this._registerRenderInit(\r\n            () => this._registerAndCompileWebGlProgram(CONST.WEBGL.DRAW_PROGRAMS.IMAGES, imgVertexShader, imgFragmentShader, imgUniforms, imgAttributes)\r\n        );\r\n        this._registerRenderInit(\r\n            () => this._registerAndCompileWebGlProgram(CONST.WEBGL.DRAW_PROGRAMS.PRIMITIVES, primitivesVertexShader, primitivesFragmentShader, primitivesUniforms, primitivesAttributes)\r\n        );\r\n        this._registerRenderInit(this.#webGlEngine._initWebGlAttributes);\r\n    }\r\n\r\n    _webGlEngine() {\r\n        return this.#webGlEngine;\r\n    }\r\n    /**\r\n     * \r\n     * @param {string} eventName \r\n     * @param {*} listener \r\n     * @param {*=} options \r\n     */\r\n    addEventListener = (eventName, listener, options) => {\r\n        this.#emitter.addEventListener(eventName, listener, options);\r\n    };\r\n\r\n    /**\r\n     * \r\n     * @param {string} eventName \r\n     * @param {*} listener \r\n     * @param {*=} options \r\n     */\r\n    removeEventListener = (eventName, listener, options) => {\r\n        this.#emitter.removeEventListener(eventName, listener, options);\r\n    };\r\n\r\n    get stageData() {\r\n        return this.#currentGameStageData;\r\n    }\r\n\r\n    get systemSettings() {\r\n        return this.#systemSettingsReference;\r\n    }\r\n\r\n    get iLoader() {\r\n        return this.#loaderReference;\r\n    }\r\n\r\n    get canvas() {\r\n        return this.#canvas;\r\n    }\r\n\r\n    get drawContext() {\r\n        return this.#drawContext;\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param {string} eventName\r\n     * @param  {...any} eventParams\r\n     */\r\n    emit = (eventName, ...eventParams) => {\r\n        const event = new Event(eventName);\r\n        event.data = [...eventParams];\r\n        this.#emitter.dispatchEvent(event);\r\n    };\r\n\r\n    /**\r\n     * Determines if all added files was loaded or not\r\n     * @returns {boolean}\r\n     */\r\n    isAllFilesLoaded = () => {\r\n        return this.iLoader.filesWaitingForUpload === 0;\r\n    };\r\n\r\n    /**\r\n     * \r\n     * @returns {boolean}\r\n     */\r\n    _isRenderActive() {\r\n        return this.#renderLoopInstance ? this.#renderLoopInstance._isActive : false;\r\n    }\r\n\r\n    initiateContext = (stageData) => {\r\n        return Promise.all(this.#initPromises.map(method => method(stageData)));\r\n    };\r\n\r\n\r\n    /****************************\r\n     *  Extend functionality\r\n     ****************************/\r\n    /**\r\n     * @ignore\r\n     * @param {string} programName\r\n     * @param {string} vertexShader - raw vertex shader program\r\n     * @param {string} fragmentShader - raw fragment shader program \r\n     * @param {Array<string>} uVars - program uniform variables names\r\n     * @param {Array<string>} aVars - program attribute variables names\r\n     * @returns {Promise<void>}\r\n     */\r\n    _registerAndCompileWebGlProgram(programName, vertexShader, fragmentShader, uVars, aVars) {\r\n        this.#webGlEngine._registerAndCompileWebGlProgram(programName, vertexShader, fragmentShader, uVars, aVars);\r\n        return Promise.resolve();\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     * @param {function(GameStageData):Promise<void>} method \r\n     * @returns {void}\r\n     */\r\n    _registerRenderInit(method) {\r\n        this.#initPromises.push(method);\r\n        //} else {\r\n        //    Exception(ERROR_CODES.UNEXPECTED_METHOD_TYPE, \"registerRenderInit() accept only Promise based methods!\");\r\n        //}\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     * @param {string} objectClassName - object name registered to DrawObjectFactory\r\n     * @param {function(renderObject, gl, pageData, program, vars):Promise<any[]>} objectRenderMethod - should be promise based returns vertices number and draw program\r\n     * @param {string=} objectWebGlDrawProgram \r\n     */\r\n    _registerObjectRender(objectClassName, objectRenderMethod, objectWebGlDrawProgram) {\r\n        this.#webGlEngine._registerObjectRender(objectClassName, objectRenderMethod, objectWebGlDrawProgram);\r\n    }\r\n\r\n    /****************************\r\n     *  End of Extend functionality\r\n     ****************************/\r\n\r\n    setCanvasSize(width, height) {\r\n        this.#canvas.width = width;\r\n        this.#canvas.height = height;\r\n        if (this.#webGlEngine) {\r\n            this.#webGlEngine._fixCanvasSize(width, height);\r\n        }\r\n    }\r\n\r\n    fixCanvasSize = () => {\r\n        const settings = this.systemSettings, \r\n            canvasWidth = settings.canvasMaxSize.width && (settings.canvasMaxSize.width < window.innerWidth) ? settings.canvasMaxSize.width : window.innerWidth,\r\n            canvasHeight = settings.canvasMaxSize.height && (settings.canvasMaxSize.height < window.innerHeight) ? settings.canvasMaxSize.height : window.innerHeight;\r\n        this.setCanvasSize(canvasWidth, canvasHeight);\r\n        return Promise.resolve();\r\n    };\r\n\r\n    _createBoundariesPrecalculations() {\r\n        //const promises = [];\r\n        //for (const layer of this.#renderLayers) {\r\n        //    promises.push(this.#layerBoundariesPrecalculation(layer).catch((err) => {\r\n        //        Exception(ERROR_CODES.UNHANDLED_PREPARE_EXCEPTION, err);\r\n        //    }));\r\n        //}\r\n        //return promises;\r\n    }\r\n\r\n    //#clearTileMapPromises() {\r\n    //    this.#bindTileMapPromises = [];\r\n    //}\r\n\r\n    /**\r\n     * @ignore\r\n     * @param {GameStageData} stageData \r\n     */\r\n    _startRender = async (/*time*/stageData) => {\r\n        this.fixCanvasSize();\r\n        this.#currentGameStageData = stageData;\r\n        switch (this.systemSettings.gameOptions.library) {\r\n        case CONST.LIBRARY.WEBGL:\r\n            await this.#prepareViews();\r\n            this.#renderLoopInstance = new RenderLoop(this.systemSettings, stageData, this._webGlEngine());\r\n            // delegate render loop events\r\n            this.#renderLoopInstance.addEventListener(CONST.EVENTS.SYSTEM.RENDER.START, () => this.emit(CONST.EVENTS.SYSTEM.RENDER.START));\r\n            this.#renderLoopInstance.addEventListener(CONST.EVENTS.SYSTEM.RENDER.END, () => this.emit(CONST.EVENTS.SYSTEM.RENDER.END));\r\n\r\n            this.#renderLoopInstance._start();\r\n            break;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * @ignore\r\n     */\r\n    _stopRender = () => {\r\n        this.#renderLoopInstance.removeEventListener(CONST.EVENTS.SYSTEM.RENDER.START, this.emit(CONST.EVENTS.SYSTEM.RENDER.START));\r\n        this.#renderLoopInstance.removeEventListener(CONST.EVENTS.SYSTEM.RENDER.END, this.emit(CONST.EVENTS.SYSTEM.RENDER.END));\r\n\r\n        this.#renderLoopInstance._stop();\r\n        this.#renderLoopInstance = undefined;\r\n\r\n    };\r\n    /**\r\n     * \r\n     * @returns {Promise<void>}\r\n     */\r\n    #prepareViews() {\r\n        return new Promise((resolve, reject) => {\r\n            let viewPromises = [];\r\n            const isBoundariesPrecalculations = this.#isBoundariesPrecalculations;\r\n            viewPromises.push(this.initiateContext(this.#currentGameStageData));\r\n            if (isBoundariesPrecalculations) {\r\n                console.warn(\"isBoundariesPrecalculations() is turned off\");\r\n                //for (const view of this.#views.values()) {\r\n                //viewPromises.push(this.#iRender._createBoundariesPrecalculations());\r\n                //}\r\n            }\r\n            Promise.allSettled(viewPromises).then((drawingResults) => {\r\n                drawingResults.forEach((result) => {\r\n                    if (result.status === \"rejected\") {\r\n                        const error = result.reason;\r\n                        Warning(WARNING_CODES.UNHANDLED_DRAW_ISSUE, error);\r\n                        reject(error);\r\n                    }\r\n                });\r\n                resolve();\r\n            });\r\n        });\r\n    }\r\n}","import { CONST, ERROR_CODES, WARNING_CODES } from \"../constants.js\";\nimport { Exception, Warning } from \"./Exception.js\";\nimport { INetwork } from \"./INetwork.js\";\nimport { ISystemAudio } from \"./ISystemAudio.js\";\nimport { SystemSettings } from \"../configs.js\";\nimport AssetsManager from \"../../modules/assetsm/dist/assetsm.min.js\";\nimport { DrawObjectFactory } from \"./DrawObjectFactory.js\";\nimport { GameStage } from \"./GameStage.js\";\nimport { IRender } from \"./IRender.js\";\nimport { IExtension } from \"./IExtension.js\";\n\n/**\n * Public interface for a System<br>\n * Can be used to start/stop GameStage render, <br>\n * And provides access to SystemSettings, INetwork and ISystemAudio <br>\n * IRender, DrawObjectFactory, AssetsManager and external modules\n * accessible via GameStage.iSystem and System.system\n * @see {@link System} a part of System class instance\n * @see {@link GameStage} a part of GameStage class instance\n */\nexport class ISystem {\n    /**\n     * @type {Object}\n     */\n    #systemSettings;\n    /**\n     * @type {IExtension}\n     */\n    #iExtension;\n    /**\n     * @type {INetwork | null}\n     */\n    #systemServerConnection;\n    /**\n     * @type {ISystemAudio}\n     */\n    #systemAudioInterface;\n    /**\n     * @type {AssetsManager}\n     */\n    #iLoader = new AssetsManager();\n    /**\n     * @type {IRender}\n     */\n    #iRender;\n    /**\n     * @type {DrawObjectFactory}\n     */\n    #drawObjectFactory = new DrawObjectFactory(this.#iLoader);\n    \n    #modules = new Map();\n    /**\n     * @type {Map<string, GameStage>}\n     */\n    #registeredStagesReference;\n    /**\n     * @type {EventTarget}\n     */\n    #emitter = new EventTarget();\n    /**\n     * @hideconstructor\n     */\n    constructor(systemSettings, registeredStages, canvasContainer) {\n        if (!systemSettings) {\n            Exception(ERROR_CODES.CREATE_INSTANCE_ERROR, \"systemSettings should be passed to class instance\");\n        }\n        this.#systemSettings = systemSettings;\n        \n        this.#systemAudioInterface = new ISystemAudio(this.iLoader);\n        this.#systemServerConnection = systemSettings.network.enabled ? new INetwork(systemSettings) : null;\n        this.#iRender = new IRender(this.systemSettings, this.iLoader, canvasContainer);\n        this.#iExtension = new IExtension(this);\n        this.#registeredStagesReference = registeredStages;\n        // broadcast render events\n        this.#iRender.addEventListener(CONST.EVENTS.SYSTEM.RENDER.START, () => this.emit(CONST.EVENTS.SYSTEM.RENDER.START));\n        this.#iRender.addEventListener(CONST.EVENTS.SYSTEM.RENDER.END, () => this.emit(CONST.EVENTS.SYSTEM.RENDER.END));\n    }\n\n    /**\n     * \n     * @param {string} eventName\n     * @param  {...any} eventParams\n     */\n    emit = (eventName, ...eventParams) => {\n        const event = new Event(eventName);\n        event.data = [...eventParams];\n        this.#emitter.dispatchEvent(event);\n    };\n\n    /**\n     * \n     * @param {string} eventName \n     * @param {*} listener \n     * @param {*=} options \n     */\n    addEventListener = (eventName, listener, options) => {\n        this.#emitter.addEventListener(eventName, listener, options);\n    };\n\n    /**\n     * \n     * @param {string} eventName \n     * @param {*} listener \n     * @param {*=} options \n     */\n    removeEventListener = (eventName, listener, options) => {\n        this.#emitter.removeEventListener(eventName, listener, options);\n    };\n    \n    /**\n     * @type { INetwork | null }\n     */\n    get iNetwork () {\n        return this.#systemServerConnection;\n    }\n\n    /**\n     * @type { SystemSettings }\n     */\n    get systemSettings() {\n        return this.#systemSettings;\n    }\n\n    /**\n     * @type { ISystemAudio }\n     */\n    get audio() {\n        return this.#systemAudioInterface;\n    }\n\n    /**\n     * @type {AssetsManager}\n     */\n    get iLoader() {\n        return this.#iLoader;\n    }\n\n    /**\n     * @type {IRender}\n     */\n    get iRender() {\n        return this.#iRender;\n    }\n\n    /**\n     * @type {DrawObjectFactory}\n     */\n    get drawObjectFactory() {\n        return this.#drawObjectFactory;\n    }\n\n    get iExtension() {\n        return this.#iExtension;\n    }\n    /**\n     * @type {Map<string, Object>}\n     */\n    get modules() {\n        return this.#modules;\n    }\n\n    /**\n     * \n     * @param {string} moduleKey \n     * @param {Object} moduleClass \n     * @param  {...any} args \n     * @returns {Object}\n     */\n    installModule = (moduleKey, moduleClass, ...args) => {\n        const moduleInstance = new moduleClass(this, ...args);\n        if (this.#modules.has(moduleKey)) {\n            Warning(WARNING_CODES.MODULE_ALREADY_INSTALLED, \"module \" + moduleKey + \" is already installed\");\n            return this.#modules.get(moduleKey);\n        } else {\n            this.#modules.set(moduleKey, moduleInstance);\n        }\n        return moduleInstance;\n    };\n\n    /**\n     * @method\n     * @param {string} gameStageName\n     * @param {Object} [options] - options\n     */\n    startGameStage = (gameStageName, options) => {\n        if (this.#registeredStagesReference.has(gameStageName)) {\n            if (this.#iRender._isRenderActive() === true) {\n                this.#iRender._stopRender();\n                Exception(ERROR_CODES.ANOTHER_STAGE_ACTIVE, \" Can't start the stage \" + gameStageName + \" while, another stage is active\");\n            } else {\n                const stage = this.#registeredStagesReference.get(gameStageName),\n                    pageData = stage.stageData;\n                this.#drawObjectFactory._attachPageData(pageData);\n                if (stage.isInitiated === false) {\n                    stage._init();\n                }\n                //stage._attachCanvasToContainer(this.#canvasContainer);\n                stage._start(options);\n                this.emit(CONST.EVENTS.SYSTEM.START_PAGE);\n                this.#iRender._startRender(pageData);\n            }\n            \n        } else {\n            Exception(ERROR_CODES.VIEW_NOT_EXIST, \"Stage \" + gameStageName + \" is not registered!\");\n        }\n    };\n\n    /**\n     * @method\n     * @param {string} gameStageName\n     */\n    stopGameStage = (gameStageName) => {\n        if (this.#registeredStagesReference.has(gameStageName)) {\n            this.emit(CONST.EVENTS.SYSTEM.STOP_PAGE);\n            this.drawObjectFactory._detachPageData();\n            this.#iRender._stopRender();\n            this.#registeredStagesReference.get(gameStageName)._stop();\n        } else {\n            Exception(ERROR_CODES.STAGE_NOT_EXIST, \"GameStage \" + gameStageName + \" is not registered!\");\n        }\n    };\n}","import AssetsManager from  \"../../modules/assetsm/dist/assetsm.min.js\";\nimport { WARNING_CODES } from \"../constants.js\";\nimport { Warning } from \"./Exception.js\";\n\n/**\n * An audio interface, <br>\n * controls all application audio,<br>\n * holds and retrieves audio, changes volume<br> \n * accessible via GameStage.audio\n * @see {@link GameStage} a part of GameStage\n * @hideconstructor\n */\nexport class ISystemAudio {\n    #volume = 0.5;\n    #audio = new Map();\n    /**\n     * @type {AssetsManager}\n     */\n    #loaderReference;\n\n    constructor(iLoader) {\n        this.#loaderReference = iLoader;\n    }\n\n    /**\n     * Original track\n     * @param {string} name \n     * @returns {HTMLAudioElement | null}\n     */\n    getAudio = (name) => {\n        const audio = this.#audio.get(name);\n        if (audio === null) {\n            Warning(WARNING_CODES.AUDIO_NOT_LOADED, \"Audio with key \" + name + \" exists, but not actually loaded\");\n            return audio;\n        }\n        if (audio) {\n            return audio;\n        } else {\n            Warning(WARNING_CODES.AUDIO_NOT_REGISTERED, \"\");\n            return null;\n        }\n    };\n\n    /**\n     * Clone of original track\n     * @param {string} name \n     * @returns {HTMLAudioElement | null}\n     */\n    getAudioCloned = (name) => {\n        const audio = this.#audio.get(name);\n        if (audio === null) {\n            Warning(WARNING_CODES.AUDIO_NOT_LOADED, \"Audio with key \" + name + \" exists, but not actually loaded\");\n            return audio;\n        }\n        if (audio) {\n            const audioCloned = audio.cloneNode();\n            audioCloned.volume = this.#volume;\n            return audioCloned;\n        } else {\n            Warning(WARNING_CODES.AUDIO_NOT_REGISTERED);\n            return null;\n        }\n    };\n\n    set volume(value) {\n        this.#volume = value;\n        this.#updateTracksVolumes(value);\n    }\n    /**\n     * Used to set or get audio volume, \n     * value should be from 0 to 1\n     * @type {number}\n     */\n    get volume() {\n        return this.#volume;\n    }\n\n    #updateTracksVolumes(value) {\n        for (const track of this.#audio.values()) {\n            if (track) {\n                track.volume = value;\n            }\n        }\n    }\n\n    /**\n     * Register audio in the iSystem\n     * @param {string} name\n     */\n    registerAudio(name) {\n        let mediaElement = this.#loaderReference.getAudio(name);\n        this.#audio.set(name, mediaElement);\n    }\n}","import { SystemSettings } from \"../configs.js\";\nimport { CONST } from \"../constants.js\";\n\nexport class Logger {\n    static debug(...args) {\n        if (SystemSettings.mode === CONST.MODE.DEBUG)\n            args.forEach(message => console.log(message));\n    }\n}","import { SystemSettings } from \"../configs.js\";\r\nimport { GameStageData } from \"./GameStageData.js\";\r\nimport { CONST } from \"../constants.js\";\r\nimport { Warning } from \"./Exception.js\";\r\nimport { WARNING_CODES } from \"../constants.js\";\r\n\r\nimport { DrawTiledLayer } from \"./2d/DrawTiledLayer.js\";\r\nimport { DrawImageObject } from \"./2d/DrawImageObject.js\";\r\nimport { DrawCircleObject } from \"./2d/DrawCircleObject.js\";\r\nimport { DrawConusObject } from \"./2d/DrawConusObject.js\";\r\nimport { DrawLineObject } from \"./2d/DrawLineObject.js\";\r\nimport { DrawPolygonObject } from \"./2d/DrawPolygonObject.js\";\r\nimport { DrawRectObject } from \"./2d/DrawRectObject.js\";\r\nimport { DrawTextObject } from \"./2d/DrawTextObject.js\";\r\nimport { WebGlEngine } from \"./WebGl/WebGlEngine.js\";\r\nimport { RenderLoopDebug } from \"./RenderLoopDebug.js\";\r\n\r\nimport { utils } from \"../index.js\";\r\n/**\r\n * Class represents the render loop,\r\n * on each time stage start, a new RenderLoop class instance created,\r\n * after stage stop, RenderLoop stops and its instance removed\r\n * @see {@link IRender} a part of iRender\r\n * @hideconstructor\r\n */\r\nexport class RenderLoop {\r\n    /**\r\n     * @type {boolean}\r\n     */\r\n    #isActive;\r\n    /**\r\n     * @type {boolean}\r\n     */\r\n    #isCleared;\r\n    /**\r\n     * @type {RenderLoopDebug}\r\n     */\r\n    #renderLoopDebug;\r\n    #fpsAverageCountTimer;\r\n    /**\r\n     * \r\n     * @param {GameStageData} stageData \r\n     */\r\n    #stageData;\r\n    /**\r\n     * @param { WebGlEngine }\r\n     */\r\n    #webGlEngine;\r\n    /**\r\n     * \r\n     * @param {SystemSettings} systemSettings\r\n     */\r\n    #systemSettings;\r\n    /**\r\n     * @type {EventTarget}\r\n     */\r\n    #emitter = new EventTarget();\r\n    constructor(systemSettings, stageData, WebGlEngine) {\r\n        this.#systemSettings = systemSettings;\r\n        this.#stageData = stageData;\r\n        this.#renderLoopDebug = new RenderLoopDebug(this.#systemSettings.gameOptions.render.cyclesTimeCalc.averageFPStime);\r\n        this.#webGlEngine = WebGlEngine;\r\n\r\n        this.#webGlEngine._initDrawCallsDebug(this.renderLoopDebug);\r\n        \r\n        if (this.#systemSettings.gameOptions.render.cyclesTimeCalc.check === CONST.OPTIMIZATION.CYCLE_TIME_CALC.AVERAGES) {\r\n            this.#fpsAverageCountTimer = setInterval(() => this.#countFPSaverage(), this.#systemSettings.gameOptions.render.cyclesTimeCalc.averageFPStime);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @type { GameStageData }\r\n     */\r\n    get stageData() {\r\n        return this.#stageData;\r\n    }\r\n\r\n    /**\r\n     * @type { RenderLoopDebug }\r\n     */\r\n    get renderLoopDebug() {\r\n        return this.#renderLoopDebug;\r\n    }\r\n    \r\n    /**\r\n     * @ignore\r\n     */\r\n    set _isCleared(value) {\r\n        this.#isCleared = value;\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     */\r\n    get _isCleared() {\r\n        return this.#isCleared;\r\n    }\r\n\r\n    _start() {\r\n        this.#isActive = true;\r\n        requestAnimationFrame(this.#runRenderLoop);\r\n    }\r\n\r\n    _stop() {\r\n        this.#isActive = false;\r\n        this.#stageData = null;\r\n        this.renderLoopDebug.cleanupTempVars();\r\n        clearInterval(this.#fpsAverageCountTimer);\r\n        //this.#fpsAverageCountTimer = null;\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param {Number} drawTimestamp - end time of previous frame's rendering \r\n     */\r\n    #runRenderLoop = (drawTimestamp) => {\r\n        if (!this.#isActive) {\r\n            return;\r\n        }\r\n        \r\n        const currentDrawTime = this.renderLoopDebug.currentDrawTime(drawTimestamp);\r\n        this.renderLoopDebug.prevDrawTime = drawTimestamp;\r\n        \r\n        const timeStart = performance.now(),\r\n            isCyclesTimeCalcCheckCurrent = this.#systemSettings.gameOptions.render.cyclesTimeCalc.check === CONST.OPTIMIZATION.CYCLE_TIME_CALC.CURRENT;\r\n            \r\n        this.emit(CONST.EVENTS.SYSTEM.RENDER.START);\r\n        this.#stageData._clearBoundaries();\r\n        this.#clearContext();\r\n        \r\n        this.render().then(() => {\r\n            const currentRenderTime = performance.now() - timeStart,\r\n                //r_time_less = minCycleTime - currentRenderTime,\r\n                wait_time = 0, // нужна ли вообще возможность контролировать время отрисовки?\r\n                cycleTime = currentRenderTime + wait_time;\r\n                \r\n            if (isCyclesTimeCalcCheckCurrent) {\r\n                console.log(\"current draw take: \", (currentDrawTime), \" ms\");\r\n                console.log(\"current render() time: \", currentRenderTime);\r\n                console.log(\"draw calls: \", this.renderLoopDebug.drawCalls);\r\n                console.log(\"vertices draw: \", this.renderLoopDebug.verticesDraw);\r\n            } else {\r\n                this.renderLoopDebug.tempRCircleT = currentDrawTime;\r\n                this.renderLoopDebug.incrementTempRCircleTPointer();\r\n            }\r\n\r\n            this.emit(CONST.EVENTS.SYSTEM.RENDER.END);\r\n\r\n            if (this.#isActive) {\r\n                setTimeout(() => requestAnimationFrame(this.#runRenderLoop), wait_time);\r\n            }\r\n        }).catch((errors) => {\r\n            if (errors.forEach) {\r\n                errors.forEach((err) => {\r\n                    Warning(WARNING_CODES.UNHANDLED_DRAW_ISSUE, err);\r\n                });\r\n            } else {\r\n                Warning(WARNING_CODES.UNHANDLED_DRAW_ISSUE, errors.message);\r\n            }\r\n            this._stop();\r\n        });\r\n    };\r\n\r\n    /**\r\n     * @returns {Promise<void>}\r\n     */\r\n    async render() {\r\n        const renderObjects = this.#stageData.renderObjects;\r\n            \r\n        let errors = [],\r\n            isErrors = false,\r\n            len = renderObjects.length,\r\n            renderObjectsPromises = new Array(len),\r\n            // for v1.5.2, each object has its own render method\r\n            drawCalls = len;\r\n\r\n        if (len !== 0) {\r\n            //this.#checkCollisions(view.renderObjects);\r\n            for (let i = 0; i < len; i++) {\r\n                const object = renderObjects[i];\r\n                if (object.isRemoved) {\r\n                    renderObjects.splice(i, 1);\r\n                    i--;\r\n                    len--;\r\n                    continue;\r\n                }\r\n                if (object.hasAnimations) {\r\n                    object._processActiveAnimations();\r\n                }\r\n                const promise = await this.#bindRenderObject(object)\r\n                    .catch((err) => Promise.reject(err));\r\n                renderObjectsPromises[i] = promise;\r\n            }\r\n            if (this.#systemSettings.gameOptions.debug.boundaries.drawLayerBoundaries) {\r\n                renderObjectsPromises.push(this.#drawBoundariesWebGl()\r\n                    .catch((err) => Promise.reject(err))); \r\n            }\r\n            //const bindResults = await Promise.allSettled(renderObjectsPromises);\r\n            //bindResults.forEach((result) => {\r\n            //    if (result.status === \"rejected\") {\r\n            //        reject(result.reason);\r\n            //    }\r\n            //});\r\n\r\n            //await this.#webGlEngine._executeImagesDraw();\r\n\r\n            //this.#postRenderActions();\r\n        }\r\n        const bindResults = await Promise.allSettled(renderObjectsPromises);\r\n        bindResults.forEach((result) => {\r\n            if (result.status === \"rejected\") {\r\n                Promise.reject(result.reason);\r\n                isErrors = true;\r\n                errors.push(result.reason);\r\n            }\r\n        });\r\n\r\n        this.#postRenderActions();\r\n            \r\n        this._isCleared = false;\r\n        if (isErrors === false) {\r\n            return Promise.resolve(drawCalls);\r\n        } else {\r\n            return Promise.reject(errors);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param {string} eventName \r\n     * @param {*} listener \r\n     * @param {*=} options \r\n     */\r\n    addEventListener = (eventName, listener, options) => {\r\n        this.#emitter.addEventListener(eventName, listener, options);\r\n    };\r\n\r\n    /**\r\n     * \r\n     * @param {string} eventName \r\n     * @param {*} listener \r\n     * @param {*=} options \r\n     */\r\n    removeEventListener = (eventName, listener, options) => {\r\n        this.#emitter.removeEventListener(eventName, listener, options);\r\n    };\r\n\r\n    /**\r\n     * \r\n     * @param {string} eventName\r\n     * @param  {...any} eventParams\r\n     */\r\n    emit = (eventName, ...eventParams) => {\r\n        const event = new Event(eventName);\r\n        event.data = [...eventParams];\r\n        this.#emitter.dispatchEvent(event);\r\n    };\r\n\r\n    /**\r\n     * @ignore\r\n     * @param {DrawImageObject | DrawCircleObject | DrawConusObject | DrawLineObject | DrawPolygonObject | DrawRectObject | DrawTextObject | DrawTiledLayer} renderObject \r\n     * @returns {Promise<void>}\r\n     */\r\n    #bindRenderObject(renderObject) {\r\n        return this.#webGlEngine._bindRenderObject(renderObject, this.stageData);\r\n    }\r\n\r\n    #clearContext() {\r\n        this.#webGlEngine._clearView();\r\n    }\r\n    #postRenderActions() {\r\n        //const images = this.stageData.getObjectsByInstance(DrawImageObject);\r\n        //for (let i = 0; i < images.length; i++) {\r\n        //    const object = images[i];\r\n        //    if (object.isAnimations) {\r\n        //        object._processActiveAnimations();\r\n        //    }\r\n        //}\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @returns {Promise<void>}\r\n     */\r\n    #drawBoundariesWebGl() {\r\n        return new Promise((resolve) => {\r\n            const b = this.stageData.getRawBoundaries(),\r\n                eB = this.stageData.getEllipseBoundaries(),\r\n                pB = this.stageData.getPointBoundaries(),\r\n                len = this.stageData.boundariesLen,\r\n                eLen = this.stageData.ellipseBLen,\r\n                pLen = this.stageData.pointBLen;\r\n        \r\n            if (len)\r\n                this.#webGlEngine._drawLines(b, this.#systemSettings.gameOptions.debug.boundaries.boundariesColor, this.#systemSettings.gameOptions.debug.boundaries.boundariesWidth);\r\n            this.renderLoopDebug.incrementDrawCallsCounter();\r\n            if (eLen) {\r\n                //draw ellipse boundaries\r\n                for (let i = 0; i < eLen; i+=4) {\r\n                    const x = eB[i],\r\n                        y = eB[i+1],\r\n                        radX = eB[i+2],\r\n                        radY = eB[i+3],\r\n                        vertices = utils.calculateEllipseVertices(x, y, radX, radY);\r\n                    this.#webGlEngine._drawPolygon({x: 0, y: 0, vertices, isOffsetTurnedOff: true}, this.stageData);\r\n                    this.renderLoopDebug.incrementDrawCallsCounter();\r\n                    //this.#webGlEngine._drawLines(vertices, this.systemSettings.gameOptions.debug.boundaries.boundariesColor, this.systemSettings.gameOptions.debug.boundaries.boundariesWidth);\r\n                }\r\n            }\r\n            if (pLen) {\r\n                //draw point boundaries\r\n                for (let i = 0; i < pLen; i+=2) {\r\n                    const x = pB[i],\r\n                        y = pB[i+1],\r\n                        vertices = [x,y, x+1,y+1];\r\n\r\n                    this.#webGlEngine._drawLines(vertices, this.#systemSettings.gameOptions.debug.boundaries.boundariesColor, this.#systemSettings.gameOptions.debug.boundaries.boundariesWidth);\r\n                    this.renderLoopDebug.incrementDrawCallsCounter();\r\n                }\r\n            }\r\n            resolve();\r\n        });\r\n    }\r\n\r\n    \r\n    /**\r\n     * \r\n     * @param {DrawTiledLayer} renderLayer \r\n     * @returns {Promise<void>}\r\n     */\r\n    #layerBoundariesPrecalculation(renderLayer) {\r\n        return new Promise((resolve, reject) => {\r\n            /*\r\n            if (renderLayer.setBoundaries) {\r\n                const tilemap = this.#iLoader.getTileMap(renderLayer.tileMapKey),\r\n                    tilesets = tilemap.tilesets,\r\n                    layerData = tilemap.layers.find((layer) => layer.name === renderLayer.layerKey),\r\n                    { tileheight:dtheight, tilewidth:dtwidth } = tilemap,\r\n                    tilewidth = dtwidth,\r\n                    tileheight = dtheight,\r\n                    [ settingsWorldWidth, settingsWorldHeight ] = this.stageData.worldDimensions;\r\n                \r\n                let boundaries = [];\r\n\r\n                if (!layerData) {\r\n                    Warning(WARNING_CODES.NOT_FOUND, \"check tilemap and layers name\");\r\n                    reject();\r\n                }\r\n                \r\n                for (let i = 0; i < tilesets.length; i++) {\r\n                    const layerCols = layerData.width,\r\n                        layerRows = layerData.height,\r\n                        worldW = tilewidth * layerCols,\r\n                        worldH = tileheight * layerRows;\r\n\r\n                    if (worldW !== settingsWorldWidth || worldH !== settingsWorldHeight) {\r\n                        Warning(WARNING_CODES.UNEXPECTED_WORLD_SIZE, \" World size from tilemap is different than settings one, fixing...\");\r\n                        this.stageData._setWorldDimensions(worldW, worldH);\r\n                    }\r\n                    \r\n                    if (renderLayer.setBoundaries && this.#systemSettings.gameOptions.render.boundaries.mapBoundariesEnabled) {\r\n                        this.stageData._setWholeWorldMapBoundaries();\r\n                    }\r\n\r\n                    //calculate boundaries\r\n                    let mapIndex = 0;\r\n\r\n                    for (let row = 0; row < layerRows; row++) {\r\n                        for (let col = 0; col < layerCols; col++) {\r\n                            let tile = layerData.data[mapIndex],\r\n                                mapPosX = col * tilewidth,\r\n                                mapPosY = row * tileheight;\r\n                            if (tile !== 0) {\r\n                                tile -= 1;\r\n                                \r\n                                boundaries.push([mapPosX, mapPosY, mapPosX + tilewidth, mapPosY]);\r\n                                boundaries.push([mapPosX + tilewidth, mapPosY, mapPosX + tilewidth, mapPosY + tileheight]);\r\n                                boundaries.push([mapPosX + tilewidth, mapPosY + tileheight, mapPosX, mapPosY + tileheight]);\r\n                                boundaries.push([mapPosX, mapPosY + tileheight, mapPosX, mapPosY ]);\r\n    \r\n                            }\r\n                            mapIndex++;\r\n                        }\r\n                    }\r\n                }\r\n                this.stageData._setWholeMapBoundaries(boundaries);\r\n                this.stageData._mergeBoundaries(true);\r\n                resolve();\r\n            } else {\r\n                resolve();\r\n            }*/\r\n        });\r\n    }\r\n\r\n    #countFPSaverage() {\r\n        const timeLeft = this.#systemSettings.gameOptions.render.cyclesTimeCalc.averageFPStime,\r\n            steps = this.renderLoopDebug.tempRCircleTPointer;\r\n        let fullTime = 0;\r\n        for (let i = 0; i < steps; i++) {\r\n            const timeStep = this.renderLoopDebug.tempRCircleT[i];\r\n            fullTime += timeStep;\r\n        }\r\n        console.log(\"FPS average for\", timeLeft/1000, \"sec, is \", (1000 / (fullTime / steps)).toFixed(2));\r\n        console.log(\"Last loop info:\");\r\n        console.log(\"Webgl draw calls: \", this.renderLoopDebug.drawCalls);\r\n        console.log(\"Vertices draw: \", this.renderLoopDebug.verticesDraw);\r\n        // cleanup\r\n        this.renderLoopDebug.cleanupTempVars();\r\n    }\r\n}","/**\n * Debug info fro RenderLoop\n * @see {@link RenderLoop} a part of RenderLoop\n * @hideconstructor\n */\nexport class RenderLoopDebug {\n    /**\n     * @type {number}\n     */\n    #verticesNum = 0;\n    /**\n     * @type {number}\n     */\n    #drawCalls = 0;\n    /**\n     * @type {number}\n     */\n    #prevDrawTime = 0;\n    /**\n     * @type {Float32Array}\n     */\n    #tempRCircleT;\n    /**\n     * @type {number}\n     */\n    #tempRCircleTPointer = 0;\n    /**\n     * @type {NodeJS.Timeout | null}\n     */\n    constructor(averageFPStime) {\n        this.#tempRCircleT = new Float32Array(averageFPStime);\n    }\n\n    get drawCalls() {\n        return this.#drawCalls;\n    }\n\n    get verticesDraw() {\n        return this.#verticesNum;\n    }\n\n    /**\n     * @returns {Float32Array}\n     */\n    get tempRCircleT() {\n        return this.#tempRCircleT;\n    }\n\n    get tempRCircleTPointer() {\n        return this.#tempRCircleTPointer;\n    }\n\n    /**\n     * @param {number} time\n     */\n    set tempRCircleT(time) {\n        this.#tempRCircleT[this.#tempRCircleTPointer] = time;\n    }\n\n    set prevDrawTime(drawTime) {\n        this.#prevDrawTime = drawTime;\n    }\n\n    currentDrawTime(drawTimestamp) {\n        return drawTimestamp - this.#prevDrawTime;\n    }\n\n    incrementTempRCircleTPointer() {\n        this.#tempRCircleTPointer++;\n    }\n\n    incrementDrawCallsCounter() {\n        this.#drawCalls+=1;\n    }\n\n    set verticesDraw(vertices) {\n        this.#verticesNum += vertices;\n    }\n\n    cleanupDebugInfo() {\n        this.#verticesNum = 0;\n        this.#drawCalls = 0;\n    }\n\n    cleanupDrawCallsCounter() {\n        this.#drawCalls = 0;\n    }\n\n    cleanupTempVars() {\n        this.#tempRCircleT.fill(0);\n        this.#tempRCircleTPointer = 0;\n    }\n}","import { ERROR_CODES } from \"../constants.js\";\nimport { Exception } from \"./Exception.js\";\nimport { GameStage } from \"./GameStage.js\";\nimport { ISystem } from \"./ISystem.js\";\nimport { SystemSettings } from \"../configs.js\";\n\nimport { LoadingStage } from \"../design/LoadingStage.js\";\n\nconst loadingPageName = \"loadingPage\";\n/**\n * A main app class, <br>\n * Holder class for GameStage,<br>\n * can register new GameStages,<br>\n * init and preload data for them,<br>\n */\nexport class System {\n    /**\n     * @type {Map<string, GameStage>}\n     */\n    #registeredStages;\n    /**\n     * @type {ISystem}\n     */\n    #iSystem;\n    /**\n     * @param {SystemSettings} iSystemSettings - holds iSystem settings\n     * @param {HTMLElement | null} [canvasContainer = null] - If it is not passed, iSystem will create div element and attach it to body\n     */\n    constructor(iSystemSettings, canvasContainer) {\n        if (!iSystemSettings) {\n            Exception(ERROR_CODES.CREATE_INSTANCE_ERROR, \"iSystemSettings should be passed to class instance\");\n        }\n        this.#registeredStages = new Map();\n\n        if (!canvasContainer) {\n            canvasContainer = document.createElement(\"div\");\n            document.body.appendChild(canvasContainer);\n        }\n\n        this.#iSystem = new ISystem(iSystemSettings, this.#registeredStages, canvasContainer);\n\n        this.registerStage(loadingPageName, LoadingStage);\n\n        this.#iSystem.iLoader.addEventListener(\"loadstart\", this.#loadStart);\n        this.#iSystem.iLoader.addEventListener(\"progress\", this.#loadProgress);\n        this.#iSystem.iLoader.addEventListener(\"load\", this.#loadComplete);\n    }\n\n    /**\n     * @type {ISystem}\n     */\n    get iSystem() {\n        return this.#iSystem;\n    }\n\n    /**\n     * A main factory method for create GameStage instances, <br>\n     * register them in a System and call GameStage.register() stage\n     * @param {string} screenPageName\n     * @param {GameStage} stage\n     */\n    registerStage(screenPageName, stage) {\n        if (screenPageName && typeof screenPageName === \"string\" && screenPageName.trim().length > 0) {\n            const stageInstance = new stage();\n            stageInstance._register(screenPageName, this.iSystem);\n            this.#registeredStages.set(screenPageName, stageInstance);\n        } else {\n            Exception(ERROR_CODES.CREATE_INSTANCE_ERROR, \"valid class name should be provided\");\n        }\n    }\n\n    /**\n     * Preloads assets for all registered pages\n     * @return {Promise<void>}\n     */\n    preloadAllData() {\n        return this.#iSystem.iLoader.preload();\n    }\n\n    #loadStart = (event) => {\n        this.#iSystem.startGameStage(loadingPageName, {total: event.total});\n    };\n\n    #loadProgress = (event) => {\n        const uploaded = event.loaded,\n            left = event.total,\n            loadingPage = this.#registeredStages.get(loadingPageName);\n            \n        loadingPage._progress(uploaded, left);\n    };\n\n    #loadComplete = () => {\n        this.#iSystem.stopGameStage(loadingPageName);\n    };\n}","/**\n * storing current WebGLTexture\n */\nexport class ImageTempStorage {\n    /**\n     * @type {Number}\n     */\n    #textureIndex;\n    /**\n     * @type {WebGLTexture}\n     */\n    #texture;\n    /**\n     * @type {boolean}\n     */\n    #isTextureRecalculated = true;\n    constructor(texture, textureIndex = 0) {\n        this.#texture = texture;\n        this.#textureIndex = textureIndex;\n    }\n\n    get _isTextureRecalculated() {\n        return this.#isTextureRecalculated;\n    }\n\n    set _isTextureRecalculated(value) {\n        this.#isTextureRecalculated = value;\n    }\n\n    get _texture() {\n        return this.#texture;\n    }\n\n    set _texture(value) {\n        this.#texture = value;\n    }\n\n    get _textureIndex() {\n        return this.#textureIndex;\n    }\n}","/**\n * storing vectors and textures for DrawTiledLayer\n */\nexport class TiledLayerTempStorage {\n    /**\n     * @type {Float32Array}\n     */\n    #vectors;\n    /**\n     * @type {Float32Array}\n     */\n    #textures;\n    /**\n     * @type {Int32Array}\n     */\n    #boundariesTempIndexes;\n    /**\n     * @type {number}\n     */\n    #bufferSize = 0;\n    /**\n     * @param {number} cells \n     **/\n    #cells = 0;\n    /**\n     * @param {number} nonEmptyCells \n     */\n    #nonEmptyCells = 0;\n    constructor(cells, nonEmptyCells) {\n        this._initiateStorageData(cells, nonEmptyCells);\n    }\n\n    get cells() {\n        return this.#cells;\n    }\n\n    get vectors() {\n        return this.#vectors;\n    }\n\n    get textures() {\n        return this.#textures;\n    }\n\n    get _bTempIndexes() {\n        return this.#boundariesTempIndexes;\n    }\n\n    get bufferSize() {\n        return this.#bufferSize;\n    }\n\n    _initiateStorageData(cellsSize, emptyCells) {\n        this.#cells = cellsSize;\n        this.#nonEmptyCells = emptyCells ? emptyCells : cellsSize;\n        if (this.#nonEmptyCells > cellsSize) {\n            this.#nonEmptyCells  = cellsSize;\n        }\n        this.#bufferSize = this.#nonEmptyCells * 12;\n\n        this.#vectors = new Float32Array(this.#bufferSize);\n        this.#textures = new Float32Array(this.#bufferSize);\n        this.#boundariesTempIndexes = new Int32Array(this.#cells * 4);\n    }\n}","const imgVertexShader =  `\n    attribute vec2 a_texCoord;\n\n    attribute vec2 a_position;\n\n    uniform vec2 u_translation;\n    uniform float u_rotation;\n    uniform vec2 u_scale;\n\n    uniform vec2 u_resolution;\n\n    varying vec2 v_texCoord;\n\n    void main(void) {\n        float c = cos(u_rotation);\n        float s = sin(u_rotation);\n\n        mat3 translationMatrix1 = mat3(\n            1, 0, 0,\n            0, 1, 0,\n            u_translation.x, u_translation.y, 1\n        );\n\n        mat3 translationMatrix2 = mat3(\n            1, 0, 0,\n            0, 1, 0,\n            -u_translation.x, -u_translation.y, 1\n        );\n        \n        mat3 rotationMatrix = mat3(\n            c, s, 0,\n            -s, c, 0,\n            0, 0, 1\n        );\n\n        mat3 scalingMatrix = mat3(\n            u_scale.x, 0, 0,\n            0, u_scale.y, 0,\n            0, 0, 1\n        );\n\n        mat3 matrix = translationMatrix1 * rotationMatrix * translationMatrix2 * scalingMatrix;\n    \n        vec2 position = (matrix * vec3(a_position, 1)).xy;\n\n        vec2 clipSpace = position / u_resolution * 2.0 - 1.0;\n\n        gl_Position = vec4(clipSpace * vec2(1, -1), 0, 1);\n        \n        v_texCoord = a_texCoord;\n    }`;\nconst imgFragmentShader = `\n    precision mediump float;\n\n    uniform sampler2D u_image;\n\n    //texCoords passed in from the vertex shader\n    varying vec2 v_texCoord;\n    void main() {\n        vec4 color = texture2D(u_image, v_texCoord);\n        gl_FragColor = color;\n    }`;\nconst imgUniforms = [\"u_translation\", \"u_rotation\", \"u_scale\", \"u_resolution\",\"u_image\"];\nconst imgAttributes = [\"a_position\", \"a_texCoord\"];\n\nexport {imgVertexShader, imgFragmentShader, imgUniforms, imgAttributes};","const primitivesVertexShader =  `\n    precision mediump float;\n\n    attribute vec2 a_position;\n\n    uniform vec2 u_translation;\n    uniform float u_rotation;\n    uniform vec2 u_scale;\n\n    uniform vec2 u_resolution;\n\n    void main(void) {\n        float c = cos(u_rotation);\n        float s = sin(u_rotation);\n\n        mat3 translationMatrix1 = mat3(\n            1, 0, 0,\n            0, 1, 0,\n            u_translation.x, u_translation.y, 1\n        );\n\n        //mat3 translationMatrix2 = mat3(\n        //    1, 0, 0,\n        //    0, 1, 0,\n        //    -u_translation.x, -u_translation.y, 1\n        //);\n        \n        mat3 rotationMatrix = mat3(\n            c, s, 0,\n            -s, c, 0,\n            0, 0, 1\n        );\n\n        mat3 scalingMatrix = mat3(\n            u_scale.x, 0, 0,\n            0, u_scale.y, 0,\n            0, 0, 1\n        );\n        \n        mat3 matrix = translationMatrix1 * rotationMatrix * scalingMatrix;\n\n        vec2 position = (matrix * vec3(a_position, 1)).xy;\n\n        vec2 clipSpace = position / u_resolution * 2.0 - 1.0;\n\n        gl_Position = vec4(clipSpace * vec2(1, -1), 0, 1);\n    }\n`;\nconst primitivesFragmentShader = `\n    precision mediump float;\n\n    uniform vec4 u_color;\n    uniform float u_fade_min; \n    uniform float u_fade_max;\n    uniform vec2 u_resolution;\n    uniform vec2 u_translation;\n\n    void main(void) {\n        vec4 p = u_color;\n        if (u_fade_min > 0.0) {\n            vec2 fix_tr = vec2(u_translation.x, u_resolution.y - u_translation.y); \n            float distance = distance(fix_tr.xy, gl_FragCoord.xy);\n            if (u_fade_min <= distance && distance <= u_fade_max) {\n                float percent = ((distance - u_fade_max) / (u_fade_min - u_fade_max)) * 100.0;\n                p.a = u_color.a * (percent / 100.0);\n            }\n        }\n\n        gl_FragColor = p;\n    }\n`;\nconst primitivesUniforms = [\"u_translation\", \"u_rotation\", \"u_scale\", \"u_resolution\", \"u_fade_min\", \"u_fade_max\", \"u_color\"];\nconst primitivesAttributes = [\"a_position\"];\n\nexport { primitivesVertexShader, primitivesFragmentShader, primitivesUniforms, primitivesAttributes };","import { ERROR_CODES, CONST, WARNING_CODES } from \"../../constants.js\";\r\nimport { crossProduct } from \"../../utils.js\";\r\nimport { Exception, Warning } from \"../Exception.js\";\r\nimport { GameStageData } from \"../GameStageData.js\";\r\nimport { ImageTempStorage } from \"../Temp/ImageTempStorage.js\";\r\n\r\nimport { DrawTiledLayer } from \"../2d/DrawTiledLayer.js\";\r\nimport { DrawCircleObject } from \"../2d/DrawCircleObject.js\";\r\nimport { DrawConusObject } from \"../2d/DrawConusObject.js\";\r\nimport { DrawLineObject } from \"../2d/DrawLineObject.js\";\r\nimport { DrawPolygonObject } from \"../2d/DrawPolygonObject.js\";\r\nimport { DrawRectObject } from \"../2d/DrawRectObject.js\";\r\nimport { DrawTextObject } from \"../2d/DrawTextObject.js\";\r\n\r\nimport AssetsManager from \"../../../modules/assetsm/dist/assetsm.min.js\";\r\n\r\nexport class WebGlEngine {\r\n    /**\r\n     * @type {WebGLRenderingContext}\r\n     */\r\n    #gl;\r\n    /**\r\n     * @type {number}\r\n     */\r\n    #MAX_TEXTURES;\r\n    /**\r\n     * @type {boolean}\r\n     */\r\n    #debug;\r\n    /**\r\n     * @type {Object}\r\n     */\r\n    #gameOptions;\r\n    /**\r\n     * @type {AssetsManager}\r\n     */\r\n    #loaderReference;\r\n    /**\r\n     * @type {WebGLBuffer | null}\r\n     */\r\n    #positionBuffer;\r\n    /**\r\n     * @type {WebGLBuffer | null}\r\n     */\r\n    #texCoordBuffer;\r\n\r\n    /**\r\n     * @type {Map<string, WebGLProgram}\r\n     */\r\n    #registeredWebGlPrograms = new Map();\r\n    /**\r\n     * @type {Map<string, Object<string, WebGLUniformLocation | number>>}\r\n     */\r\n    #webGlProgramsVarsLocations = new Map();\r\n\r\n    #registeredRenderObjects = new Map();\r\n\r\n    #loopDebug;\r\n\r\n    constructor(context, gameOptions, iLoader) {\r\n        if (!context || !(context instanceof WebGLRenderingContext)) {\r\n            Exception(ERROR_CODES.UNEXPECTED_INPUT_PARAMS, \" context parameter should be specified and equal to WebGLRenderingContext\");\r\n        }\r\n        \r\n        this.#gl = context;\r\n        this.#gameOptions = gameOptions;\r\n        this.#loaderReference = iLoader;\r\n        this.#debug = gameOptions.debug.checkWebGlErrors;\r\n        this.#MAX_TEXTURES = context.getParameter(context.MAX_TEXTURE_IMAGE_UNITS);\r\n        this.#positionBuffer = context.createBuffer();\r\n        this.#texCoordBuffer = context.createBuffer();\r\n\r\n        this._registerObjectRender(DrawTextObject.name, this._bindText, CONST.WEBGL.DRAW_PROGRAMS.IMAGES);\r\n        this._registerObjectRender(DrawRectObject.name, this._bindPrimitives, CONST.WEBGL.DRAW_PROGRAMS.PRIMITIVES);\r\n        this._registerObjectRender(DrawPolygonObject.name, this._bindPrimitives, CONST.WEBGL.DRAW_PROGRAMS.PRIMITIVES);\r\n        this._registerObjectRender(DrawCircleObject.name, this._bindConus, CONST.WEBGL.DRAW_PROGRAMS.PRIMITIVES);\r\n        this._registerObjectRender(DrawConusObject.name, this._bindConus, CONST.WEBGL.DRAW_PROGRAMS.PRIMITIVES);\r\n        this._registerObjectRender(DrawTiledLayer.name, this._bindTileImages, CONST.WEBGL.DRAW_PROGRAMS.IMAGES);\r\n        this._registerObjectRender(DrawLineObject.name, this._bindLine, CONST.WEBGL.DRAW_PROGRAMS.PRIMITIVES);\r\n    }\r\n\r\n    getProgram(name) {\r\n        return this.#registeredWebGlPrograms.get(name);\r\n    }\r\n\r\n    getProgramVarLocations(name) {\r\n        return this.#webGlProgramsVarsLocations.get(name);\r\n    }\r\n\r\n    _fixCanvasSize(width, height) {\r\n        this.#gl.viewport(0, 0, width, height);\r\n    }\r\n    _initiateJsRender = (stageData) => {\r\n        return new Promise((resolve, reject) => {\r\n            const tileLayers = stageData.getObjectsByInstance(DrawTiledLayer),\r\n                [ settingsWorldWidth, settingsWorldHeight ] = stageData.worldDimensions;\r\n\r\n            // count max possible boundaries sizes\r\n            let maxBSize = 0,\r\n                maxESize = 0,\r\n                maxPSize = 0,\r\n                maxWorldW = 0,\r\n                maxWorldH = 0;\r\n\r\n            tileLayers.forEach(tiledLayer => {\r\n                const setBoundaries = tiledLayer.setBoundaries,\r\n                    layerData = tiledLayer.layerData,\r\n                    tilemap = tiledLayer.tilemap,\r\n                    tilesets = tiledLayer.tilesets,\r\n                    { tileheight:dtheight, tilewidth:dtwidth } = tilemap,\r\n                    tilewidth = dtwidth,\r\n                    tileheight = dtheight;\r\n\r\n                for (let i = 0; i < tilesets.length; i++) {\r\n                    const layerCols = layerData.width,\r\n                        layerRows = layerData.height,\r\n                        worldW = tilewidth * layerCols,\r\n                        worldH = tileheight * layerRows;\r\n                        \r\n                    const polygonBondMax = layerData.polygonBoundariesLen,\r\n                        ellipseBondMax = layerData.ellipseBoundariesLen,\r\n                        pointBondMax = layerData.pointBoundariesLen; \r\n    \r\n                    if (maxWorldW < worldW) {\r\n                        maxWorldW = worldW;\r\n                    }\r\n                    if (maxWorldH < worldH) {\r\n                        maxWorldH = worldH;\r\n                    }\r\n                    \r\n                    if (setBoundaries) {\r\n                        maxBSize += polygonBondMax;\r\n                        maxESize += ellipseBondMax;\r\n                        maxPSize += pointBondMax;\r\n    \r\n                        // boundaries cleanups every draw cycles, we need to set world boundaries again\r\n                        \r\n                    }\r\n                }\r\n            });\r\n\r\n            if (maxWorldW !== 0 && maxWorldH !== 0 && (maxWorldW !== settingsWorldWidth || maxWorldH !== settingsWorldHeight)) {\r\n                Warning(WARNING_CODES.UNEXPECTED_WORLD_SIZE, \" World size from tilemap is different than settings one, fixing...\");\r\n                stageData._setWorldDimensions(maxWorldW, maxWorldH);\r\n            }\r\n\r\n            if (this.#gameOptions.render.boundaries.mapBoundariesEnabled) {\r\n                maxBSize+=16; //4 sides * 4 cords x1,y1,x2,y,2\r\n            }\r\n            stageData._setMaxBoundariesSize(maxBSize, maxESize, maxPSize);\r\n            stageData._initiateBoundariesData();\r\n\r\n            resolve(true);\r\n        });\r\n\r\n    };\r\n    _initWebGlAttributes = () => {\r\n        const gl = this.#gl;\r\n        gl.enable(gl.BLEND);\r\n        gl.enable(gl.STENCIL_TEST);\r\n        gl.stencilFunc(gl.ALWAYS, 1, 0xFF);\r\n        //if stencil test and depth test pass we replace the initial value\r\n        gl.stencilOp(gl.KEEP, gl.KEEP, gl.REPLACE);\r\n        return Promise.resolve();\r\n    };\r\n\r\n    /**\r\n     * \r\n     * @returns {Promise<void>}\r\n     */\r\n    _initiateWasm = (stageData) => {\r\n        const url = this.#gameOptions.optimization === CONST.OPTIMIZATION.WEB_ASSEMBLY.NATIVE_WAT ? this.#gameOptions.optimizationWASMUrl : this.#gameOptions.optimizationAssemblyUrl;\r\n        return new Promise((resolve, reject) => {\r\n            this.layerData = new WebAssembly.Memory({\r\n                initial:1000 // 6.4MiB x 10 = 64MiB(~67,1Mb)\r\n            });\r\n            this.layerDataFloat32 = new Float32Array(this.layerData.buffer);\r\n            const importObject = {\r\n                env: {\r\n                    memory: this.layerData,\r\n                    logi: console.log,\r\n                    logf: console.log\r\n                }\r\n            };\r\n\r\n            fetch(url)\r\n                .then((response) => response.arrayBuffer())\r\n                .then((module) => WebAssembly.instantiate(module, importObject))\r\n                .then((obj) => {\r\n                    this.calculateBufferData = obj.instance.exports.calculateBufferData;\r\n                    resolve();\r\n                });\r\n        });\r\n    };\r\n\r\n    _initDrawCallsDebug(debugObjReference) {\r\n        this.#loopDebug = debugObjReference;\r\n    }\r\n\r\n    _clearView() {\r\n        const gl = this.#gl;\r\n        this.#loopDebug.cleanupDebugInfo();\r\n        //cleanup buffer, is it required?\r\n        //gl.bindBuffer(gl.ARRAY_BUFFER, null);\r\n        gl.clearColor(0, 0, 0, 0);// shouldn't be gl.clearColor(0, 0, 0, 1); ?\r\n        // Clear the color buffer with specified clear color\r\n        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT | gl.STENCIL_BUFFER_BIT);\r\n    }\r\n    \r\n    _render(verticesNumber, primitiveType, offset = 0) {\r\n        const gl = this.#gl,\r\n            err = this.#debug ? gl.getError() : 0;\r\n        if (err !== 0) {\r\n            console.error(err);\r\n            throw new Error(\"Error num: \" + err);\r\n        } else {\r\n            gl.drawArrays(primitiveType, offset, verticesNumber);\r\n            this.#loopDebug.incrementDrawCallsCounter();\r\n            this.#loopDebug.verticesDraw = verticesNumber;\r\n            // set blend to default\r\n            gl.stencilFunc(gl.ALWAYS, 1, 0xFF);\r\n        }\r\n        return new Promise((resolve, reject) => {\r\n            if (this.#gameOptions.debug.delayBetweenObjectRender) {\r\n                setTimeout(() => {\r\n                    resolve();\r\n                }, 1000);\r\n            } else {\r\n                resolve();\r\n            }\r\n        });\r\n    }\r\n\r\n    /*************************************\r\n     * Register and compile programs\r\n     ************************************/\r\n\r\n    /**\r\n     * \r\n     * @param {string} programName\r\n     * @param {string} vertexShader - raw vertex shader program\r\n     * @param {string} fragmentShader - raw fragment shader program \r\n     * @param {Array<string>} uVars - program uniform variables names\r\n     * @param {Array<string>} aVars - program attribute variables names\r\n     * @returns {Promise<void>}\r\n     */\r\n    _registerAndCompileWebGlProgram(programName, vertexShader, fragmentShader, uVars, aVars) {\r\n        const program = this.#compileWebGlProgram(vertexShader, fragmentShader),\r\n            varsLocations = this.#getProgramVarsLocations(program, uVars, aVars);\r\n        this.#registeredWebGlPrograms.set(programName, program);\r\n        this.#webGlProgramsVarsLocations.set(programName, varsLocations);\r\n\r\n        return Promise.resolve();\r\n    }\r\n\r\n    /**\r\n     * @returns {WebGLProgram}\r\n     */\r\n    #compileWebGlProgram (vertexShader, fragmentShader) {\r\n        const gl = this.#gl,\r\n            program = gl.createProgram();\r\n\r\n        if (program) {\r\n            const compVertexShader = this.#compileShader(gl, vertexShader, gl.VERTEX_SHADER);\r\n            if (compVertexShader) {\r\n                gl.attachShader(program, compVertexShader);\r\n            } else {\r\n                Exception(ERROR_CODES.WEBGL_ERROR, \"#compileShader(vertexShaderSource) is null\");\r\n            }\r\n\r\n            const compFragmentShader = this.#compileShader(gl, fragmentShader, gl.FRAGMENT_SHADER);\r\n            if (compFragmentShader) {\r\n                gl.attachShader(program, compFragmentShader);\r\n            } else {\r\n                Exception(ERROR_CODES.WEBGL_ERROR, \"#compileShader(fragmentShaderSource) is null\");\r\n            }\r\n\r\n            gl.linkProgram(program);\r\n            if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\r\n                const info = gl.getProgramInfoLog(program);\r\n                Exception(ERROR_CODES.WEBGL_ERROR, `Could not compile WebGL program. \\n\\n${info}`);\r\n            }\r\n        } else {\r\n            Exception(ERROR_CODES.WEBGL_ERROR, \"gl.createProgram() is null\");\r\n        }\r\n        return program;\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param {WebGLProgram} program\r\n     * @param {Array<string>} uVars - uniform variables\r\n     * @param {Array<string>} aVars - attributes variables\r\n     * @returns {Object<string, WebGLUniformLocation | number>} - uniform or attribute\r\n     */\r\n    #getProgramVarsLocations(program, uVars, aVars) {\r\n        const gl = this.#gl;\r\n        let locations = {};\r\n        uVars.forEach(elementName => {\r\n            locations[elementName] = gl.getUniformLocation(program, elementName);\r\n        });\r\n        aVars.forEach(elementName => {\r\n            locations[elementName] = gl.getAttribLocation(program, elementName);\r\n        });\r\n        return locations;\r\n    }\r\n\r\n    #compileShader(gl, shaderSource, shaderType) {\r\n        const shader = gl.createShader(shaderType);\r\n        if (shader) {\r\n            gl.shaderSource(shader, shaderSource);\r\n            gl.compileShader(shader);\r\n\r\n            if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\r\n                const info = gl.getShaderInfoLog(shader);\r\n                Exception(ERROR_CODES.WEBGL_ERROR, \"Couldn't compile webGl program. \\n\\n\" + info);\r\n            }\r\n        } else {\r\n            Exception(ERROR_CODES.WEBGL_ERROR, `gl.createShader(${shaderType}) is null`);\r\n        }\r\n        return shader;\r\n    }\r\n    /*------------------------------------\r\n     * End of Register and compile programs\r\n     -------------------------------------*/\r\n\r\n    /**********************************\r\n     * Predefined Drawing programs\r\n     **********************************/\r\n    _bindPrimitives = (renderObject, gl, pageData, program, vars) => {\r\n        const [ xOffset, yOffset ] = renderObject.isOffsetTurnedOff === true ? [0,0] : pageData.worldOffset,\r\n            x = renderObject.x - xOffset,\r\n            y = renderObject.y - yOffset,\r\n            scale = [1, 1],\r\n            rotation = renderObject.rotation,\r\n            blend = renderObject.blendFunc ? renderObject.blendFunc : [gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA],\r\n            { \r\n                u_translation: translationLocation,\r\n                u_rotation: rotationRotation,\r\n                u_scale: scaleLocation,\r\n                u_resolution: resolutionUniformLocation,\r\n                u_color: colorUniformLocation,\r\n                a_position: positionAttributeLocation,\r\n                u_fade_min: fadeMinLocation\r\n            } = vars;\r\n            \r\n        let verticesNumber = 0;\r\n        gl.useProgram(program);\r\n        // set the resolution\r\n        gl.uniform2f(resolutionUniformLocation, gl.canvas.width, gl.canvas.height);\r\n        gl.uniform2f(translationLocation, x, y);\r\n        gl.uniform2f(scaleLocation, scale[0], scale[1]);\r\n        gl.uniform1f(rotationRotation, rotation);\r\n        gl.uniform1f(fadeMinLocation, 0);\r\n        \r\n        gl.enableVertexAttribArray(positionAttributeLocation);\r\n\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.#positionBuffer);\r\n\r\n        switch (renderObject.type) {\r\n        case CONST.DRAW_TYPE.RECTANGLE:\r\n            this.#setSingleRectangle(renderObject.width, renderObject.height);\r\n            verticesNumber += 6;\r\n            break;\r\n        case CONST.DRAW_TYPE.TEXT:\r\n            break;\r\n        case CONST.DRAW_TYPE.CIRCLE: {\r\n            const coords = renderObject.vertices;\r\n            gl.bufferData(gl.ARRAY_BUFFER, \r\n                new Float32Array(coords), gl.STATIC_DRAW);\r\n            verticesNumber += coords.length / 2;\r\n            break;\r\n        }\r\n        case CONST.DRAW_TYPE.POLYGON: {\r\n            const triangles = this.#triangulatePolygon(renderObject.vertices);\r\n            this.#bindPolygon(triangles);\r\n            const len = triangles.length;\r\n            if (len % 3 !== 0) {\r\n                Warning(WARNING_CODES.POLYGON_VERTICES_NOT_CORRECT, `polygons ${renderObject.id}, vertices are not correct, skip drawing`);\r\n                return Promise.reject();\r\n            }\r\n            verticesNumber += len / 2;\r\n            break;\r\n        }\r\n        }\r\n        //Tell the attribute how to get data out of positionBuffer\r\n        const size = 2,\r\n            type = gl.FLOAT, // data is 32bit floats\r\n            normalize = false,\r\n            stride = 0, // move forward size * sizeof(type) each iteration to get next position\r\n            offset = 0; // start of beginning of the buffer\r\n        gl.vertexAttribPointer(positionAttributeLocation, size, type, normalize, stride, offset);\r\n\r\n        const colorArray = this.#rgbaToArray(renderObject.bgColor);\r\n        gl.uniform4f(colorUniformLocation, colorArray[0]/255, colorArray[1]/255, colorArray[2]/255, colorArray[3]);\r\n        \r\n        if (blend) {\r\n            gl.blendFunc(blend[0], blend[1]);\r\n        }\r\n        \r\n        if (renderObject.isMaskAttached) {\r\n            gl.stencilFunc(gl.EQUAL, renderObject._maskId, 0xFF);\r\n        } else if (renderObject._isMask) {\r\n            gl.stencilFunc(gl.ALWAYS, renderObject.id, 0xFF);\r\n        }\r\n        return Promise.resolve([verticesNumber, gl.TRIANGLES]);\r\n    };\r\n    _bindConus = (renderObject, gl, pageData, program, vars) => {\r\n        const [ xOffset, yOffset ] = renderObject.isOffsetTurnedOff === true ? [0,0] : pageData.worldOffset,\r\n            x = renderObject.x - xOffset,\r\n            y = renderObject.y - yOffset,\r\n            scale = [1, 1],\r\n            rotation = renderObject.rotation,\r\n            { \r\n                u_translation: translationLocation,\r\n                u_rotation: rotationRotation,\r\n                u_scale: scaleLocation,\r\n                u_resolution: resolutionUniformLocation,\r\n                u_color: colorUniformLocation,\r\n                a_position: positionAttributeLocation,\r\n                u_fade_max: fadeMaxLocation,\r\n                u_fade_min: fadeMinLocation\r\n            } = vars,\r\n            coords = renderObject.vertices,\r\n            fillStyle = renderObject.bgColor,\r\n            fade_min = renderObject.fade_min,\r\n            fadeLen = renderObject.radius,\r\n            blend = renderObject.blendFunc ? renderObject.blendFunc : [gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA];\r\n        let verticesNumber = 0;\r\n\r\n        gl.useProgram(program);\r\n        \r\n        // set the resolution\r\n        gl.uniform2f(resolutionUniformLocation, gl.canvas.width, gl.canvas.height);\r\n        gl.uniform2f(translationLocation, x, y);\r\n        gl.uniform2f(scaleLocation, scale[0], scale[1]);\r\n        gl.uniform1f(rotationRotation, rotation);\r\n        gl.uniform1f(fadeMinLocation, fade_min);\r\n        gl.uniform1f(fadeMaxLocation, fadeLen);\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.#positionBuffer);\r\n\r\n        gl.bufferData(gl.ARRAY_BUFFER, \r\n            new Float32Array(coords), gl.STATIC_DRAW);\r\n\r\n        gl.enableVertexAttribArray(positionAttributeLocation);\r\n        //Tell the attribute how to get data out of positionBuffer\r\n        const size = 2,\r\n            type = gl.FLOAT, // data is 32bit floats\r\n            normalize = false,\r\n            stride = 0, // move forward size * sizeof(type) each iteration to get next position\r\n            offset = 0; // start of beginning of the buffer\r\n        gl.vertexAttribPointer(positionAttributeLocation, size, type, normalize, stride, offset);\r\n\r\n        verticesNumber += coords.length / 2;\r\n\r\n        if (blend) {\r\n            gl.blendFunc(blend[0], blend[1]);\r\n        }\r\n\r\n        const colorArray = this.#rgbaToArray(fillStyle);\r\n\r\n        gl.uniform4f(colorUniformLocation, colorArray[0]/255, colorArray[1]/255, colorArray[2]/255, colorArray[3]);\r\n        \r\n        if (renderObject.isMaskAttached) {\r\n            gl.stencilFunc(gl.EQUAL, renderObject._maskId, 0xFF);\r\n        } else if (renderObject._isMask) {\r\n            gl.stencilFunc(gl.ALWAYS, renderObject.id, 0xFF);\r\n        }\r\n        \r\n        return Promise.resolve([verticesNumber, gl.TRIANGLE_FAN]);\r\n    };\r\n\r\n    _bindText = (renderObject, gl, pageData, program, vars) => {\r\n        const { u_translation: translationLocation,\r\n            u_rotation: rotationRotation,\r\n            u_scale: scaleLocation,\r\n            u_resolution: resolutionUniformLocation,\r\n            a_position: positionAttributeLocation,\r\n            a_texCoord: texCoordLocation,\r\n            u_image: u_imageLocation } = vars;\r\n\r\n        const {width:boxWidth, height:boxHeight} = renderObject.boundariesBox,\r\n            image_name = renderObject.text,\r\n            [ xOffset, yOffset ] = renderObject.isOffsetTurnedOff === true ? [0,0] : pageData.worldOffset,\r\n            x = renderObject.x - xOffset,\r\n            y = renderObject.y - yOffset - boxHeight,\r\n            blend = renderObject.blendFunc ? renderObject.blendFunc : [gl.ONE, gl.ONE_MINUS_SRC_ALPHA];\r\n\r\n        const rotation = 0,\r\n            scale = [1, 1];\r\n        const vecX1 = x,\r\n            vecY1 = y,\r\n            vecX2 = vecX1 + boxWidth,\r\n            vecY2 = vecY1 + boxHeight;\r\n        const verticesBufferData = [\r\n                vecX1, vecY1,\r\n                vecX2, vecY1,\r\n                vecX1, vecY2,\r\n                vecX1, vecY2,\r\n                vecX2, vecY1,\r\n                vecX2, vecY2\r\n            ],\r\n            texturesBufferData = [\r\n                0, 0,\r\n                1, 0,\r\n                0, 1,\r\n                0, 1,\r\n                1, 0,\r\n                1, 1\r\n            ];\r\n        let verticesNumber = 0;\r\n\r\n        gl.useProgram(program);\r\n        // set the resolution\r\n        gl.uniform2f(resolutionUniformLocation, gl.canvas.width, gl.canvas.height);\r\n        gl.uniform2f(translationLocation, x, y);\r\n        gl.uniform2f(scaleLocation, scale[0], scale[1]);\r\n        gl.uniform1f(rotationRotation, rotation);\r\n        \r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.#positionBuffer);\r\n        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(verticesBufferData), gl.STATIC_DRAW);\r\n        gl.enableVertexAttribArray(positionAttributeLocation);\r\n        //Tell the attribute how to get data out of positionBuffer\r\n        const size = 2,\r\n            type = gl.FLOAT, // data is 32bit floats\r\n            normalize = false,\r\n            stride = 0, // move forward size * sizeof(type) each iteration to get next position\r\n            offset = 0; // start of beginning of the buffer\r\n        gl.vertexAttribPointer(positionAttributeLocation, size, type, normalize, stride, offset);\r\n\r\n        //textures buffer\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.#texCoordBuffer);\r\n        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(texturesBufferData), gl.STATIC_DRAW);\r\n\r\n        gl.enableVertexAttribArray(texCoordLocation);\r\n        gl.vertexAttribPointer(texCoordLocation, 2, gl.FLOAT, false, 0, 0);\r\n        \r\n        verticesNumber += 6;\r\n        // remove box\r\n        // fix text edges\r\n        gl.blendFunc(blend[0], blend[1]);\r\n        //\r\n        //var currentTexture = gl.getParameter(gl.TEXTURE_BINDING_2D);\r\n        \r\n        let textureStorage = renderObject._textureStorage;\r\n        if (!textureStorage) {\r\n            //const activeTexture = gl.getParameter(gl.ACTIVE_TEXTURE);\r\n            textureStorage = new ImageTempStorage(gl.createTexture());\r\n            renderObject._textureStorage = textureStorage;\r\n        }\r\n        if (textureStorage._isTextureRecalculated === true) {\r\n            this.#updateTextWebGlTexture(gl, textureStorage._texture, renderObject._textureCanvas);\r\n            textureStorage._isTextureRecalculated = false;\r\n        } else {\r\n            this.#bindTexture(gl, textureStorage._texture);\r\n        }\r\n        gl.uniform1i(u_imageLocation, textureStorage._textureIndex);\r\n        gl.depthMask(false);\r\n        return Promise.resolve([verticesNumber, gl.TRIANGLES]);\r\n    };\r\n\r\n    _bindImage = (renderObject, gl, pageData, program, vars) => {\r\n        const { \r\n            u_translation: translationLocation,\r\n            u_rotation: rotationRotation,\r\n            u_scale: scaleLocation,\r\n            u_resolution: resolutionUniformLocation,\r\n            a_position: positionAttributeLocation,\r\n            a_texCoord: texCoordLocation,\r\n            u_image: u_imageLocation } = vars;\r\n\r\n        const [ xOffset, yOffset ] = renderObject.isOffsetTurnedOff === true ? [0,0] : pageData.worldOffset,\r\n            x = renderObject.x - xOffset,\r\n            y = renderObject.y - yOffset;\r\n\r\n        const atlasImage = renderObject.image,\r\n            animationIndex = renderObject.imageIndex,\r\n            image_name = renderObject.key,\r\n            shapeMaskId = renderObject._maskId,\r\n            spacing = renderObject.spacing,\r\n            margin = renderObject.margin,\r\n            blend = renderObject.blendFunc ? renderObject.blendFunc : [gl.ONE, gl.ONE_MINUS_SRC_ALPHA],\r\n            scale = [1, 1];\r\n        let imageX = margin,\r\n            imageY = margin,\r\n            colNum = 0,\r\n            rowNum = 0,\r\n            verticesNumber = 0;\r\n        if (animationIndex !== 0) {\r\n            const imageColsNumber = (atlasImage.width + spacing - (2*margin)) / (renderObject.width + spacing);\r\n            colNum = animationIndex % imageColsNumber;\r\n            rowNum = Math.floor(animationIndex / imageColsNumber);\r\n            imageX = colNum * renderObject.width + (colNum * spacing) + margin,\r\n            imageY = rowNum * renderObject.height + (rowNum * spacing) + margin;\r\n        }\r\n        const posX = x - renderObject.width / 2,\r\n            posY = y - renderObject.height / 2;\r\n        const vecX1 = posX,\r\n            vecY1 = posY,\r\n            vecX2 = vecX1 + renderObject.width,\r\n            vecY2 = vecY1 + renderObject.height,\r\n            texX1 = 1 / atlasImage.width * imageX,\r\n            texY1 = 1 / atlasImage.height * imageY,\r\n            texX2 = texX1 + (1 / atlasImage.width * renderObject.width),\r\n            texY2 = texY1 + (1 / atlasImage.height * renderObject.height);\r\n        const vectors = [\r\n                vecX1, vecY1,\r\n                vecX2, vecY1,\r\n                vecX1, vecY2,\r\n                vecX1, vecY2,\r\n                vecX2, vecY1,\r\n                vecX2, vecY2\r\n            ],\r\n            textures = [\r\n                texX1, texY1,\r\n                texX2, texY1,\r\n                texX1, texY2,\r\n                texX1, texY2,\r\n                texX2, texY1,\r\n                texX2, texY2\r\n            ];\r\n        gl.useProgram(program);\r\n        // set the resolution\r\n        gl.uniform2f(resolutionUniformLocation, gl.canvas.width, gl.canvas.height);\r\n        gl.uniform2f(translationLocation, x, y);\r\n        gl.uniform2f(scaleLocation, scale[0], scale[1]);\r\n        gl.uniform1f(rotationRotation, renderObject.rotation);\r\n        \r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.#positionBuffer);\r\n        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vectors), gl.STATIC_DRAW);\r\n\r\n        verticesNumber += vectors.length / 2;\r\n        gl.enableVertexAttribArray(positionAttributeLocation);\r\n        //Tell the attribute how to get data out of positionBuffer\r\n        const size = 2,\r\n            type = gl.FLOAT, // data is 32bit floats\r\n            normalize = false,\r\n            stride = 0, // move forward size * sizeof(type) each iteration to get next position\r\n            offset = 0; // start of beginning of the buffer\r\n        gl.vertexAttribPointer(positionAttributeLocation, size, type, normalize, stride, offset);\r\n\r\n        //textures buffer\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.#texCoordBuffer);\r\n        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(textures), gl.STATIC_DRAW);\r\n\r\n        gl.enableVertexAttribArray(texCoordLocation);\r\n        gl.vertexAttribPointer(texCoordLocation, 2, gl.FLOAT, false, 0, 0);\r\n\r\n        let textureStorage = renderObject._textureStorage;\r\n        if (!textureStorage) {\r\n            textureStorage = new ImageTempStorage(gl.createTexture());\r\n            renderObject._textureStorage = textureStorage;\r\n        } \r\n        if (textureStorage._isTextureRecalculated === true) {\r\n            this.#updateWebGlTexture(gl, textureStorage._texture, renderObject.image);\r\n            textureStorage._isTextureRecalculated = false;\r\n        } else {\r\n            this.#bindTexture(gl, textureStorage._texture);\r\n        }\r\n\r\n        gl.uniform1i(u_imageLocation, textureStorage._textureIndex);\r\n        // make image transparent parts transparent\r\n        gl.blendFunc(blend[0], blend[1]);\r\n        if (shapeMaskId) {\r\n            gl.stencilFunc(gl.EQUAL, shapeMaskId, 0xFF);\r\n            //gl.stencilOp(gl.KEEP, gl.KEEP, gl.REPLACE);\r\n        }\r\n\r\n        return Promise.resolve([verticesNumber, gl.TRIANGLES]);\r\n    };\r\n\r\n    _bindTileImages = async(renderLayer, gl, pageData, program, vars) => {\r\n        const { u_translation: translationLocation,\r\n            u_rotation: rotationRotation,\r\n            u_scale: scaleLocation,\r\n            u_resolution: resolutionUniformLocation,\r\n            a_position: positionAttributeLocation,\r\n            a_texCoord: texCoordLocation,\r\n            u_image: u_imageLocation } = vars;\r\n\r\n        gl.useProgram(program);\r\n        let renderLayerData;\r\n        switch (this.#gameOptions.optimization) {\r\n            case CONST.OPTIMIZATION.NATIVE_JS.NOT_OPTIMIZED:\r\n                renderLayerData = await this.#prepareRenderLayerOld(renderLayer, pageData);\r\n                break;\r\n            case CONST.OPTIMIZATION.WEB_ASSEMBLY.ASSEMBLY_SCRIPT:\r\n            case CONST.OPTIMIZATION.WEB_ASSEMBLY.NATIVE_WAT:\r\n                renderLayerData = await this.#prepareRenderLayerWM(renderLayer, pageData);\r\n                break;\r\n            case CONST.OPTIMIZATION.NATIVE_JS.OPTIMIZED:\r\n            default:\r\n                renderLayerData = await this.#prepareRenderLayer(renderLayer, pageData);\r\n        }\r\n        const translation = [0, 0],\r\n            scale = [1, 1],\r\n            rotation = 0,\r\n            drawMask = [\"ONE\", \"ONE_MINUS_SRC_ALPHA\"],\r\n            shapeMaskId = renderLayer._maskId;\r\n\r\n        let verticesNumber = 0,\r\n            isTextureBind = false;\r\n        gl.enableVertexAttribArray(positionAttributeLocation);\r\n        gl.enableVertexAttribArray(texCoordLocation);\r\n\r\n        // set the resolution\r\n        gl.uniform2f(resolutionUniformLocation, gl.canvas.width, gl.canvas.height);\r\n        gl.uniform2f(translationLocation,translation[0], translation[1]);\r\n        gl.uniform2f(scaleLocation, scale[0], scale[1]);\r\n        gl.uniform1f(rotationRotation, rotation);\r\n\r\n        for (let i = 0; i < renderLayerData.length; i++) {\r\n            const data = renderLayerData[i],\r\n                vectors = data[0],\r\n                textures = data[1],\r\n                image_name = data[2],\r\n                image = data[3];\r\n            // if layer use multiple tilesets\r\n            if (vectors.length > 0 && textures.length > 0) {\r\n                // need to have additional draw call for each new texture added\r\n                // probably it could be combined in one draw call if multiple textures \r\n                // could be used in one draw call\r\n                if (isTextureBind) {\r\n                    await this._render(verticesNumber, gl.TRIANGLES);\r\n                }\r\n                \r\n                gl.bindBuffer(gl.ARRAY_BUFFER, this.#positionBuffer);\r\n                gl.bufferData(gl.ARRAY_BUFFER, vectors, gl.STATIC_DRAW);\r\n\r\n                //Tell the attribute how to get data out of positionBuffer\r\n                const size = 2,\r\n                    type = gl.FLOAT, // data is 32bit floats\r\n                    normalize = false,\r\n                    stride = 0, // move forward size * sizeof(type) each iteration to get next position\r\n                    offset = 0;  // verticesNumber * 4; // start of beginning of the buffer\r\n                gl.vertexAttribPointer(positionAttributeLocation, size, type, normalize, stride, offset);\r\n\r\n                //textures buffer\r\n                gl.bindBuffer(gl.ARRAY_BUFFER, this.#texCoordBuffer);\r\n                gl.bufferData(gl.ARRAY_BUFFER, textures, gl.STATIC_DRAW);\r\n\r\n                gl.vertexAttribPointer(texCoordLocation, 2, gl.FLOAT, false, 0, offset);\r\n\r\n                let textureStorage = renderLayer._textureStorages[i];\r\n                \r\n                if (!textureStorage) {\r\n                    textureStorage = new ImageTempStorage(gl.createTexture(), i);\r\n                    renderLayer._setTextureStorage(i, textureStorage);\r\n                }\r\n                if (textureStorage._isTextureRecalculated === true) {\r\n                    this.#updateWebGlTexture(gl, textureStorage._texture, image, textureStorage._textureIndex);\r\n                    textureStorage._isTextureRecalculated = false;\r\n                } else {\r\n                    //console.log(\"bind texture\");\r\n                    this.#bindTexture(gl, textureStorage._texture, textureStorage._textureIndex);\r\n                }\r\n                gl.uniform1i(u_imageLocation, textureStorage._textureIndex);\r\n                gl.blendFunc(gl[drawMask[0]], gl[drawMask[1]]);\r\n                verticesNumber = vectors.length / 2;\r\n                if (shapeMaskId) {\r\n                    gl.stencilFunc(gl.EQUAL, shapeMaskId, 0xFF);\r\n                }\r\n                isTextureBind = true;\r\n            }\r\n        }\r\n        return Promise.resolve([verticesNumber, gl.TRIANGLES]);\r\n    };\r\n\r\n    _drawPolygon(renderObject, pageData) {\r\n        const [ xOffset, yOffset ] = renderObject.isOffsetTurnedOff === true ? [0,0] : pageData.worldOffset,\r\n            x = renderObject.x - xOffset,\r\n            y = renderObject.y - yOffset,\r\n            rotation = renderObject.rotation || 0,\r\n            vertices = renderObject.vertices,\r\n            color =  this.#gameOptions.debug.boundaries.boundariesColor;\r\n        const program = this.getProgram(CONST.WEBGL.DRAW_PROGRAMS.PRIMITIVES);\r\n        const { u_translation: translationLocation,\r\n                u_rotation: rotationRotation,\r\n                u_scale: scaleLocation,\r\n                u_resolution: resolutionUniformLocation,\r\n                u_color: colorUniformLocation,\r\n                a_position: positionAttributeLocation,\r\n                u_fade_max: fadeMaxLocation,\r\n                u_fade_min: fadeMinLocation\r\n            } = this.getProgramVarLocations(CONST.WEBGL.DRAW_PROGRAMS.PRIMITIVES),\r\n            gl = this.#gl;\r\n\r\n        let verticesNumber = 0;\r\n        gl.useProgram(program);\r\n        // set the resolution\r\n        gl.uniform2f(resolutionUniformLocation, gl.canvas.width, gl.canvas.height);\r\n\r\n        gl.uniform2f(translationLocation, x, y);\r\n        gl.uniform2f(scaleLocation, 1, 1);\r\n        gl.uniform1f(rotationRotation, rotation);\r\n        gl.uniform1f(fadeMinLocation, 0);\r\n\r\n        gl.enableVertexAttribArray(positionAttributeLocation);\r\n\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.#positionBuffer);\r\n\r\n        const triangles = this.#triangulatePolygon(vertices);\r\n\r\n        const polygonVerticesNum = triangles.length;\r\n        if (polygonVerticesNum % 3 !== 0) {\r\n            Warning(WARNING_CODES.POLYGON_VERTICES_NOT_CORRECT, \"polygon boundaries vertices are not correct, skip drawing\");\r\n            return;\r\n        }\r\n        this.#bindPolygon(triangles);\r\n        verticesNumber += polygonVerticesNum / 2;\r\n        //Tell the attribute how to get data out of positionBuffer\r\n        const size = 2,\r\n            type = gl.FLOAT, // data is 32bit floats\r\n            normalize = false,\r\n            stride = 0, // move forward size * sizeof(type) each iteration to get next position\r\n            offset = 0; // start of beginning of the buffer\r\n        gl.vertexAttribPointer(positionAttributeLocation, size, type, normalize, stride, offset);\r\n\r\n        const colorArray = this.#rgbaToArray(color);\r\n        gl.uniform4f(colorUniformLocation, colorArray[0]/255, colorArray[1]/255, colorArray[2]/255, colorArray[3]);\r\n\r\n        this._render(verticesNumber, gl.TRIANGLES);\r\n    }\r\n\r\n    _bindLine = (renderObject, gl, pageData, program, vars) => {\r\n        const [ xOffset, yOffset ] = renderObject.isOffsetTurnedOff === true ? [0,0] : pageData.worldOffset,\r\n            x = renderObject.x - xOffset,\r\n            y = renderObject.y - yOffset,\r\n            scale = [1, 1],\r\n            rotation = renderObject.rotation,\r\n            { \r\n                u_translation: translationLocation,\r\n                u_rotation: rotationRotation,\r\n                u_scale: scaleLocation,\r\n                u_resolution: resolutionUniformLocation,\r\n                u_color: colorUniformLocation,\r\n                a_position: positionAttributeLocation,\r\n                u_fade_max: fadeMaxLocation,\r\n                u_fade_min: fadeMinLocation\r\n            } = vars,\r\n            coords = renderObject.vertices,\r\n            fillStyle = renderObject.bgColor,\r\n            fade_min = renderObject.fade_min,\r\n            fadeLen = renderObject.radius,\r\n            lineWidth = this.#gameOptions.debug.boundaries.boundariesWidth;\r\n        let verticesNumber = 0;\r\n\r\n        gl.useProgram(program);\r\n        // set the resolution\r\n        gl.uniform2f(resolutionUniformLocation, gl.canvas.width, gl.canvas.height);\r\n\r\n        gl.uniform2f(translationLocation, x, y);\r\n        gl.uniform2f(scaleLocation, 1, 1);\r\n        gl.uniform1f(rotationRotation, rotation);\r\n        gl.uniform1f(fadeMinLocation, 0);\r\n\r\n        gl.enableVertexAttribArray(positionAttributeLocation);\r\n\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.#positionBuffer);\r\n\r\n        gl.bufferData(\r\n            gl.ARRAY_BUFFER, \r\n            new Float32Array(coords),\r\n            gl.STATIC_DRAW);\r\n\r\n        verticesNumber += coords.length / 2;\r\n        //Tell the attribute how to get data out of positionBuffer\r\n        const size = 2,\r\n            type = gl.FLOAT, // data is 32bit floats\r\n            normalize = false,\r\n            stride = 0, // move forward size * sizeof(type) each iteration to get next position\r\n            offset = 0; // start of beginning of the buffer\r\n        gl.vertexAttribPointer(positionAttributeLocation, size, type, normalize, stride, offset);\r\n\r\n        const colorArray = this.#rgbaToArray(fillStyle);\r\n        gl.uniform4f(colorUniformLocation, colorArray[0]/255, colorArray[1]/255, colorArray[2]/255, colorArray[3]);\r\n        \r\n        gl.lineWidth(lineWidth);\r\n\r\n        return Promise.resolve([0, gl.LINES]);\r\n    };\r\n    \r\n    _drawLines(linesArray, color, lineWidth = 1, rotation = 0, translation = [0, 0]) {\r\n        const program = this.getProgram(CONST.WEBGL.DRAW_PROGRAMS.PRIMITIVES);\r\n        const { u_translation: translationLocation,\r\n                u_rotation: rotationRotation,\r\n                u_scale: scaleLocation,\r\n                u_resolution: resolutionUniformLocation,\r\n                u_color: colorUniformLocation,\r\n                a_position: positionAttributeLocation,\r\n                u_fade_max: fadeMaxLocation,\r\n                u_fade_min: fadeMinLocation\r\n            } = this.getProgramVarLocations(CONST.WEBGL.DRAW_PROGRAMS.PRIMITIVES),\r\n            gl = this.#gl;\r\n\r\n        let verticesNumber = 0;\r\n        gl.useProgram(program);\r\n        // set the resolution\r\n        gl.uniform2f(resolutionUniformLocation, gl.canvas.width, gl.canvas.height);\r\n\r\n        gl.uniform2f(translationLocation, translation[0], translation[1]);\r\n        gl.uniform2f(scaleLocation, 1, 1);\r\n        gl.uniform1f(rotationRotation, rotation);\r\n        gl.uniform1f(fadeMinLocation, 0);\r\n\r\n        gl.enableVertexAttribArray(positionAttributeLocation);\r\n\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.#positionBuffer);\r\n\r\n        gl.bufferData(\r\n            gl.ARRAY_BUFFER, \r\n            (linesArray instanceof Float32Array ? linesArray : new Float32Array(linesArray)),\r\n            gl.STATIC_DRAW);\r\n\r\n        verticesNumber += linesArray.length / 2;\r\n        //Tell the attribute how to get data out of positionBuffer\r\n        const size = 2,\r\n            type = gl.FLOAT, // data is 32bit floats\r\n            normalize = false,\r\n            stride = 0, // move forward size * sizeof(type) each iteration to get next position\r\n            offset = 0; // start of beginning of the buffer\r\n        gl.vertexAttribPointer(positionAttributeLocation, size, type, normalize, stride, offset);\r\n\r\n        const colorArray = this.#rgbaToArray(color);\r\n        gl.uniform4f(colorUniformLocation, colorArray[0]/255, colorArray[1]/255, colorArray[2]/255, colorArray[3]);\r\n        \r\n        gl.lineWidth(lineWidth);\r\n        \r\n        this._render(verticesNumber, gl.LINES);\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     * @param {string} objectClassName - object name registered to DrawObjectFactory\r\n     * @param {function(renderObject, gl, pageData, program, vars):Promise<any[]>} objectRenderMethod - should be promise based returns vertices number and draw program\r\n     * @param {string=} objectWebGlDrawProgram \r\n     */\r\n    _registerObjectRender(objectClassName, objectRenderMethod, objectWebGlDrawProgram) {\r\n        this.#registeredRenderObjects.set(objectClassName, {method: objectRenderMethod, webglProgramName: objectWebGlDrawProgram});\r\n    }\r\n\r\n    _bindRenderObject(renderObject, pageData) {\r\n        const name = renderObject.constructor.name,\r\n            registeredRenderObject = this.#registeredRenderObjects.get(name);\r\n        if (registeredRenderObject) {\r\n            const name = registeredRenderObject.webglProgramName;\r\n            if (name) {\r\n                const program = this.getProgram(name),\r\n                    vars = this.getProgramVarLocations(name);\r\n                return registeredRenderObject.method(renderObject, this.#gl, pageData, program, vars)\r\n                    .then((results) => this._render(results[0], results[1]));  \r\n            } else {\r\n                return registeredRenderObject.method(renderObject, this.#gl, pageData);\r\n            }\r\n        } else {\r\n            // a workaround for images and its extend classes drawing\r\n            if (renderObject.type === CONST.DRAW_TYPE.IMAGE) {\r\n                const program = this.getProgram(CONST.WEBGL.DRAW_PROGRAMS.IMAGES),\r\n                    vars = this.getProgramVarLocations(CONST.WEBGL.DRAW_PROGRAMS.IMAGES);\r\n\r\n                if (!renderObject.image) {\r\n                    const image = this.#loaderReference.getImage(renderObject.key);\r\n                    if (!image) {\r\n                        Exception(ERROR_CODES.CANT_GET_THE_IMAGE, \"iLoader can't get the image with key: \" + renderObject.key);\r\n                    } else {\r\n                        renderObject.image = image;\r\n                    }\r\n                }\r\n                return this._bindImage(renderObject, this.#gl, pageData, program, vars)\r\n                    .then((results) => this._render(results[0], results[1]))\r\n                    .then(() => {\r\n                        if (renderObject.vertices && this.#gameOptions.debug.boundaries.drawObjectBoundaries) {\r\n                            return this._drawPolygon(renderObject, pageData);\r\n                        } else {\r\n                            return Promise.resolve();\r\n                        }\r\n                    });\r\n            } else {\r\n                console.warn(\"no registered draw object method for \" + name + \" skip draw\");\r\n                return Promise.resolve();\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * \r\n     * @param {DrawTiledLayer} renderLayer \r\n     * @param {GameStageData} pageData\r\n     * @returns {Promise<Array<Array>>}\r\n     */\r\n    #prepareRenderLayer(renderLayer, pageData) {\r\n        const INDEX_TOP_LINE = 0,\r\n            INDEX_RIGHT_LINE = 1,\r\n            INDEX_BOTTOM_LINE = 2,\r\n            INDEX_LEFT_LINE = 3;\r\n\r\n        const INDEX_X1 = 0,\r\n            INDEX_Y1 = 1,\r\n            INDEX_X2 = 2,\r\n            INDEX_Y2 = 3;\r\n        return new Promise((resolve, reject) => {\r\n            const tilemap = renderLayer.tilemap,\r\n                tilesets = renderLayer.tilesets,\r\n                tilesetImages = renderLayer.tilesetImages,\r\n                layerData = renderLayer.layerData,\r\n                { tileheight:dtheight, tilewidth:dtwidth } = tilemap,\r\n                tilewidth = dtwidth,\r\n                tileheight = dtheight,\r\n                [ canvasW, canvasH ] = pageData.canvasDimensions,\r\n                [ xOffset, yOffset ] = renderLayer.isOffsetTurnedOff === true ? [0, 0] : pageData.worldOffset,\r\n                boundariesCalculations = this.#gameOptions.render.boundaries.realtimeCalculations,\r\n                setBoundaries = renderLayer.setBoundaries,\r\n                tileImagesData = [];\r\n\r\n            if (!layerData) {\r\n                Warning(WARNING_CODES.NOT_FOUND, \"check tilemap and layers name\");\r\n                reject();\r\n            }\r\n\r\n            if (this.#gameOptions.render.boundaries.mapBoundariesEnabled) {\r\n                pageData._setMapBoundaries();\r\n            }\r\n            \r\n            for (let i = 0; i < tilesets.length; i++) {\r\n                \r\n                const tilesetData = tilesets[i].data,\r\n                    firstgid = tilesets[i].firstgid,\r\n                    nextTileset = tilesets[i + 1],\r\n                    nextgid = nextTileset ? nextTileset.firstgid : 1_000_000_000, // a workaround to avoid multiple conditions\r\n                    tilesetwidth = tilesetData.tilewidth,\r\n                    tilesetheight = tilesetData.tileheight,\r\n                    atlasImage = tilesetImages[i],\r\n                    //atlasWidth = atlasImage.width,\r\n                    //atlasHeight = atlasImage.height,\r\n                    atlasWidth = tilesetData.imagewidth,\r\n                    atlasHeight = tilesetData.imageheight,\r\n                    //atlasRows = atlasHeight / tileheight,\r\n                    atlasColumns = tilesetData.columns,\r\n                    layerCols = layerData.width,\r\n                    layerRows = layerData.height,\r\n                    worldW = tilewidth * layerCols,\r\n                    worldH = tileheight * layerRows,\r\n                    moduloTop = yOffset % tileheight,\r\n                    moduleLeft = xOffset % tilewidth,\r\n                    skipRowsTop = yOffset !== 0 ? Math.floor(yOffset / tileheight) : 0,\r\n                    skipColsLeft = xOffset !== 0 ? Math.floor(xOffset / tilewidth) : 0,\r\n                    // sometimes canvasW/H may be bigger than world itself\r\n                    screenRows = worldH > canvasH ? Math.ceil(canvasH / tileheight) + 1 : layerRows,\r\n                    screenCols = worldW > canvasW ? Math.ceil(canvasW / tilewidth) + 1 : layerCols,\r\n                    screenCells = screenRows * screenCols,\r\n                    skipColsRight = layerCols - screenCols - skipColsLeft,\r\n                    cellSpacing = tilesetData.spacing,\r\n                    cellMargin = tilesetData.margin,\r\n                    hasAnimations = tilesetData._hasAnimations;\r\n                    //console.log(\"non empty: \", layerData.nonEmptyCells);\r\n                    // additional property which is set in DrawTiledLayer\r\n                const hasBoundaries = tilesetData._hasBoundaries,\r\n                    tilesetBoundaries = tilesetData._boundaries,\r\n                    layerTilesetData = tilesets[i]._temp;\r\n\r\n                if (layerTilesetData.cells !== screenCells) {\r\n                    layerTilesetData._initiateStorageData(screenCells);\r\n                }\r\n                let v = layerTilesetData.vectors,\r\n                    t = layerTilesetData.textures,\r\n                    filledSize = 0;\r\n                    \r\n                v.fill(0);\r\n                t.fill(0);\r\n                let boundariesRowsIndexes = layerTilesetData._bTempIndexes;\r\n                const fullRowCellsNum = screenCols * 4;\r\n                \r\n                let mapIndex = skipRowsTop * layerCols;\r\n                for (let row = 0; row < screenRows; row++) {\r\n                    mapIndex += skipColsLeft;\r\n                    for (let col = 0; col < screenCols; col++) {\r\n                        let tile = layerData.data[mapIndex];\r\n\r\n                        if ((tile >= firstgid) && (tile < nextgid)) {\r\n                            const mapPosX = col * dtwidth - moduleLeft,\r\n                                mapPosY = row * dtheight - moduloTop;\r\n\r\n                            // actual tile index\r\n                            tile -= firstgid;\r\n                            // switch if animations are set\r\n                            if (hasAnimations) {\r\n                                const activeTile = tilesetData._animations.get(tile);\r\n                                if (typeof activeTile !== \"undefined\") {\r\n                                    tile = activeTile;\r\n                                }   \r\n                            }\r\n\r\n                            // calculate map position and atlas position\r\n                            const colNum = tile % atlasColumns,\r\n                                rowNum = Math.floor(tile / atlasColumns),\r\n                                atlasPosX = colNum * tilesetwidth + (colNum * cellSpacing) + cellMargin,\r\n                                atlasPosY = rowNum * tilesetheight + (rowNum * cellSpacing) + cellMargin,\r\n                                vecX1 = mapPosX,\r\n                                vecY1 = mapPosY,\r\n                                vecX2 = mapPosX + tilesetwidth,\r\n                                vecY2 = mapPosY + tilesetheight,\r\n                                texX1 = (1 / atlasWidth) * atlasPosX,\r\n                                texY1 = (1 / atlasHeight) * atlasPosY,\r\n                                texX2 = texX1 + (1 / atlasWidth * tilesetwidth),\r\n                                texY2 = texY1 + (1 / atlasHeight * tilesetheight);\r\n\r\n                            // 0 vecX1\r\n                            v[filledSize] = vecX1;\r\n                            t[filledSize] = texX1;\r\n\r\n                            // 1 vecY1\r\n                            filledSize++;\r\n                            v[filledSize] = vecY1;\r\n                            t[filledSize] = texY1;\r\n                            \r\n                            // 2 vecX2\r\n                            filledSize++;\r\n                            v[filledSize] = vecX2;\r\n                            t[filledSize] = texX2;\r\n\r\n                            // 3 vecY1\r\n                            filledSize++;\r\n                            v[filledSize] = vecY1;\r\n                            t[filledSize] = texY1;\r\n\r\n                            // 4 vecX1\r\n                            filledSize++;\r\n                            v[filledSize] = vecX1;\r\n                            t[filledSize] = texX1;\r\n\r\n                            // 5 vecY2\r\n                            filledSize++;\r\n                            v[filledSize] = vecY2;\r\n                            t[filledSize] = texY2;\r\n\r\n                            // 6 vecX1\r\n                            filledSize++;\r\n                            v[filledSize] = vecX1;\r\n                            t[filledSize] = texX1;\r\n\r\n                            // 7 vecY2\r\n                            filledSize++;\r\n                            v[filledSize] = vecY2;\r\n                            t[filledSize] = texY2;\r\n\r\n                            // 8 vecX2\r\n                            filledSize++;\r\n                            v[filledSize] = vecX2;\r\n                            t[filledSize] = texX2;\r\n\r\n                            // 9 vecY1\r\n                            filledSize++;\r\n                            v[filledSize] = vecY1;\r\n                            t[filledSize] = texY1;\r\n\r\n                            // 10 vecX2, \r\n                            filledSize++;\r\n                            v[filledSize] = vecX2;\r\n                            t[filledSize] = texX2;\r\n\r\n                            // 11 vecY2\r\n                            filledSize++;\r\n                            v[filledSize] = vecY2;\r\n                            t[filledSize] = texY2;\r\n\r\n                            filledSize++;\r\n                        \r\n                            if (setBoundaries) {\r\n                                // if boundary is set in tilesetData\r\n                                let isBoundaryPreset = false;\r\n                                if (hasBoundaries && tilesetBoundaries.size > 0) {\r\n                                    const tilesetBoundary = tilesetBoundaries.get(tile);\r\n                                    if (tilesetBoundary) {\r\n                                        isBoundaryPreset = true;\r\n                                        const objectGroup = tilesetBoundary,\r\n                                            objects = objectGroup.objects;\r\n                                            \r\n                                        objects.forEach((object) => {\r\n                                            const baseX = mapPosX + object.x, \r\n                                                baseY = mapPosY + object.y,\r\n                                                rotation = object.rotation;\r\n                                            if (rotation !== 0) {\r\n                                                Warning(\"tilesetData.tiles.rotation property is not supported yet\");\r\n                                            }\r\n                                            if (object.polygon) {\r\n                                                object.polygon.forEach(\r\n                                                    (point, idx) => {\r\n                                                        const next = object.polygon[idx + 1];\r\n                                                        if (next) {\r\n                                                            pageData._addBoundaryLine(point.x + baseX, point.y + baseY, next.x + baseX, next.y + baseY);\r\n                                                        } else {\r\n                                                            // last point -> link to the first\r\n                                                            const first = object.polygon[0];\r\n                                                            pageData._addBoundaryLine(point.x + baseX, point.y + baseY, first.x + baseX, first.y + baseY);\r\n                                                        }\r\n                                                    });\r\n                                            } else if (object.point) {\r\n                                                // x/y coordinate\r\n                                                pageData._addPointBoundary(baseX, baseY);\r\n                                            } else if (object.ellipse) {\r\n                                                const radX = object.width / 2,\r\n                                                    radY = object.height / 2;\r\n                                                    \r\n                                                pageData._addEllipseBoundary(baseX + radX, baseY + radY, radX, radY);\r\n                                            } else {\r\n                                                // object is rect\r\n                                                const width = object.width,\r\n                                                    height = object.height,\r\n                                                    x2 = width + baseX,\r\n                                                    y2 = height + baseY;\r\n\r\n                                                //boundaries.push([baseX, baseY, x2, baseY]);\r\n                                                pageData._addBoundaryLine(baseX, baseY, x2, baseY);\r\n\r\n                                                //boundaries.push([x2, baseY, x2, y2]);\r\n                                                pageData._addBoundaryLine(x2, baseY, x2, y2);\r\n\r\n                                                //boundaries.push([x2, y2, baseX, y2]);\r\n                                                pageData._addBoundaryLine(x2, y2, baseX, y2);\r\n\r\n                                                //boundaries.push([baseX, y2, baseX, baseY]);\r\n                                                pageData._addBoundaryLine(baseX, y2, baseX, baseY);\r\n                                            }\r\n                                        });\r\n                                    }\r\n\r\n                                // extract rect boundary for the whole tile\r\n                                }\r\n                                if (isBoundaryPreset === false) {\r\n                                    const boundaries = pageData.getRawBoundaries();\r\n\r\n                                    let rightLine = [ mapPosX + tilesetwidth, mapPosY, mapPosX + tilesetwidth, mapPosY + tilesetheight ],\r\n                                        bottomLine = [ mapPosX + tilesetwidth, mapPosY + tilesetheight, mapPosX, mapPosY + tilesetheight ],\r\n                                        topLine = [ mapPosX, mapPosY, mapPosX + tilesetwidth, mapPosY],\r\n                                        leftLine = [ mapPosX, mapPosY + tilesetheight, mapPosX, mapPosY ];\r\n                                    \r\n                                    // top cell7\r\n                                    if (row !== 0) {\r\n                                        const topCellFirstIndex =  (row - 1) * fullRowCellsNum + (col * 4),\r\n                                            bottomTopLeftFirstIndex = boundariesRowsIndexes[topCellFirstIndex + INDEX_BOTTOM_LINE];\r\n                                        if (bottomTopLeftFirstIndex) {\r\n                                            //remove double lines from top\r\n                                            const bottomTopCellX1 = boundaries[bottomTopLeftFirstIndex];\r\n                                            if (bottomTopCellX1) {\r\n                                                const bottomTopCellY1 = boundaries[bottomTopLeftFirstIndex + INDEX_Y1],\r\n                                                    bottomTopCellX2 = boundaries[bottomTopLeftFirstIndex + INDEX_X2],\r\n                                                    bottomTopCellY2 = boundaries[bottomTopLeftFirstIndex + INDEX_Y2],\r\n                                                    topX1 = topLine[INDEX_X1],\r\n                                                    topY1 = topLine[INDEX_Y1],\r\n                                                    topX2 = topLine[INDEX_X2],\r\n                                                    topY2 = topLine[INDEX_Y2];\r\n                                                \r\n                                                if (topX1 === bottomTopCellX2 && topY1 === bottomTopCellY2 &&\r\n                                                    topX2 === bottomTopCellX1 && topY2 === bottomTopCellY1) {\r\n                                                    pageData._removeBoundaryLine(bottomTopLeftFirstIndex);\r\n                                                    topLine = undefined;\r\n                                                }\r\n                                            }\r\n\r\n                                            // merge line from top right\r\n                                            const rightTopRightFirstIndex = boundariesRowsIndexes[ topCellFirstIndex + INDEX_RIGHT_LINE],\r\n                                                rightTopCellX1 = boundaries[rightTopRightFirstIndex];\r\n                                            if (rightTopCellX1) {\r\n                                                const rightTopCellY1 = boundaries[rightTopRightFirstIndex + INDEX_Y1],\r\n                                                    rightTopCellX2 = boundaries[rightTopRightFirstIndex + INDEX_X2],\r\n                                                    rightX1 = boundaries[rightTopRightFirstIndex + INDEX_X1],\r\n                                                    rightX2 = boundaries[rightTopRightFirstIndex + INDEX_X2];\r\n                                                if (rightTopCellX1 === rightX2 && rightTopCellX2 === rightX1) {\r\n                                                    pageData._removeBoundaryLine(rightTopRightFirstIndex);\r\n                                                    rightLine[INDEX_X1] = rightTopCellX1;\r\n                                                    rightLine[INDEX_Y1] = rightTopCellY1;\r\n                                                }\r\n                                            }\r\n                                            // merge line from top left\r\n                                            const leftTopRightFirstIndex =  boundariesRowsIndexes[topCellFirstIndex + INDEX_LEFT_LINE],\r\n                                                leftTopCellX1 = boundaries[leftTopRightFirstIndex];\r\n                                            if (leftTopCellX1) {\r\n                                                const leftTopCellX2 = boundaries[leftTopRightFirstIndex + INDEX_X2],\r\n                                                    leftTopCellY2 = boundaries[leftTopRightFirstIndex + INDEX_Y2],\r\n                                                    leftX1 = leftLine[INDEX_X1],\r\n                                                    leftX2 = leftLine[INDEX_X2];\r\n                                                if (leftTopCellX1 === leftX2 && leftTopCellX2 === leftX1) {\r\n                                                    pageData._removeBoundaryLine(leftTopRightFirstIndex);\r\n                                                    leftLine[INDEX_X2] = leftTopCellX2;\r\n                                                    leftLine[INDEX_Y2] = leftTopCellY2;\r\n                                                }\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                    // leftCell\r\n                                    if (col !== 0) {\r\n                                        \r\n                                        const leftCell = row * fullRowCellsNum + ((col - 1) * 4),\r\n                                            topLeftFirstCellIndex = boundariesRowsIndexes[leftCell];\r\n                                        if (topLeftFirstCellIndex) {\r\n\r\n                                            //remove double lines from left\r\n                                            const rightLeftCellIndex = boundariesRowsIndexes[leftCell + INDEX_RIGHT_LINE],\r\n                                                rightLeftX1 = boundaries[rightLeftCellIndex],\r\n                                                rightLeftCellX1 = rightLeftX1,\r\n                                                rightLeftCellY1 = boundaries[rightLeftCellIndex + INDEX_Y1],\r\n                                                rightLeftCellX2 = boundaries[rightLeftCellIndex + INDEX_X2],\r\n                                                rightLeftCellY2 = boundaries[rightLeftCellIndex + INDEX_Y2],\r\n                                                leftX1 = leftLine[INDEX_X1],\r\n                                                leftY1 = leftLine[INDEX_Y1],\r\n                                                leftX2 = leftLine[INDEX_X2],\r\n                                                leftY2 = leftLine[INDEX_Y2];\r\n\r\n                                            if (leftX1 === rightLeftCellX2 && leftY1 === rightLeftCellY2 &&\r\n                                                leftX2 === rightLeftCellX1 && leftY2 === rightLeftCellY1) {\r\n                                                pageData._removeBoundaryLine(rightLeftCellIndex);\r\n                                                leftLine = undefined;\r\n                                            }\r\n\r\n                                            //merge long lines from left top\r\n                                            const topLeftCellX1 = boundaries[topLeftFirstCellIndex];\r\n                                            if (topLeftCellX1 && topLine) {\r\n                                                const topLeftCellY1 = boundaries[topLeftFirstCellIndex + INDEX_Y1],\r\n                                                    topLeftCellY2 = boundaries[topLeftFirstCellIndex + INDEX_Y2],\r\n                                                    topY1 = topLine[INDEX_Y1],\r\n                                                    topY2 = topLine[INDEX_Y2];\r\n                                                if (topLeftCellY1 === topY2 && topLeftCellY2 === topY1 ) {\r\n                                                    pageData._removeBoundaryLine(topLeftFirstCellIndex);\r\n                                                    topLine[INDEX_X1] = topLeftCellX1;\r\n                                                    topLine[INDEX_Y1] = topLeftCellY1;\r\n                                                }\r\n                                            }\r\n\r\n                                            // merge long lines from left bottom\r\n                                            const bottomLeftFirstCellIndex = boundariesRowsIndexes[leftCell + INDEX_BOTTOM_LINE],\r\n                                                bottomLeftCellX1 = boundaries[bottomLeftFirstCellIndex];\r\n                                            if (bottomLeftCellX1) {\r\n                                                const bottomLeftCellY1 = boundaries[bottomLeftFirstCellIndex + INDEX_Y1],\r\n                                                    bottomLeftCellX2 = boundaries[bottomLeftFirstCellIndex + INDEX_X2],\r\n                                                    bottomLeftCellY2 = boundaries[bottomLeftFirstCellIndex + INDEX_Y2],\r\n                                                    bottomY1 = bottomLine[INDEX_Y1],\r\n                                                    bottomY2 = bottomLine[INDEX_Y2];\r\n                                                if (bottomLeftCellY1 === bottomY2 && bottomLeftCellY2 === bottomY1 ) {\r\n                                                    pageData._removeBoundaryLine(bottomLeftFirstCellIndex);\r\n                                                    //opposite direction\r\n                                                    bottomLine[INDEX_X2] = bottomLeftCellX2;\r\n                                                    bottomLine[INDEX_Y2] = bottomLeftCellY2;\r\n                                                }\r\n                                            }\r\n\r\n                                        }\r\n                                    }\r\n                                    const currentCellIndex = row * fullRowCellsNum + (col * 4);\r\n                                    if (topLine) {\r\n                                        pageData._addBoundaryLine(topLine[0], topLine[1], topLine[2], topLine[3]);\r\n                                        boundariesRowsIndexes[currentCellIndex + INDEX_TOP_LINE] = pageData.boundariesLen - 4;\r\n                                    }\r\n                                    pageData._addBoundaryLine(rightLine[0], rightLine[1], rightLine[2], rightLine[3]);\r\n                                    boundariesRowsIndexes[currentCellIndex + INDEX_RIGHT_LINE] = pageData.boundariesLen - 4;\r\n                                    pageData._addBoundaryLine(bottomLine[0], bottomLine[1], bottomLine[2], bottomLine[3]);\r\n                                    boundariesRowsIndexes[currentCellIndex + INDEX_BOTTOM_LINE] = pageData.boundariesLen - 4;\r\n                                    if (leftLine) {\r\n                                        pageData._addBoundaryLine(leftLine[0], leftLine[1], leftLine[2], leftLine[3]);\r\n                                        boundariesRowsIndexes[currentCellIndex + INDEX_LEFT_LINE] = pageData.boundariesLen - 4;\r\n                                    }\r\n                                    \r\n                                }\r\n                            }\r\n                        }\r\n                        mapIndex++;\r\n                    }\r\n                    mapIndex += skipColsRight;\r\n                }\r\n                //console.log(boundariesRowsIndexes);\r\n                //this.#bindTileImages(verticesBufferData, texturesBufferData, atlasImage, tilesetData.name, renderLayer._maskId);\r\n                tileImagesData.push([v, t, tilesetData.name, atlasImage]);\r\n                //cleanup\r\n                boundariesRowsIndexes.fill(0);\r\n            }\r\n            \r\n            resolve(tileImagesData);\r\n        });\r\n    }\r\n\r\n    #prepareRenderLayerOld(renderLayer, pageData) {\r\n        return new Promise((resolve, reject) => {\r\n            const tilemap = renderLayer.tilemap,\r\n                tilesets = renderLayer.tilesets,\r\n                tilesetImages = renderLayer.tilesetImages,\r\n                layerData = renderLayer.layerData,\r\n                { tileheight:dtheight, tilewidth:dtwidth } = tilemap,\r\n                [ xOffset, yOffset ] = renderLayer.isOffsetTurnedOff === true ? [0,0] : pageData.worldOffset;\r\n            \r\n            let tileImagesData = [];\r\n            if (!layerData) {\r\n                Warning(WARNING_CODES.NOT_FOUND, \"check tilemap and layers name\");\r\n                reject();\r\n            }\r\n\r\n            if (this.#gameOptions.render.boundaries.mapBoundariesEnabled) {\r\n                pageData._setMapBoundaries();\r\n            }\r\n\r\n            for (let i = 0; i <= tilesets.length - 1; i++) {\r\n                const tilesetData = tilesets[i].data,\r\n                    firstgid = tilesets[i].firstgid,\r\n                    nextTileset = tilesets[i + 1],\r\n                    nextgid = nextTileset ? nextTileset.firstgid : 1_000_000_000, // a workaround to avoid multiple conditions\r\n                    //tilesetImages = this.iLoader.getTilesetImageArray(tilesetData.name),\r\n                    tilesetwidth = tilesetData.tilewidth,\r\n                    tilesetheight = tilesetData.tileheight,\r\n                    //atlasRows = tilesetData.imageheight / tileheight,\r\n                    //atlasColumns = tilesetData.imagewidth / tilewidth,\r\n                    atlasColumns = tilesetData.columns,\r\n                    layerCols = layerData.width,\r\n                    layerRows = layerData.height,\r\n                    atlasImage = tilesetImages[i],\r\n                    atlasWidth = atlasImage.width,\r\n                    atlasHeight = atlasImage.height,\r\n                    cellSpacing = tilesetData.spacing,\r\n                    cellMargin = tilesetData.margin,\r\n                    layerTilesetData = tilesets[i]._temp;\r\n                \r\n                let mapIndex = 0,\r\n                    v = layerTilesetData.vectors,\r\n                    t = layerTilesetData.textures,\r\n                    filledSize = 0;\r\n                \r\n                v.fill(0);\r\n                t.fill(0);\r\n                for (let row = 0; row < layerRows; row++) {\r\n                    for (let col = 0; col < layerCols; col++) {\r\n                        let tile = layerData.data[mapIndex];\r\n                        \r\n                        if (tile >= firstgid && (tile < nextgid)) {\r\n\r\n                            tile -= firstgid;\r\n                            const colNum = tile % atlasColumns,\r\n                                rowNum = Math.floor(tile / atlasColumns),\r\n                                atlasPosX = colNum * tilesetwidth + (colNum * cellSpacing) + cellMargin,\r\n                                atlasPosY = rowNum * tilesetheight + (rowNum * cellSpacing) + cellMargin,\r\n                                vecX1 = col * dtwidth - xOffset,\r\n                                vecY1 = row * dtheight - yOffset,\r\n                                vecX2 = vecX1 + tilesetwidth,\r\n                                vecY2 = vecY1 + tilesetheight,\r\n                                texX1 = 1 / atlasWidth * atlasPosX,\r\n                                texY1 = 1 / atlasHeight * atlasPosY,\r\n                                texX2 = texX1 + (1 / atlasWidth * tilesetwidth),\r\n                                texY2 = texY1 + (1 / atlasHeight * tilesetheight);\r\n                             \r\n                            // 0 vecX1\r\n                            v[filledSize] = vecX1;\r\n                            t[filledSize] = texX1;\r\n\r\n                            // 1 vecY1\r\n                            filledSize++;\r\n                            v[filledSize] = vecY1;\r\n                            t[filledSize] = texY1;\r\n                            \r\n                            // 2 vecX2\r\n                            filledSize++;\r\n                            v[filledSize] = vecX2;\r\n                            t[filledSize] = texX2;\r\n\r\n                            // 3 vecY1\r\n                            filledSize++;\r\n                            v[filledSize] = vecY1;\r\n                            t[filledSize] = texY1;\r\n\r\n                            // 4 vecX1\r\n                            filledSize++;\r\n                            v[filledSize] = vecX1;\r\n                            t[filledSize] = texX1;\r\n\r\n                            // 5 vecY2\r\n                            filledSize++;\r\n                            v[filledSize] = vecY2;\r\n                            t[filledSize] = texY2;\r\n\r\n                            // 6 vecX1\r\n                            filledSize++;\r\n                            v[filledSize] = vecX1;\r\n                            t[filledSize] = texX1;\r\n\r\n                            // 7 vecY2\r\n                            filledSize++;\r\n                            v[filledSize] = vecY2;\r\n                            t[filledSize] = texY2;\r\n\r\n                            // 8 vecX2\r\n                            filledSize++;\r\n                            v[filledSize] = vecX2;\r\n                            t[filledSize] = texX2;\r\n\r\n                            // 9 vecY1\r\n                            filledSize++;\r\n                            v[filledSize] = vecY1;\r\n                            t[filledSize] = texY1;\r\n\r\n                            // 10 vecX2, \r\n                            filledSize++;\r\n                            v[filledSize] = vecX2;\r\n                            t[filledSize] = texX2;\r\n\r\n                            // 11 vecY2\r\n                            filledSize++;\r\n                            v[filledSize] = vecY2;\r\n                            t[filledSize] = texY2;\r\n\r\n                            filledSize++;\r\n                            \r\n                        }\r\n                        mapIndex++;\r\n                    }\r\n                }\r\n                tileImagesData.push([v, t, tilesetData.name, atlasImage]);\r\n            }\r\n            resolve(tileImagesData);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param {DrawTiledLayer} renderLayer \r\n     * @param {GameStageData} pageData\r\n     * @returns {Promise<void>}\r\n     */\r\n    #prepareRenderLayerWM = (renderLayer, pageData) => {\r\n        return new Promise((resolve, reject) => {\r\n            const tilemap = renderLayer.tilemap,\r\n                tilesets = tilemap.tilesets,\r\n                tilesetImages = renderLayer.tilesetImages,\r\n                layerData = renderLayer.layerData,\r\n                { tileheight:dtheight, tilewidth:dtwidth } = tilemap,\r\n                tilewidth = dtwidth,\r\n                tileheight = dtheight,\r\n                offsetDataItemsFullNum = layerData.data.length,\r\n                offsetDataItemsFilteredNum = layerData.data.filter((item) => item !== 0).length,\r\n                setBoundaries = false, //renderLayer.setBoundaries,\r\n                [ settingsWorldWidth, settingsWorldHeight ] = pageData.worldDimensions,\r\n                //[ canvasW, canvasH ] = this.stageData.drawDimensions,\r\n                [ xOffset, yOffset ] = renderLayer.isOffsetTurnedOff === true ? [0,0] : pageData.worldOffset;\r\n            const tileImagesData = [];\r\n            // clear data\r\n            // this.layerDataFloat32.fill(0);\r\n            // set data for webgl processing\r\n            this.layerDataFloat32.set(layerData.data);\r\n            if (!layerData) {\r\n                Warning(WARNING_CODES.NOT_FOUND, \"check tilemap and layers name\");\r\n                reject();\r\n            }\r\n\r\n            if (this.#gameOptions.render.boundaries.mapBoundariesEnabled) {\r\n                pageData._setMapBoundaries();\r\n            }\r\n            \r\n            for (let i = 0; i < tilesets.length; i++) {\r\n                const tilesetData = tilesets[i].data,\r\n                    firstgid = tilesets[i].firstgid,\r\n                    nextTileset = tilesets[i + 1],\r\n                    nextgid = nextTileset ? nextTileset.firstgid : 1_000_000_000, // a workaround to avoid multiple conditions\r\n                    //tilesetImages = this.iLoader.getTilesetImageArray(tilesetData.name),\r\n                    tilesetwidth = tilesetData.tilewidth,\r\n                    tilesetheight = tilesetData.tileheight,\r\n                    //atlasRows = tilesetData.imageheight / tileheight,\r\n                    atlasColumns = tilesetData.columns,\r\n                    layerCols = layerData.width,\r\n                    layerRows = layerData.height,\r\n                    //visibleCols = Math.ceil(canvasW / tilewidth),\r\n                    //visibleRows = Math.ceil(canvasH / tileheight),\r\n                    //offsetCols = layerCols - visibleCols,\r\n                    //offsetRows = layerRows - visibleRows,\r\n                    worldW = tilewidth * layerCols,\r\n                    worldH = tileheight * layerRows,\r\n                    atlasImage = tilesetImages[i],\r\n                    atlasWidth = atlasImage.width,\r\n                    atlasHeight = atlasImage.height,\r\n                    items = layerRows * layerCols,\r\n                    dataCellSizeBytes = 4,\r\n                    vectorCoordsItemsNum = 12,\r\n                    texturesCoordsItemsNum = 12,\r\n                    vectorDataItemsNum = offsetDataItemsFilteredNum * vectorCoordsItemsNum,\r\n                    texturesDataItemsNum = offsetDataItemsFilteredNum * texturesCoordsItemsNum,\r\n                    cellSpacing = tilesetData.spacing,\r\n                    cellMargin = tilesetData.margin;\r\n                \r\n                const itemsProcessed = this.calculateBufferData(dataCellSizeBytes, offsetDataItemsFullNum, vectorDataItemsNum, layerRows, layerCols, dtwidth, dtheight, tilesetwidth, tilesetheight, atlasColumns, atlasWidth, atlasHeight, xOffset, yOffset, firstgid, nextgid, cellSpacing, setBoundaries);\r\n                \r\n                const verticesBufferData = itemsProcessed > 0 ? this.layerDataFloat32.slice(offsetDataItemsFullNum, vectorDataItemsNum + offsetDataItemsFullNum) : [],\r\n                    texturesBufferData = itemsProcessed > 0 ? this.layerDataFloat32.slice(vectorDataItemsNum + offsetDataItemsFullNum, vectorDataItemsNum + texturesDataItemsNum + offsetDataItemsFullNum) : [];\r\n                    \r\n                tileImagesData.push([verticesBufferData, texturesBufferData, tilesetData.name, atlasImage]);\r\n            }\r\n            resolve(tileImagesData);\r\n        });\r\n    };\r\n\r\n    /**\r\n     * \r\n     * @param {string} rgbaColor \r\n     * @returns {number[]}\r\n     */\r\n    #rgbaToArray (rgbaColor) {\r\n        return rgbaColor.replace(\"rgba(\", \"\").replace(\")\", \"\").split(\",\").map((/** @param {string} */item) => Number(item.trim()));\r\n    }\r\n\r\n    #triangulatePolygon(vertices) {\r\n        const triangulatedPolygon = new Float32Array(vertices.length * vertices.length),\r\n            pointer = 0;\r\n            \r\n        const [triangulated, len] = this.#triangulate(vertices, triangulatedPolygon, pointer);\r\n        \r\n        const sliced = triangulated.slice(0, len);\r\n        \r\n        return sliced;\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param {Array<Array<number>>} polygonVertices \r\n     * @param {Float32Array} triangulatedPolygon \r\n     * @returns {Array}\r\n     */\r\n    #triangulate (polygonVertices, triangulatedPolygon, pointer) {\r\n        const len = polygonVertices.length,\r\n            vectorsCS = (a, b, c) => crossProduct({x:c[0] - a[0], y: c[1] - a[1]}, {x:b[0] - a[0], y: b[1] - a[1]});\r\n\r\n        if (len <= 3) {\r\n            polygonVertices.forEach(vertex => {\r\n                triangulatedPolygon[pointer] = vertex[0];\r\n                pointer++;\r\n                triangulatedPolygon[pointer] = vertex[1];\r\n                pointer++;\r\n            });\r\n            return [triangulatedPolygon, pointer];\r\n        }\r\n        const verticesSortedByY = [...polygonVertices].sort((curr, next) => next[1] - curr[1]);\r\n        const topVertexIndex = polygonVertices.indexOf(verticesSortedByY[0]),\r\n            startVertexIndex = topVertexIndex !== len - 1 ? topVertexIndex + 1 : 0;\r\n        \r\n        let processedVertices = polygonVertices,\r\n            processedVerticesLen = processedVertices.length,\r\n            skipCount = 0,\r\n            i = startVertexIndex;\r\n        \r\n        while(processedVertices.length > 2) {\r\n            // if overflowed, start from beginning\r\n            const currLen = processedVertices.length;\r\n            if (i >= currLen) {\r\n                i -= currLen;\r\n            }\r\n    \r\n            const prevVertex = i === 0 ? processedVertices[currLen - 1] : processedVertices[i - 1],\r\n                currentVertex = processedVertices[i],\r\n                nextVertex = currLen === i + 1 ? processedVertices[0] : processedVertices[i + 1];\r\n    \r\n            \r\n            const cs = vectorsCS(prevVertex, currentVertex, nextVertex);\r\n    \r\n            if (cs < 0) {\r\n                triangulatedPolygon[pointer] = prevVertex[0];\r\n                pointer++;\r\n                triangulatedPolygon[pointer] = prevVertex[1];\r\n                pointer++;\r\n                triangulatedPolygon[pointer] = currentVertex[0];\r\n                pointer++;\r\n                triangulatedPolygon[pointer] = currentVertex[1];\r\n                pointer++;\r\n                triangulatedPolygon[pointer] = nextVertex[0];\r\n                pointer++;\r\n                triangulatedPolygon[pointer] = nextVertex[1];\r\n                pointer++;\r\n                processedVertices = processedVertices.filter((val, index) => index !== i);\r\n            } else {\r\n                skipCount += 1;\r\n                if (skipCount > processedVerticesLen) {\r\n                    // sometimes fails\r\n                    Warning(WARNING_CODES.TRIANGULATE_ISSUE, \"Can't extract all triangles vertices.\");\r\n                    return [triangulatedPolygon, pointer];\r\n                }\r\n                i++;\r\n            }\r\n            // if (cs < 0): it's jumping over next vertex, maybe not a good solution? Moving up\r\n            // i++;\r\n        }\r\n        \r\n        return [triangulatedPolygon, pointer];\r\n    }\r\n\r\n    #bindPolygon(vertices) {\r\n        this.#gl.bufferData(\r\n            this.#gl.ARRAY_BUFFER, \r\n            new Float32Array(vertices),\r\n            this.#gl.STATIC_DRAW);\r\n    }\r\n\r\n    #setSingleRectangle(width, height) {\r\n        const x1 = 0,\r\n            x2 = 0 + width,\r\n            y1 = 0,\r\n            y2 = 0 + height;\r\n        this.#gl.bufferData(this.#gl.ARRAY_BUFFER, \r\n            new Float32Array([\r\n                x1, y1,\r\n                x2, y1,\r\n                x1, y2,\r\n                x1, y2,\r\n                x2, y1,\r\n                x2, y2]), this.#gl.STATIC_DRAW);\r\n    }\r\n    /*------------------------------------\r\n     * End of Predefined Drawing programs\r\n     -------------------------------------*/\r\n\r\n    /**-----------------------------------\r\n     * Textures\r\n     ------------------------------------*/\r\n    #updateWebGlTexture(gl, texture, textureImage, textureNum = 0, useMipMaps = false) {\r\n        this.#bindTexture(gl, texture, textureNum);\r\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, textureImage);\r\n        // LINEAR filtering is better for images and tiles, but for texts it produces a small blur\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\r\n        // for textures not power of 2 (texts for example)\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, useMipMaps ? gl.LINEAR_MIPMAP_LINEAR : gl.LINEAR);\r\n    }\r\n\r\n    #updateTextWebGlTexture(gl, texture, textureImage, textureNum = 0) {\r\n        this.#bindTexture(gl, texture, textureNum);\r\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, textureImage);\r\n        // LINEAR filtering is better for images and tiles, but for texts it produces a small blur\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\r\n        // for textures not power of 2 (texts for example)\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\r\n    }\r\n\r\n    #bindTexture(gl, texture, textureNum = 0) {\r\n        gl.activeTexture(gl.TEXTURE0 + textureNum);\r\n        gl.bindTexture(gl.TEXTURE_2D, texture);\r\n    }\r\n\r\n    #removeTexture(gl, texture) {\r\n        gl.deleteTexture(texture);\r\n    }\r\n    /*------------------------------------\r\n     * End Textures\r\n    --------------------------------------*/\r\n\r\n    isPowerOfTwo(value) {\r\n        return (value & (value - 1)) === 0;\r\n    }\r\n\r\n    nextHighestPowerOfTwo(x) {\r\n        --x;\r\n        for (var i = 1; i < 32; i <<= 1) {\r\n            x = x | x >> i;\r\n        }\r\n        return x + 1;\r\n    }\r\n}","import { CONST } from \"./constants.js\";\r\n/**\r\n * Settings object, should be passed as a parameter to System.constructor().\r\n */\r\nexport class SystemSettings {\r\n    /**\r\n     * @hideconstructor\r\n     */\r\n    constructor(){}\r\n    /**\r\n     * DEBUG/PRODUCTION, for debug mode system Logger will show debug information in the console\r\n     */\r\n    static mode = CONST.MODE.DEBUG;\r\n\r\n    static gameOptions = {\r\n        // no other variants only WEBGL for now\r\n        library: CONST.LIBRARY.WEBGL,\r\n        optimization: CONST.OPTIMIZATION.NATIVE_JS.OPTIMIZED,\r\n        optimizationWASMUrl: \"./src/wa/calculateBufferDataWat.wasm\",\r\n        optimizationAssemblyUrl: \"/src/wa/calculateBufferDataAssembly.wasm\",\r\n        loadingScreen: {\r\n            backgroundColor:  \"rgba(128, 128, 128, 0.6)\",\r\n            loadingBarBg: \"rgba(128, 128, 128, 1)\",\r\n            loadingBarProgress: \"rgba(128, 128, 128, 0.2)\",\r\n        },\r\n        render: {\r\n            minCycleTime: 16.666, // is turned off from 1.5.3\r\n            cyclesTimeCalc: {\r\n                check: CONST.OPTIMIZATION.CYCLE_TIME_CALC.AVERAGES,\r\n                averageFPStime: 10000\r\n            },\r\n            boundaries: {\r\n                mapBoundariesEnabled: true,\r\n                realtimeCalculations: true,\r\n                wholeWorldPrecalculations: false\r\n            },\r\n            \r\n        },\r\n        debug: {\r\n            checkWebGlErrors: false,\r\n            debugMobileTouch: false,\r\n            boundaries: {\r\n                drawLayerBoundaries: false,\r\n                drawObjectBoundaries: false,\r\n                boundariesColor: \"rgba(224, 12, 21, 0.6)\",\r\n                boundariesWidth: 2\r\n            },\r\n            delayBetweenObjectRender: false, // 1 sec delay for debug proposes\r\n        }\r\n    };\r\n    \r\n\r\n    static network = {\r\n        // disable INetwork by default\r\n        enabled: false,\r\n        address: \"https://gameserver.reslc.ru:9009\",\r\n        gatherRoomsInfoInterval: 5000\r\n    };\r\n\r\n    static canvasMaxSize = {\r\n        width: 1800,\r\n        height: 1800\r\n    };\r\n\r\n    static worldSize = {\r\n        width: 960,\r\n        height: 960\r\n    };\r\n\r\n    static defaultCanvasKey = \"default\";\r\n\r\n    static customSettings = {};\r\n}","export const CONST = {\r\n    MODE: {\r\n        DEBUG: \"DEBUG\",\r\n        PRODUCTION: \"PRODUCTION\"\r\n    },\r\n    SCREENS: {},\r\n    AUDIO: {},\r\n    CONNECTION_STATUS: {\r\n        DISCONNECTED: \"disconnected\",\r\n        CONNECTED: \"connected\",\r\n        CONNECTION_LOST: \"connection lost\"\r\n    },\r\n    EVENTS: {\r\n        SYSTEM: {\r\n            START_PAGE:\"START_PAGE\",\r\n            STOP_PAGE: \"STOP_PAGE\",\r\n            RENDER: {\r\n                START: \"start\",\r\n                END: \"end\"\r\n            }\r\n        },\r\n        GAME: {\r\n            BOUNDARIES_COLLISION: \"BOUNDARIES_COLLISION\",\r\n            OBJECTS_COLLISION: \"OBJECTS_COLLISION\"\r\n        },\r\n        WEBSOCKET: {\r\n            SERVER_CLIENT: {\r\n                CONNECTION_STATUS_CHANGED: \"CONNECTION_STATUS_CHANGED\",\r\n                ROOMS_INFO: \"roomsInfo\",\r\n                CREATED: \"created\",\r\n                JOINED: \"joined\",\r\n                FULL: \"full\",\r\n                DISCONNECTED: \"disconnected\",\r\n                SERVER_MESSAGE: \"message\",\r\n                RESTARTED: \"restarted\",\r\n            },\r\n            CLIENT_SERVER: {\r\n                ROOMS_INFO_REQUEST: \"gatherRoomsInfo\",\r\n                CREATE_OR_JOIN: \"create or join\",\r\n                RESTART_REQUEST: \"restart\",\r\n                CLIENT_MESSAGE: \"message\"\r\n            }\r\n        }\r\n    },\r\n    WEBGL: {\r\n        DRAW_PROGRAMS: {\r\n            PRIMITIVES: \"drawPrimitives\",\r\n            IMAGES: \"drawImages\"\r\n        }\r\n    },\r\n    DRAW_TYPE: {\r\n        RECTANGLE: \"rect\",\r\n        CONUS: \"conus\",\r\n        CIRCLE: \"circle\",\r\n        POLYGON: \"polygon\",\r\n        LINE: \"line\",\r\n        TEXT: \"text\",\r\n        IMAGE: \"image\"\r\n    },\r\n    LAYERS: {\r\n        DEFAULT: \"default-view-layer\",\r\n        BOUNDARIES: \"boundaries-view-layer\"\r\n    },\r\n    GAME_OPTIONS: {},\r\n    LIBRARY: {\r\n        WEBGL: \"webgl\"\r\n    },\r\n    OPTIMIZATION: {\r\n        CYCLE_TIME_CALC: {\r\n            AVERAGES: \"AVERAGES\",\r\n            CURRENT: \"CURRENT\"\r\n        },\r\n        NATIVE_JS: {\r\n            NOT_OPTIMIZED: \"NOT_OPTIMIZED\",\r\n            OPTIMIZED: \"OPTIMIZED\"\r\n        },\r\n        WEB_ASSEMBLY: {\r\n            ASSEMBLY_SCRIPT: \"ASSEMBLY_SCRIPT\",\r\n            NATIVE_WAT: \"WASM\"\r\n        }\r\n    }\r\n};\r\n\r\nexport const ERROR_CODES = {\r\n    CREATE_INSTANCE_ERROR: \"CREATE_INSTANCE_ERROR\",\r\n    STAGE_NOT_EXIST: \"STAGE_NOT_EXIST\",\r\n    ELEMENT_NOT_EXIST: \"ELEMENT_NOT_EXIST\",\r\n    FILE_NOT_EXIST: \"FILE_NOT_EXIST\",\r\n    CANT_GET_THE_IMAGE: \"CANT_GET_THE_IMAGE\",\r\n    UNEXPECTED_INPUT_PARAMS: \"UNEXPECTED_INPUT_PARAMS\",\r\n    UNHANDLED_EXCEPTION: \"UNHANDLED_EXCEPTION\",\r\n    CANVAS_KEY_NOT_SPECIFIED: \"CANVAS_KEY_NOT_SPECIFIED\",\r\n    CANVAS_WITH_KEY_NOT_EXIST: \"CANVAS_WITH_KEY_NOT_EXIST\",\r\n    WRONG_TYPE_ERROR: \"WRONG_TYPE_ERROR\",\r\n    UNEXPECTED_WS_MESSAGE: \"UNEXPECTED_WS_MESSAGE\",\r\n    UNEXPECTED_PLAYER_ID: \"UNEXPECTED_PLAYER_ID\",\r\n    UNEXPECTED_BULLET_ID: \"UNEXPECTED_BULLET_ID\",\r\n    UNEXPECTED_EVENT_NAME: \"UNEXPECTED_EVENT_NAME\",\r\n    WEBGL_ERROR: \"WEBGL_ERROR\",\r\n    DRAW_PREPARE_ERROR: \"DRAW_PREPARE_ERROR\",\r\n    ANOTHER_STAGE_ACTIVE: \"ANOTHER_STAGE_ACTIVE\",\r\n    UNEXPECTED_TILE_ID: \"UNEXPECTED_TILE_ID\",\r\n    UNEXPECTED_TOUCH_AREA: \"UNEXPECTED TOUCH AREA\",\r\n    UNEXPECTED_METHOD_TYPE: \"UNEXPECTED METHOD TYPE\"\r\n};\r\n\r\nexport const WARNING_CODES =  {\r\n    FILE_LOADING_ISSUE: \"FILE_LOADING_ISSUE\",\r\n    ASSETS_NOT_READY: \"ASSETS_NOT_READY\",\r\n    NOT_FOUND: \"NOT_FOUND\",\r\n    NOT_TESTED: \"NOT_TESTED\",\r\n    WORLD_DIMENSIONS_NOT_SET: \"WORLD_DIMENSIONS_NOT_SET\",\r\n    INCORRECT_RENDER_TYPE: \"INCORRECT_RENDER_TYPE\",\r\n    UNHANDLED_DRAW_ISSUE: \"UNHANDLED_DRAW_ISSUE\",\r\n    UNEXPECTED_WORLD_SIZE: \"UNEXPECTED_WORLD_SIZE\",\r\n    AUDIO_ALREADY_REGISTERED: \"AUDIO_ALREADY_REGISTERED\",\r\n    AUDIO_NOT_REGISTERED: \"AUDIO_NOT_REGISTERED\",\r\n    AUDIO_NOT_LOADED: \"AUDIO_NOT_LOADED\",\r\n    UNKNOWN_DRAW_OBJECT: \"UNKNOWN_DRAW_OBJECT\",\r\n    METHOD_NOT_IMPLEMENTED: \"METHOD_NOT_IMPLEMENTED\",\r\n    POLYGON_VERTICES_NOT_CORRECT: \"POLYGON_VERTICES_NOT_CORRECT\",\r\n    MODULE_ALREADY_INSTALLED: \"MODULE_ALREADY_INSTALLED\",\r\n    DEPRECATED_PARAMETER: \"DEPRECATED_PARAMETER\",\r\n    NEW_BEHAVIOR_INTRODUCED: \"NEW_BEHAVIOR_INTRODUCED\",\r\n    TEXTURE_IMAGE_TEMP_OVERFLOW: \"TEXTURE_IMAGE_TEMP_OVERFLOW\",\r\n    TRIANGULATE_ISSUE: \"TRIANGULATE_ISSUE\"\r\n};","import { GameStage } from \"../base/GameStage.js\";\n\nexport class LoadingStage extends GameStage {\n    #total = 0;\n    #loaded = 0;\n    #barWidth = 0;\n    register() {\n        //this.iLoader.addImage(logoKey, \"./images/icon.png\");\n    }\n\n    init() {\n        const [w, h] = this.stageData.canvasDimensions,\n            barWidth = w/3,\n            barHeight = 20;\n        //this.logo = this.draw.image(w/2, h/2, 300, 200, logoKey);\n        this.background = this.draw.rect(0, 0, w, h, this.systemSettings.gameOptions.loadingScreen.backgroundColor);  \n        this.loadingBarBg = this.draw.rect(w/2 - (barWidth/2), h/2 - (barHeight/2), barWidth, barHeight, this.systemSettings.gameOptions.loadingScreen.loadingBarBg);\n        this.loadingBarProgress = this.draw.rect(w/2 - (barWidth/2), h/2 - (barHeight/2), barWidth, barHeight, this.systemSettings.gameOptions.loadingScreen.loadingBarProgress);\n        this.text = this.draw.text(w/2 - 20, h/2 - 2 * barHeight, \"JsGE\", \"24px sans-serif\", \"black\");\n        this.#barWidth = barWidth;\n    }\n\n    _progress = (loaded) => {\n        const widthPart = this.#barWidth / this.#total;\n\n        this.#loaded = loaded;\n        const newWidth = widthPart * this.#loaded;\n        // sometimes additional items are added to queue in load process\n        // to avoid bar width overflow additional check added below:\n        const applyWidth = loaded > this.#total ? this.#barWidth : newWidth;\n\n        this.loadingBarProgress.width = applyWidth;\n    };\n\n    start(options) {\n        this.#total = options.total;\n    }\n\n    // a workaround for checking upload progress before render\n    //get iLoader() {\n    //    return ({filesWaitingForUpload:0});\n    //}\n} ","import { System } from \"./base/System.js\";\nimport { GameStage } from \"./base/GameStage.js\";\nimport { DrawImageObject } from \"./base/2d/DrawImageObject.js\";\nimport { ISystemAudio } from \"./base/ISystemAudio.js\";\nimport * as Primitives from \"./base/2d/Primitives.js\";\nimport { SystemSettings } from \"./configs.js\";\nimport { CONST } from \"./constants.js\";\nimport * as utils from \"./utils.js\";\n\nexport { System, SystemSettings, CONST, GameStage, DrawImageObject, ISystemAudio, Primitives, utils };","import { Vector } from \"./base/2d/Primitives.js\";\n\nfunction isMobile() {\n    return /Android|webOS|iPhone|iPad|iPod|Opera Mini/i.test(navigator.userAgent) ;\n}\n\nfunction isSafari() {\n    return /^((?!chrome|android).)*safari/i.test(navigator.userAgent);\n}\n\nfunction pointToCircleDistance(x, y, circle) {\n    const pointToCircleCenterDistance = new Vector(x, y, circle.x, circle.y).length;\n    return pointToCircleCenterDistance - circle.r;\n}\n\nfunction countClosestTraversal(line, sight) {\n    const x1 = sight.x1,\n        y1 = sight.y1,\n        x2 = sight.x2,\n        y2 = sight.y2;\n    const x3 = line.x1,\n        y3 = line.y1,\n        x4 = line.x2,\n        y4 = line.y2;\n\n    const r_px = x1,\n        r_py = y1,\n        r_dx = x2-x1,\n        r_dy = y2-y1;\n\n    const s_px = x3,\n        s_py = y3,\n        s_dx = x4-x3,\n        s_dy = y4-y3;\n\n    const r_mag = Math.sqrt(r_dx*r_dx+r_dy*r_dy),\n        s_mag = Math.sqrt(s_dx*s_dx+s_dy*s_dy);\n    if(r_dx/r_mag==s_dx/s_mag && r_dy/r_mag==s_dy/s_mag){\n        return null;\n    }\n\n    const T2 = (r_dx*(s_py-r_py) + r_dy*(r_px-s_px))/(s_dx*r_dy - s_dy*r_dx),\n        T1 = (s_px+s_dx*T2-r_px)/r_dx;\n\n    if(T1<0 || isNaN(T1)) return null;\n    if(T2<0 || T2>1) return null;\n\n    return {\n        x: r_px+r_dx*T1,\n        y: r_py+r_dy*T1,\n        p: T1\n    };\n}\n\n/**\n * \n * @param {{x1:number, y1:number, x2:number, y2:number}} line1 \n * @param {{x1:number, y1:number, x2:number, y2:number}} line2 \n * @returns {{x:number, y:number, p:number} | undefined}\n * @ignore\n */\nfunction countClosestTraversal2(line1, line2) {\n    const x1 = line2.x1,\n        y1 = line2.y1,\n        x2 = line2.x2,\n        y2 = line2.y2;\n    const x3 = line1.x1,\n        y3 = line1.y1,\n        x4 = line1.x2,\n        y4 = line1.y2;\n\n    const det = (x1 - x2) * (y3 - y4) - (y1 - y2) * (x3 - x4);\n    // lines are parallel, or coincident\n    if (det === 0){\n        return;\n    }\n    let x = ((x1*y2 - y1*x2) * (x3 - x4) - (x1 - x2) * (x3*y4 - y3*x4)) / det;\n    let y = ((x1*y2 - y1*x2) * (y3 - y4) - (y1 - y2) * (x3*y4 - y3*x4)) / det;\n    const point = {x, y};\n    \n    if (isPointOnTheLine(point, line1, 0.0000000000001) && isPointOnTheLine(point, line2, 0.0000000000001)) {\n        const p = Math.sqrt(Math.pow((x - x1), 2) + Math.pow((y - y1), 2));\n        return {x, y, p};\n    } else {\n        return;\n    }\n}\n\nfunction angle_2points(x1, y1, x2, y2) {\n    return Math.atan2(y2 - y1, x2 - x1);\n}\n\nfunction angle_3points(a, b, c) {\n    const x1 = a.x - b.x,\n        x2 = c.x - b.x,\n        y1 = a.y - b.y,\n        y2 = c.y - b.y,\n        d1 = Math.sqrt(x1 * x1 + y1 * y1),\n        d2 = Math.sqrt(x2 * x2 + y2 * y2);\n    //console.log(\"angle: \", (Math.acos((x1* x2 + y1 * y2) / (d1 * d2))* 180) / Math.PI);\n    return Math.acos((x1* x2 + y1 * y2) / (d1 * d2));\n}\n\nfunction dotProductWithAngle(lenA, lenB, angle) {\n    return lenA * lenB * Math.cos(angle);\n}\n\nfunction dotProduct(vec1, vec2) {\n    return vec1.x * vec2.x + vec1.y * vec2.y;\n}\n\nfunction crossProduct(a, b) {\n    return (a.x * b.y - b.x * a.y);\n}\n\nfunction isPointOnTheLine(point, line, m_error = 0) {\n    return  (\n        ((point.x >= (line.x1 - m_error)) && (point.x <= (line.x2 + m_error))) || \n                ((point.x <= (line.x1 + m_error)) && (point.x >= (line.x2 - m_error)))\n    ) && (\n        ((point.y >= (line.y1 - m_error)) && (point.y <= (line.y2 + m_error))) || \n                ((point.y <= (line.y1 + m_error)) && (point.y >= (line.y2 - m_error)))\n    );\n}\n\nfunction countDistance(obj1, obj2) {\n    return new Vector(obj1.x, obj1.y, obj2.x, obj2.y).length;\n}\n\nfunction isLineShorter(line1, line2) {\n    return (new Vector(line1.x1, line1.y1, line1.x2, line1.y2)).length < (new Vector(line2.x1, line2.y1, line2.x2, line2.y2)).length;\n}\n\nfunction isPointLineIntersect(point, line) {\n    const lineL = new Vector(line.x1, line.y1, line.x2, line.y2).length,\n        lengthAB = new Vector(line.x1, line.y1, point.x, point.y).length + new Vector(line.x2, line.y2, point.x, point.y).length;\n\n    if (lengthAB <= lineL + 0.2) {\n        //console.log(\"point to line intersect. line len: \" + lineL + \", line AB len: \" + lengthAB);\n        return true;\n    }\n    return false;\n}\n\n/**\n * \n * @param {Array<Array<number>>} polygon \n * @param {{x1:number, y1:number, x2:number, y2:number}} line \n * @returns {{x:number, y:number, p:number} | null}\n * @ignore\n */\nfunction isPolygonLineIntersect(polygon, line) {\n    const len = polygon.length;\n    for (let i = 0; i < len; i+=1) {\n        let curr = polygon[i],\n            next = polygon[i+1];\n        //if next item not exist and current is not first\n        if (!next) {\n            // if current vertex is not the first one\n            if (!(curr[0] === polygon[0][0] && curr[1] === polygon[0][1])) {\n                next = polygon[0];\n            } else {\n                continue;\n            }\n        }\n        const edge = { x1: curr[0], y1: curr[1], x2: next[0], y2: next[1] };\n        const intersection = countClosestTraversal2(edge, line);\n        if (intersection) {\n            return intersection;\n        }\n    }\n    if (polygon[len-1][0] !== polygon[0][0] && polygon[len-1][1] !== polygon[0][1]) {\n        //check one last item\n        const curr = polygon[len - 1],\n            next = polygon[0];\n        const edge = { x1: curr[0], y1: curr[1], x2: next[0], y2: next[1] };\n        const intersection = countClosestTraversal2(edge, line);\n        if (intersection) {\n            return intersection;\n        }\n    }\n    return null;\n}\n\nfunction isPointPolygonIntersect(x, y, polygon) {\n    const len = polygon.length;\n    \n    for (let i = 0; i < len; i+=1) {\n        let vertex1 = polygon[i],\n            vertex2 = polygon[i + 1];\n\n        // if last vertex, set vertex2 as the first\n        if (!vertex2) {\n            vertex2 = polygon[0];\n        }\n\n        if (isPointLineIntersect({x,y}, {x1: vertex1[0], y1: vertex1[1], x2: vertex2[0], y2: vertex2[1]})) {\n            return true;\n        }\n    }\n    return false;\n}\n\nfunction isPointInsidePolygon(x, y, polygon) {\n    const len = polygon.length;\n    let intersections = 0;\n\n    for (let i = 0; i < len; i++) {\n        let vertex1 = polygon[i],\n            vertex2 = polygon[i + 1] ? polygon[i + 1] : polygon[0],\n            x1 = vertex1[0],\n            y1 = vertex1[1],\n            x2 = vertex2[0],\n            y2 = vertex2[1];\n            \n        if (y < y1 !== y < y2 && \n            x < (x2 - x1) * (y - y1) / (y2 - y1) + x1) {\n            intersections++;\n        }\n    }\n    \n    if (intersections > 0) {\n        if (intersections % 2 === 0) {\n            return false;\n        } else {\n            return true;\n        }\n    } else {\n        return false;\n    }\n}\n\nfunction isPointRectIntersect(x, y, rect) {\n    if (x >= rect.x && x <= rect.width + rect.x && y >= rect.y && y <= rect.y + rect.height) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n/**\n * \n * @param {number} x \n * @param {number} y \n * @param {{x:number, y:number, r:number}} circle \n * @returns {boolean}\n */\nfunction isPointCircleIntersect(x, y, circle) {\n    const radius = circle.r,\n        lineToCircleCenter = new Vector(x, y, circle.x, circle.y),\n        pointCircleLineLength = lineToCircleCenter.length;\n        \n    if (pointCircleLineLength < radius)\n        return true;\n    else\n        return false;\n}\n\nfunction isCircleLineIntersect(x, y, r, line) {\n    const x1 = line.x1,\n        y1 = line.y1,\n        x2 = line.x2,\n        y2 = line.y2,\n        vec1 = {x: x1 - x, y: y1-y}, //new Vector(x, y, x1, y1),\n        vec2 = {x: x2 - x, y: y2-y}, //new Vector(x, y, x2, y2),\n        vec3 = {x: x2 - x1, y: y2-y1}, //new Vector(x1 ,y1, x2, y2),\n        vec4 = {x: x1 - x2, y: y1-y2}, //new Vector(x2, y2, x1, y1),\n        vec3Len = Math.sqrt(Math.pow(vec3.x, 2) + Math.pow(vec3.y, 2)),//vec3.length,\n        dotP1 = dotProduct(vec1, vec4),\n        dotP2 = dotProduct(vec2, vec3);\n        // checks if the line is inside the circle,\n        // max_dist = Math.max(vec1Len, vec2Len);\n    let min_dist;\n    \n    if (dotP1 > 0 && dotP2 > 0) {\n        min_dist = crossProduct(vec1,vec2)/vec3Len;\n        if (min_dist < 0) {\n            min_dist *= -1;\n        }\n    } else {\n        min_dist = Math.min(vec1.length, vec2.length);\n    }\n    \n    if (min_dist <= r) { // && max_dist >= r) {\n        return true;\n    } else {\n        return false;\n    } \n}\n\n/**\n * \n * @param {Array<number>} ellipse - x,y,radX,radY\n * @param {Array<Array<number>>} line [x1,y1],[x2,y2]\n */\nfunction isEllipseLineIntersect(ellipse, line) {\n    const x = ellipse[0],\n        y = ellipse[1],\n        radX = ellipse[2],\n        radY = ellipse[3],\n        x1 = line[0][0],\n        y1 = line[0][1],\n        x2 = line[1][0],\n        y2 = line[1][1],\n        lineAToElCenter = { x: x - x1, y: y - y1 }, //new Vector(x, y, x1, y1),\n        lineBToElCenter = { x: x - x2, y: y - y2 }, //new Vector(x, y, x2, y2),\n        lineAToElCenterLen = Math.sqrt(Math.pow(lineAToElCenter.x, 2) + Math.pow(lineAToElCenter.y, 2)),\n        lineBToElCenterLen = Math.sqrt(Math.pow(lineBToElCenter.x, 2) + Math.pow(lineBToElCenter.y, 2)),\n        lineToCenterLenMin = Math.min(lineAToElCenterLen, lineBToElCenterLen),\n        ellipseMax = Math.max(radX, radY);\n        \n    if (lineToCenterLenMin > ellipseMax) {\n        return false;\n    }\n    \n    const traversalLine = lineToCenterLenMin === lineAToElCenterLen ? lineAToElCenter : lineBToElCenter,\n        angleToAxisX = Math.atan2(traversalLine.y, traversalLine.x);\n    \n    const intersectX = Math.cos(angleToAxisX) * radX,\n        intersectY = Math.sin(angleToAxisX) * radY,\n        lineToCenter = { x: 0 - intersectX, y: 0 - intersectY },\n        intersectLineLen = Math.sqrt(Math.pow(lineToCenter.x, 2) + Math.pow(lineToCenter.y, 2));\n    //console.log(\"lenToCheck: \", lenToCheck);\n    //console.log(\"x: \", intersectX);\n    if (lineToCenterLenMin > intersectLineLen) {\n        return false;\n    }\n    return true;\n}\n\n/**\n * \n * @param {Array<number>} ellipse - x,y,radX,radY\n * @param {{x:number, y:number, r:number}} circle\n * @returns {{x:number, y:number, p:number} | boolean}\n */\nfunction isEllipseCircleIntersect(ellipse, circle) {\n    const ellipseX = ellipse[0],\n        ellipseY = ellipse[1],\n        ellipseToCircleLine = { x: ellipseX - circle.x, y: ellipseY - circle.y },\n        len = Math.sqrt(Math.pow(ellipseToCircleLine.x, 2) + Math.pow(ellipseToCircleLine.y, 2)),\n        maxRad = Math.max(ellipse[2], ellipse[3]);\n    // no collisions for sure\n    if (len > (maxRad + circle.r)) {\n        return false;\n    } else {\n        // check possible collision\n        const angle = angle_2points(ellipseX, ellipseY, circle.x, circle.y),\n            traversalX = ellipseX + (ellipse[2] * Math.cos(angle)),\n            traversalY =  ellipseY + (ellipse[3] * Math.sin(angle)),\n            vecTrX = ellipseX - traversalX,\n            vecTrY = ellipseY - traversalY,\n            traversalLen = Math.sqrt(Math.pow(vecTrX, 2) + Math.pow(vecTrY, 2)) + circle.r;\n        if (len <= traversalLen) {\n            return {x: vecTrX, y: vecTrY, p:1};\n        } else {\n            return false;\n        }\n    }\n    \n}\n\n/**\n * \n * @param {Array<number>} ellipse - x,y,radX,radY\n * @param {Array<Array<number>>} polygon - x,y\n * @returns {boolean}\n */\nfunction isEllipsePolygonIntersect(ellipse, polygon) {\n    const len = polygon.length;\n\n    for (let i = 0; i < len; i+=1) {\n        let vertex1 = polygon[i],\n            vertex2 = polygon[i + 1];\n\n        // if last vertex, set vertex2 as the first\n        if (!vertex2) {\n            vertex2 = polygon[0];\n        }\n\n        if (isEllipseLineIntersect(ellipse, [vertex1, vertex2])) {\n            return true;\n        }\n    }\n    return false;\n}\n\nfunction generateUniqId() {\n    return Math.round(Math.random() * 1000000); \n}\n\nfunction randomFromArray(array) {\n    return array[Math.floor(Math.random()*array.length)];\n}\n\nfunction verticesArrayToArrayNumbers(array) {\n    const len = array.length,\n        numbers = [];\n    for (let i = 0; i < len; i++) {\n        const vertex = array[i];\n        numbers.push([vertex.x, vertex.y]);\n    }\n    return numbers;\n}\n\n/**\n * @param {number} x\n * @param {number} y\n * @param {number} radiusX\n * @param {number} radiusY\n * @param {number} [angle = 2 * Math.PI]\n * @param {number} [step = Math.PI/12] \n * @returns {Array<Array<number>>}\n */\nfunction calculateEllipseVertices(x = 0, y = 0, radiusX, radiusY, angle = 2*Math.PI, step = Math.PI/8) {\n    let ellipsePolygonCoords = [];\n\n    for (let r = 0; r <= angle; r += step) {\n        let x2 = Math.cos(r) * radiusX + x,\n            y2 = Math.sin(r) * radiusY + y;\n\n        ellipsePolygonCoords.push([x2, y2]);\n    }\n\n    return ellipsePolygonCoords;\n}\n\nexport { \n    isMobile, \n    isSafari, \n    pointToCircleDistance, \n    countClosestTraversal, \n    countClosestTraversal2,\n    angle_2points,\n    angle_3points,\n    dotProductWithAngle,\n    dotProduct,\n    crossProduct,\n    isPointOnTheLine,\n    isLineShorter,\n    isPointLineIntersect,\n    isPointPolygonIntersect,\n    isPointRectIntersect,\n    isPointCircleIntersect,\n    isPolygonLineIntersect,\n    isCircleLineIntersect,\n    isEllipseLineIntersect,\n    isEllipseCircleIntersect,\n    isEllipsePolygonIntersect,\n    isPointInsidePolygon,\n    generateUniqId,\n    randomFromArray,\n    verticesArrayToArrayNumbers,\n    countDistance,\n    calculateEllipseVertices };","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.f = {};\n// This file contains only the entry chunk.\n// The chunk loading function for additional chunks\n__webpack_require__.e = (chunkId) => {\n\treturn Promise.all(Object.keys(__webpack_require__.f).reduce((promises, key) => {\n\t\t__webpack_require__.f[key](chunkId, promises);\n\t\treturn promises;\n\t}, []));\n};","// This function allow to reference async chunks\n__webpack_require__.u = (chunkId) => {\n\t// return url for filenames based on template\n\treturn \"\" + chunkId + \".index.es6.js\";\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","var inProgress = {};\nvar dataWebpackPrefix = \"jsge:\";\n// loadScript function to load a script via script tag\n__webpack_require__.l = (url, done, key, chunkId) => {\n\tif(inProgress[url]) { inProgress[url].push(done); return; }\n\tvar script, needAttach;\n\tif(key !== undefined) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tfor(var i = 0; i < scripts.length; i++) {\n\t\t\tvar s = scripts[i];\n\t\t\tif(s.getAttribute(\"src\") == url || s.getAttribute(\"data-webpack\") == dataWebpackPrefix + key) { script = s; break; }\n\t\t}\n\t}\n\tif(!script) {\n\t\tneedAttach = true;\n\t\tscript = document.createElement('script');\n\t\tscript.type = \"module\";\n\t\tscript.charset = 'utf-8';\n\t\tscript.timeout = 120;\n\t\tif (__webpack_require__.nc) {\n\t\t\tscript.setAttribute(\"nonce\", __webpack_require__.nc);\n\t\t}\n\t\tscript.setAttribute(\"data-webpack\", dataWebpackPrefix + key);\n\t\tscript.src = url;\n\t}\n\tinProgress[url] = [done];\n\tvar onScriptComplete = (prev, event) => {\n\t\t// avoid mem leaks in IE.\n\t\tscript.onerror = script.onload = null;\n\t\tclearTimeout(timeout);\n\t\tvar doneFns = inProgress[url];\n\t\tdelete inProgress[url];\n\t\tscript.parentNode && script.parentNode.removeChild(script);\n\t\tdoneFns && doneFns.forEach((fn) => (fn(event)));\n\t\tif(prev) return prev(event);\n\t};\n\tvar timeout = setTimeout(onScriptComplete.bind(null, undefined, { type: 'timeout', target: script }), 120000);\n\tscript.onerror = onScriptComplete.bind(null, script.onerror);\n\tscript.onload = onScriptComplete.bind(null, script.onload);\n\tneedAttach && document.head.appendChild(script);\n};","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","var scriptUrl;\nif (typeof import.meta.url === \"string\") scriptUrl = import.meta.url\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t\"main\": 0\n};\n\n__webpack_require__.f.j = (chunkId, promises) => {\n\t\t// JSONP chunk loading for javascript\n\t\tvar installedChunkData = __webpack_require__.o(installedChunks, chunkId) ? installedChunks[chunkId] : undefined;\n\t\tif(installedChunkData !== 0) { // 0 means \"already installed\".\n\n\t\t\t// a Promise means \"currently loading\".\n\t\t\tif(installedChunkData) {\n\t\t\t\tpromises.push(installedChunkData[2]);\n\t\t\t} else {\n\t\t\t\tif(true) { // all chunks have JS\n\t\t\t\t\t// setup Promise in chunk cache\n\t\t\t\t\tvar promise = new Promise((resolve, reject) => (installedChunkData = installedChunks[chunkId] = [resolve, reject]));\n\t\t\t\t\tpromises.push(installedChunkData[2] = promise);\n\n\t\t\t\t\t// start chunk loading\n\t\t\t\t\tvar url = __webpack_require__.p + __webpack_require__.u(chunkId);\n\t\t\t\t\t// create error before stack unwound to get useful stacktrace later\n\t\t\t\t\tvar error = new Error();\n\t\t\t\t\tvar loadingEnded = (event) => {\n\t\t\t\t\t\tif(__webpack_require__.o(installedChunks, chunkId)) {\n\t\t\t\t\t\t\tinstalledChunkData = installedChunks[chunkId];\n\t\t\t\t\t\t\tif(installedChunkData !== 0) installedChunks[chunkId] = undefined;\n\t\t\t\t\t\t\tif(installedChunkData) {\n\t\t\t\t\t\t\t\tvar errorType = event && (event.type === 'load' ? 'missing' : event.type);\n\t\t\t\t\t\t\t\tvar realSrc = event && event.target && event.target.src;\n\t\t\t\t\t\t\t\terror.message = 'Loading chunk ' + chunkId + ' failed.\\n(' + errorType + ': ' + realSrc + ')';\n\t\t\t\t\t\t\t\terror.name = 'ChunkLoadError';\n\t\t\t\t\t\t\t\terror.type = errorType;\n\t\t\t\t\t\t\t\terror.request = realSrc;\n\t\t\t\t\t\t\t\tinstalledChunkData[1](error);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t\t__webpack_require__.l(url, loadingEnded, \"chunk-\" + chunkId, chunkId);\n\t\t\t\t} else installedChunks[chunkId] = 0;\n\t\t\t}\n\t\t}\n};\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n// no on chunks loaded\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = (parentChunkLoadingFunction, data) => {\n\tvar [chunkIds, moreModules, runtime] = data;\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some((id) => (installedChunks[id] !== 0))) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkId] = 0;\n\t}\n\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunkjsge\"] = self[\"webpackChunkjsge\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(\"./src/index.js\");\n",""],"names":[],"sourceRoot":""}