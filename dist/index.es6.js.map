{"version":3,"file":"index.es6.js","mappings":";;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;;AAEO;AACP;AACA;;AAEA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,YAAY;AACZ;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,UAAU;AACrB,YAAY;AACZ;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,UAAU;AACrB,YAAY;AACZ;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,UAAU;AACrB,YAAY;AACZ;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,kBAAkB,sBAAsB;AACxC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,OAAO;AAClB,YAAY;AACZ;;AAEA;AACA;;AAEA;AACA;;AAEA,kBAAkB,sBAAsB;AACxC;AACA;;AAEA;AACA;AACA,4CAA4C,SAAS;AACrD;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,YAAY;AACZ;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,YAAY;AACZ;AACA;;AAEA;AACA;AACA;;;;;;;;;;;;;;;ACxKA,2BAA2B,qGAAoH,oBAAoB,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,cAAc,kIAAkI,4BAA4B,8CAA8C,YAAY,uBAAuB,cAAc,gDAAgD,YAAY,uBAAuB,cAAc,gDAAgD,cAAc,uBAAuB,cAAc,kDAAkD,UAAU,yHAAyH,kDAAkD,2GAA2G,kDAAkD,2GAA2G,kDAAkD,wCAAwC,cAAc,oGAAoG,cAAc,oGAAoG,gBAAgB,sGAAsG,2BAA2B,wHAAwH,8BAA8B,sCAAsC,QAAQ,MAAM,oBAAoB,GAAG,2DAA2D,MAAM,eAAe,GAAG,mEAAmE,eAAe,mDAAmD,yBAAyB,GAAG,QAAQ,yDAAyD,gCAAgC,mOAAmO,WAAW,mCAAmC,6EAA6E,UAAU,mBAAmB,wHAAwH,QAAQ,4BAA4B,qBAAqB,sCAAsC,sCAAsC,oCAAoC,yCAAyC,gBAAgB,GAAG,GAAG,QAAQ,4BAA4B,kBAAkB,cAAc,+BAA+B,sCAAsC,GAAG,gBAAgB,yCAAyC,gBAAgB,SAAS,GAAG,MAAM,uIAAuI,MAAM,+HAA+H,QAAQ,+CAA+C,0EAA0E,QAAQ,iBAAiB,MAAM,kBAAkB,QAAQ,iBAAiB,MAAM,kBAAkB,UAAU,kCAAkC,QAAQ,iBAAiB,MAAM,kBAAkB,KAAK,iCAAiC,uEAAuE,QAAQ,GAAG,KAAK,mEAAmE,KAAK,mCAAmC,iFAAiF,2CAA2C,GAAG,MAAM,mEAAmE,QAAQ,IAAI,sBAAsB,mBAAmB,oBAAoB;;;;;;;;;;;;;;ACAroI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;;;;;;;;;;;;;;;;ACVP;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB;AACA;AACO;AACP;AACA;AACA,sCAAsC,OAAO;AAC7C;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;ACjCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2GAA2G,IAAI,GAAG,IAAI,SAAS,IAAI;AACnI;AACA;AACA;AACO;AACP;AACA;AACA,wEAAwE;AACxE;AACA,wCAAwC;AACxC;AACA;AACA;AACA;AACA;AACA,wEAAwE;AACxE,kFAAkF;AAClF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,IAAI;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;;;;;;;;;;;;;;;;AChDA;AACa;AACb;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,aAAa,QAAQ;AACrB;AACA;AACO;AACP;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,aAAa,QAAQ;AACrB;AACA;AACO;AACP;AACA,gBAAgB,gBAAgB;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,QAAQ;AACrB;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,YAAY;AACnB;;;;;;;;;;;;;;;ACjDO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;ACVoC;AACnB;AACX,iBAAiB,uDAAe;AACI;AACQ;AACD;AACJ;AACmB;;;;;;;;;;;;;;;;;;;;;ACPd;AACW;AAChB;AACA;AACS;AACX;AACrC,qBAAqB,iEAAO;AACnC;AACA;AACA;AACA,eAAe,eAAe;AAC9B,eAAe,QAAQ;AACvB;AACA;AACA,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,2DAAK;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,2DAAK;AACjC;AACA,QAAQ,+DAAqB;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,gCAAgC;AAChC;AACA,SAAS;AACT;AACA;AACA,8BAA8B,2DAAM;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,gBAAgB;AAChB;AACA;AACA;AACA,sCAAsC;AACtC;AACA,oBAAoB,sDAAQ;AAC5B;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,mBAAmB,4DAAU;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,6BAA6B;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,iBAAiB;AAC3D;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B,wBAAwB,6BAA6B;AACrD;AACA;AACA,+BAA+B,oDAAU;AACzC;AACA;AACA;AACA;AACA,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,UAAU;AACzB,eAAe,QAAQ;AACvB,gBAAgB,QAAQ;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,eAAe,UAAU;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,sDAAQ;;;;;;;;;;;;;;;;;;ACpkBsB;AACO;AACL;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,wBAAwB,iEAAO;AACtC;AACA;AACA;AACA,eAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA;AACA,QAAQ,+DAAqB;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB;AACA;AACA,gBAAgB,WAAW;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB;AACA;AACA;AACA,uBAAuB,8DAAY;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;ACnHuC;AACH;AAC7B;AACP,eAAe,6CAAE;AACjB,aAAa,gDAAO;AACpB;;;;;;;;;;;;;;;;;;;;;;;;ACL4C;AACA;AACG;AACiB;AACJ;AACL;AACE;AACO;AAChE;AACA;AACA,oBAAoB,mDAAc;AAClC;AACA,KAAK;AACL;AACA,CAAC;AACM,sBAAsB,oDAAS;AACtC;AACA;AACA;AACA,eAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,UAAU;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,+CAA+C;AAC9E;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,+DAAa;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,eAAe;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,UAAU;AACzB;AACA;AACA;AACA;AACA,QAAQ,+DAAa;AACrB;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,wDAAK;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,2DAAM;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB;AACA;AACA,qBAAqB;AACrB,8BAA8B,0BAA0B;AACxD;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,UAAU;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACO,sBAAsB,iEAAO;AACpC;AACA;AACA;AACA,eAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA,QAAQ,+DAAqB;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,8CAAI;AACzB;AACA;AACA,oCAAoC,mDAAc;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qEAAqE;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,0EAA0B;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;AClZgE;AACzD;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACM,kBAAkB,oEAAoB,IAAI,uEAAuB;AACjE;AACA;;;;;;;;;;;;;;;;;;;;;ACZqC;AACG;AACH;AACV;AACyE;AAC3D;AAChD;AACA;AACA;AACA;AACO,iBAAiB,oDAAS;AACjC;AACA;AACA;AACA,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,8CAAI;AAClB;AACA;AACA;AACA;AACA;AACA,gBAAgB,4EAAqB;AACrC;AACA,8BAA8B,gEAAS;AACvC,8BAA8B,gEAAS;AACvC,0BAA0B,gEAAS;AACnC;AACA;AACA;AACA;AACA,uDAAuD,wEAAiB;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,oBAAoB;AAC5C;AACA;AACA,YAAY,8DAAY;AACxB;AACA;AACA,qBAAqB,4EAAqB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,4EAAqB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,mEAAQ;AAC5B;AACA;AACA,qBAAqB;AACrB;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,wDAAK;AACnD;AACA;AACA;AACA;AACA;AACA,6BAA6B,2DAAM;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,SAAS;AACzB;AACA;AACA;AACA,iBAAiB,gEAAS;AAC1B;AACA;;;;;;;;;;;;;;;;;AC3LA;AACiD;AACe;AACzD;AACP;AACA;AACA;AACA,kEAAkE,yDAAO;AACzE;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,0DAAU;AACjC;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;AClB+D;AACxD;AACP;AACA;AACA;AACA;AACA;AACA,KAAK,IAAI;AACT;AACA;AACA;AACA;AACO;AACP;AACA,mDAAmD,0DAAU;AAC7D,uDAAuD,0DAAU;AACjE;AACA;AACA,2CAA2C,0DAAU;AACrD,+CAA+C,0DAAU;AACzD;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,OAAO;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;ACnDA,0CAA0C;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,uBAAuB;AACqC;;;;;;;;;;;;;;;;ACb5D;AACA;AACA;AACA;AACA,gBAAgB,kBAAkB;AAClC;AACA;AACO;AACP;AACA,gBAAgB,SAAS;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,SAAS;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;AC1CkE;AACT;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,6DAAoB;AAC3C;AACA,eAAe,qDAAY;AAC3B;AACA;AACA;AACA,kBAAkB,6DAAoB;AACtC;AACA;AACA;AACA,kBAAkB,6DAAoB;AACtC;AACA;AACA;AACA;AACA,wBAAwB,sEAAM;AAC9B;AACA;AACA;AACA,iBAAiB,sBAAsB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA,iEAAe,YAAY,EAAC;;;;;;;;;;;;;;;;AChDgB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,YAAY;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,qDAAY;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,YAAY,EAAC;;;;;;;;;;;;;;;;;;;;;ACxCiB;AACA;AAC7C,2CAA2C;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,4DAAY;AACpB;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA,oBAAoB,2BAA2B;AAC/C,8BAA8B,4DAAY;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AAC6D;;;;;;;;;;;;;;;AC/BpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;ACjE+B;AACQ;AACF;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4CAAG;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,gDAAO;AACxB;AACA;AACA;AACA,4BAA4B,gDAAO;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX,UAAU;AACV;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AAC4C;AAC5C;AACA;AACA;AACA;AACA;AACgF;;;;;;;;;;;;;;;;;;;;;ACxDM;AACjD;AACM;AACd;AACiB;AACU;AACjD,sBAAsB,iEAAO;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,uEAAqB;AAC7B;AACA;AACA;AACA;AACA;AACA,2BAA2B,uDAAO;AAClC;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,uCAAuC,6CAAM;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,UAAU;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,oDAAM;AAChC;AACA;AACA;AACA;AACA;AACA,+BAA+B,0CAAE;AACjC;AACA;AACA,SAAS;AACT;AACA,yBAAyB,0CAAE;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,kCAAkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,0CAAE,0CAA0C,0CAAE,0CAA0C,0CAAE,4CAA4C,0CAAE,4CAA4C,0CAAE;AAC7M;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,0DAAQ;AAChB;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,yBAAyB,8CAAM;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,2BAA2B;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;ACrWO;AACP;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;ACL8C;AACjB;AAC2B;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA,kFAAkF,eAAe;AACjG;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA,wCAAwC,OAAO;AAC/C,IAAI;AACJ;AACO,qBAAqB,iEAAO;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C;AAC5C,YAAY;AACZ;AACA;AACA,4CAA4C;AAC5C,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C;AAC3C,QAAQ;AACR;AACA;AACA,2CAA2C;AAC3C,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,0CAAE;AACd,YAAY,0CAAE;AACd,YAAY,0CAAE;AACd,YAAY,0CAAE;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC;AACnC;AACA;AACA;AACA;AACA,uCAAuC;AACvC;AACA;AACA,qCAAqC;AACrC,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA,kBAAkB,gBAAgB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,mCAAmC;AACzE;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,8DAAgB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,4BAA4B;AACxD;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,MAAM,gEAAkB,QAAQ;AAC9D,aAAa;AACb;AACA;AACA,0BAA0B,MAAM,gEAAkB,mBAAmB;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,gEAAkB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,8DAAgB;AACjC,iBAAiB,qEAAuB;AACxC;AACA;AACA,iBAAiB,4DAAc;AAC/B,iBAAiB,mEAAqB;AACtC;AACA;AACA,iBAAiB,mEAAqB;AACtC;AACA;AACA,iBAAiB,sEAAwB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,4DAAc;AACpC;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0DAA0D,cAAc;AACxE;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,MAAM,mEAAqB,EAAE;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,mBAAmB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,MAAM;AAClC,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,MAAM;AACxC,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,MAAM;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,sBAAsB;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,MAAM;AACzC,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,MAAM;AACzC,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,MAAM;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,sBAAsB;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;AC9rByC;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,uDAAK;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;AC1D0C;AAC1C;AACA;AACA;AACA,WAAW,QAAQ;AACnB,YAAY,QAAQ;AACpB;AACA;AACO;AACP;AACA;AACA;AACA;AACA,uCAAuC;AACvC,aAAa;AACb;AACA;AACA;AACA;AACA,QAAQ,uDAAQ;AAChB,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA,wBAAwB,iBAAiB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,OAAO;AAClB,YAAY,QAAQ;AACpB;AACA;AACO;AACP;AACA,+BAA+B;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC;AACtC;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,iBAAiB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;AClFuD;AACY;AACd;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACA;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,gCAAgC;AACjC;AACA;AACA;AACO;AACP;AACA;AACA;AACA,eAAe,UAAU;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB;AACA;AACA;AACA,gBAAgB,wDAAS;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,6DAAiB;AAChD;AACA;AACA,+BAA+B;AAC/B,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,QAAQ;AACpB;AACO,sBAAsB,iEAAO;AACpC;AACA;AACA;AACA,eAAe,UAAU;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,uDAAQ;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,gBAAgB,QAAQ;AACxnB,YAAY,qBAAqB;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,sBAAsB;AACrC,gBAAgB,eAAe;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,6DAAiB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACtTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA,wCAAwC,OAAO;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;ACjDO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;AC7C+C;AACQ;AACH;AACS;AACR;AACN;AACM;AACjB;AACpC,WAAW,sBAAsB;AACO;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,kBAAkB;AAC3B;AACA;AACO;AACP;AACA,cAAc;AACd;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sFAAsF,0FAA+C;AACrI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,iBAAiB;AAChC,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,8DAAc;AACrD;AACA;AACA;AACA,UAAU;AACV,YAAY,wDAAS,CAAC,kEAAuB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,wDAAS,CAAC,kFAAuC;AACjE,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,yCAAyC;AAC3D,sCAAsC;AACtC;AACA;AACA;AACA;AACA;AACA,gBAAgB,sDAAO,CAAC,kEAAuB;AAC/C;AACA;AACA,4BAA4B,0BAA0B;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,yCAAyC;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,sDAAO,CAAC,kEAAuB;AAC/C;AACA;AACA;AACA,4BAA4B,qBAAqB;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,sDAAO,CAAC,8EAAmC;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,eAAe;AACjD;AACA;AACA;AACA,sCAAsC,eAAe;AACrwBAAwB,gCAAgC;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,sDAAO,CAAC,6EAAkC;AAC1D;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,wDAAS,CAAC,kFAAuC;AAC7D,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,gEAAqB;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,+BAA+B,+DAAoB;AACjE;AACA,cAAc,+BAA+B,iEAAsB;AACnE;AACA,cAAc,+BAA+B,+DAAoB;AACjE;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,SAAS;AACrC;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;;;;;;;;;;;;;;;;ACnoBwC;AACe;AACd;AACzC;AACA;AACA;AACA;AACA;AACA;AACO,8BAA8B,gEAAe;AACpD;AACA,cAAc;AACd;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,iEAAsB;AACpC;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,YAAY;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;ACxDqE;AAC7B;AACe;AACvD;AACA;AACA;AACA;AACA;AACA;AACO,8BAA8B,gEAAe;AACpD;AACA,cAAc;AACd;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,gEAAqB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,gBAAgB,QAAQ;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,SAAS;AACzB,gBAAgB,WAAW;AAC3B;AACA;AACA,mCAAmC,8EAAsB;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;ACxKwC;AACe;AACd;AACzC;AACA;AACA;AACA;AACA;AACA;AACO,6BAA6B,gEAAe;AACnD;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,+DAAoB;AAClC;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;ACjCqD;AACA;AACE;AACA;AACF;AACM;AAClB;AACzC;AACA;AACA;AACA;AACA,SAAS,kBAAkB;AAC3B;AACO;AACP;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,iBAAiB;AACjB;AACA;AACA,mBAAmB,8DAAc;AACjC;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,iBAAiB;AACjB;AACA;AACA,mBAAmB,8DAAc;AACjC;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,eAAe,SAAS;AACxB,eAAe,SAAS;AACxB,iBAAiB;AACjB;AACA;AACA,mBAAmB,gEAAe;AAClC;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,eAAe,SAAS;AACxB,iBAAiB;AACjB;AACA;AACA,mBAAmB,gEAAe;AAClC;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,eAAe,gBAAgB;AAC/B,iBAAiB;AACjB;AACA;AACA,mBAAmB,gEAAe;AAClC;AACA;AACA;AACA,eAAe,eAAe;AAC9B,eAAe,QAAQ;AACvB,iBAAiB;AACjB;AACA;AACA,mBAAmB,8DAAc;AACjC;AACA;AACA;AACA,eAAe,eAAe;AAC9B,eAAe,QAAQ;AACvB,eAAe,SAAS;AACxB,iBAAiB;AACjB;AACA;AACA,mBAAmB,oEAAiB;AACpC;AACA;;;;;;;;;;;;;;;;;AC/FwC;AACe;AACd;AACzC;AACA;AACA;AACA;AACA;AACO,gCAAgC,gEAAe;AACtD;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,kEAAuB;AACrC;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;AChCwC;AACe;AACvD;AACA;AACA;AACA;AACA;AACO,6BAA6B,gEAAe;AACnD;AACA,cAAc;AACd;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,oEAAyB;AACvC;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;ACzDwC;AACK;AACJ;AACzC;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,cAAc;AACd;AACA,UAAU,yDAAc;AACxB;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;ACtJuD;AACX;AACJ;AACxC;AACA;AACA;AACA;AACA;AACO,6BAA6B,gEAAe;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,+DAAoB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA,mBAAmB,qDAAS;AAC5B;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACnHwD;AACZ;AAC5C;AACO;AACP;AACA;AACA;AACA;AACA,YAAY,wDAAS,CAAC,4EAAiC;AACvD;AACA;AACA;AACA;AACA;AACA,6BAA6B,+EAAoC;AACjE;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;ACpBO;AACP;AACA;AACA;AACO;AACP;AACA;;;;;;;;;;;;;;;;ACN+C;AACP;AACxC;AACO;AACP;AACA,YAAY,4DAAmB,KAAK,2DAAgB;AACpD;AACA;AACA;;;;;;;;;;;;;;;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;AC9EO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AClDoE;AACf;AACD;AACf;AACD;AACW;AACF;AACR;AACsB;AACJ;AACA;AACF;AACM;AACN;AACE;AACF;AACE;AACU;AAClB;AAC2C;AACzC;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,cAAc;AACvB;AACA;AACO;AACP;AACA,cAAc;AACd;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,cAAc;AACd;AACA,6BAA6B,oEAAiB;AAC9C;AACA,cAAc;AACd;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,+CAAa;AACxC,mCAAmC,8DAAc;AACjD;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,gBAAgB,QAAQ;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,iBAAiB;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,SAAS;AACxB;AACA;AACA;AACA,gCAAgC,sDAAU;AAC1C;AACA,UAAU;AACV,YAAY,wDAAS,CAAC,8EAAmC;AACzD;AACA;AACA;AACA;AACA,eAAe,gBAAgB;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,gBAAgB;AAChB;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA,YAAY,wDAAS,CAAC,+EAAoC;AAC1D,UAAU;AACV,YAAY,wDAAS,CAAC,gFAAqC;AAC3D,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,eAAe,SAAS;AACxB;AACA;AACA;AACA,YAAY,wDAAS,CAAC,+EAAoC;AAC1D,UAAU;AACV,YAAY,wDAAS,CAAC,gFAAqC;AAC3D,UAAU;AACV;AACA,qCAAqC,wDAAW;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,YAAY,wDAAS,CAAC,gFAAqC;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,yEAA8B;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,wEAA6B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,gBAAgB;AAC/B,eAAe,gBAAgB;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,SAAS;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,gEAAoB,EAAE,qCAAqC;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,eAAe,eAAe;AAC9B,eAAe,QAAQ;AACvB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,SAAS;AACjC;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,4BAA4B,kEAAsB;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,mDAAM;AACjC,0BAA0B,yDAAa;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,eAAe,iBAAiB;AAChC;AACA;AACA;AACA;AACA,iBAAiB,oEAAyB;AAC1C;AACA,iBAAiB,iEAAsB;AACvC,iBAAiB,+DAAoB;AACrC,iBAAiB,+DAAoB;AACrC;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,gBAAgB;AACxC;AACA,4BAA4B,gBAAgB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,mBAAmB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,kEAAsB;AAC9C,kCAAkC,iFAAsC;AACxE;AACA,kBAAkB;AAClB,wBAAwB,gEAAoB,GAAG,sCAAsC;AACrF,kCAAkC,iFAAsC;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,WAAW;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,oDAAY;AACpB;AACA;AACA,iBAAiB,8DAAmB;AACpC;AACA;AACA;AACA,kBAAkB;AAClB,oBAAoB,sDAAO,CAAC,yEAA8B;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,sDAAO,CAAC,6EAAkC;AAClE;AACA;AACA,iBAAiB;AACjB;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,2EAAgC;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,sDAAO,CAAC,6EAAkC;AAC9D;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,yEAA8B;AACpD;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,sDAAO,CAAC,6EAAkC;AACtE;AACA,0CAA0C,6EAAkC;AAC5E;AACA,qBAAqB;AACrB;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,gCAAgC,kEAAuB;AACvD;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,4BAA4B,sDAAO,CAAC,6EAAkC;AACtE;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,iBAAiB;AACjB,SAAS;AACT;AACA;;;;;;;;;;;;;;;;;AClqB6D;AACT;AACf;AACrC;AACA;AACA;AACA;AACA,SAAS,kBAAkB;AAC3B;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,sDAAO,CAAC,iFAAsC;AAC1D;AACA,6BAA6B,2BAA2B;AACxD,6BAA6B,2BAA2B;AACxD,6BAA6B,2BAA2B;AACxD,6BAA6B,2BAA2B;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;ACjP8C;AACH;AACE;AACU;AACR;AAC/C;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA,eAAe,gBAAgB;AAC/B,eAAe,gBAAgB;AAC/B;AACA;AACA;AACA,YAAY,wDAAS,CAAC,4EAAiC;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,gEAAe;AAC1C;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,YAAY;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,YAAY,wDAAS,CAAC,4EAAiC;AACvD;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;AC3EoC;AACyB;AACT;AACpD;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,kBAAkB;AAC3B;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,YAAY,sDAAO,CAAC,6EAAkC;AACtD;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,YAAY,sDAAO,CAAC,6EAAkC;AACtD;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,eAAe;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,wDAAS,CAAC,qEAA0B;AACpD;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,YAAY,sDAAO,CAAC,iFAAsC;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;ACtF8C;AACH;AAC0B;AACJ;AAClB;AAC/C;AACA;AACA;AACA;AACA;AACA,SAAS,cAAc;AACvB,SAAS,kBAAkB;AAC3B;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,wDAAS,CAAC,4EAAiC;AACvD;AACA;AACA;AACA;AACA,yCAAyC,0EAAoB;AAC7D,2CAA2C,8EAAsB;AACjE;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,YAAY,wDAAS,CAAC,qEAA0B;AAChD;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA,UAAU;AACV,YAAY,wDAAS,CAAC,qEAA0B;AAChD;AACA;AACA;;;;;;;;;;;;;;;;;;;ACpFqD;AACV;AACL;AACD;AACiB;AACtD;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,wDAAS,CAAC,4EAAiC;AACvD;AACA;AACA;AACA;AACA;AACA,uBAAuB,oDAAE,wCAAwC,sBAAsB;AACvF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,kGAAuD;AACjF;AACA;AACA;AACA,0BAA0B,8FAAmD;AAC7E;AACA;AACA;AACA,0BAA0B,8FAAmD;AAC7E;AACA;AACA;AACA,QAAQ,oDAAY;AACpB,qCAAqC,yGAA8D;AACnG;AACA;AACA;AACA,QAAQ,oDAAY;AACpB,qCAAqC,yGAA8D;AACnG;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,oDAAY;AACpB,+BAA+B,+DAAW,CAAC,8FAAmD;AAC9F;AACA;AACA;AACA,QAAQ,oDAAY;AACpB,+BAA+B,+DAAW,CAAC,0FAA+C;AAC1F;AACA;AACA;AACA,QAAQ,oDAAY;AACpB,+BAA+B,+DAAW,CAAC,uFAA4C,GAAG,UAAU;AACpG;AACA;AACA;AACA,QAAQ,oDAAY;AACpB,+BAA+B,+DAAW,CAAC,oFAAyC,GAAG,KAAK;AAC5F;AACA;AACA;AACA,QAAQ,oDAAY;AACpB,+BAA+B,+DAAW,CAAC,sFAA2C,GAAG,UAAU;AACnG;AACA;AACA;AACA,+BAA+B,+DAAW,CAAC,4FAAiD,GAAG,SAAS;AACxG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,+EAAoC;AAC9D;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACzIO;AACP;AACA,cAAc;AACd;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;ACrHoE;AACzB;AACS;AACa;AACjE;AACO;AACP;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA,YAAY,wDAAS,CAAC,8EAAmC;AACzgoC;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,gCAAgC,2EAAgC;AAChE;AACA;AACA;AACA;AACA,2BAA2B,gCAAgC;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,0EAAoB;AAChE;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,gCAAgC,2EAAgC;AAChE;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA,sCAAsC;AACtC;AACA;AACA;AACA;AACA;AACA,4BAA4B,yBAAyB;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,4BAA4B,2EAAgC;AAC5D;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,2EAAgC;AAC5D;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC;AACA;AACA;AACA,gBAAgB,2BAA2B;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,+EAAoC;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,oEAAyB;AAC1C;AACA;AACA;AACA,iBAAiB,+DAAoB;AACrC;AACA,iBAAiB,iEAAsB;AACvC;AACA;AACA;AACA;AACA;AACA,iBAAiB,kEAAuB;AACxC;AACA;AACA;AACA;AACA,oBAAoB,sDAAO,CAAC,qFAA0C,cAAc,gBAAgB;AACpG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,+EAAoC;AAChE;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,+EAAoC;AAChE;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,sDAAO,CAAC,qFAA0C;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,+EAAoC;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxwDAAS,CAAC,kEAAuB,0CAA0C,KAAK;AAC5F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,wDAAS,CAAC,kEAAuB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,uDAAY,EAAE,0BAA0B,GAAG,0BAA0B;AAC1G;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;AC56BuC;AACvC;AACA;AACA;AACA;AACO;AACP,UAAU,2DAAgB;AAC1B;AACA;AACA,iBAAiB,8DAAmB;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;;;;;;;;;;;;;;;AC1CO;AACP;AACA;AACA;AACA,KAAK;AACL,eAAe;AACf,aAAa;AACb;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL,oBAAoB;AACpB;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACxGsD;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,uDAAM;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA,gBAAgB;AAChB,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,uDAAM,wDAAwD,uDAAM;AACpF;AACA;AACA;AACA,sBAAsB,uDAAM;AAC5B,uBAAuB,uDAAM,kDAAkD,uDAAM;AACrF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,SAAS;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,uDAAM;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,SAAS;AAC7B;AACA;AACA,0BAA0B,uDAAM;AAChC;AACA;AACA;AACA;;;;;;;SC5MA;SACA;;SAEA;SACA;SACA;SACA;SACA;SACA;SACA;SACA;SACA;SACA;SACA;SACA;SACA;;SAEA;SACA;;SAEA;SACA;SACA;;;;;UCtBA;UACA;UACA;UACA;UACA,yCAAyC,wCAAwC;UACjF;UACA;UACA;;;;;UCPA;;;;;UCAA;UACA;UACA;UACA,uDAAuD,iBAAiB;UACxE;UACA,gDAAgD,aAAa;UAC7D;;;;;;;;;;;;;;;;;;;;;;;;;;;ACN0C;AACQ;AACU;AACT;AACL;AACP;AACH;AACpC","sources":["webpack://jsge/./node_modules/@socket.io/component-emitter/index.mjs","webpack://jsge/./node_modules/assetsm/dist/assetsm.min.js","webpack://jsge/./node_modules/engine.io-client/build/esm/contrib/has-cors.js","webpack://jsge/./node_modules/engine.io-client/build/esm/contrib/parseqs.js","webpack://jsge/./node_modules/engine.io-client/build/esm/contrib/parseuri.js","webpack://jsge/./node_modules/engine.io-client/build/esm/contrib/yeast.js","webpack://jsge/./node_modules/engine.io-client/build/esm/globalThis.browser.js","webpack://jsge/./node_modules/engine.io-client/build/esm/index.js","webpack://jsge/./node_modules/engine.io-client/build/esm/socket.js","webpack://jsge/./node_modules/engine.io-client/build/esm/transport.js","webpack://jsge/./node_modules/engine.io-client/build/esm/transports/index.js","webpack://jsge/./node_modules/engine.io-client/build/esm/transports/polling.js","webpack://jsge/./node_modules/engine.io-client/build/esm/transports/websocket-constructor.browser.js","webpack://jsge/./node_modules/engine.io-client/build/esm/transports/websocket.js","webpack://jsge/./node_modules/engine.io-client/build/esm/transports/xmlhttprequest.browser.js","webpack://jsge/./node_modules/engine.io-client/build/esm/util.js","webpack://jsge/./node_modules/engine.io-parser/build/esm/commons.js","webpack://jsge/./node_modules/engine.io-parser/build/esm/contrib/base64-arraybuffer.js","webpack://jsge/./node_modules/engine.io-parser/build/esm/decodePacket.browser.js","webpack://jsge/./node_modules/engine.io-parser/build/esm/encodePacket.browser.js","webpack://jsge/./node_modules/engine.io-parser/build/esm/index.js","webpack://jsge/./node_modules/socket.io-client/build/esm/contrib/backo2.js","webpack://jsge/./node_modules/socket.io-client/build/esm/index.js","webpack://jsge/./node_modules/socket.io-client/build/esm/manager.js","webpack://jsge/./node_modules/socket.io-client/build/esm/on.js","webpack://jsge/./node_modules/socket.io-client/build/esm/socket.js","webpack://jsge/./node_modules/socket.io-client/build/esm/url.js","webpack://jsge/./node_modules/socket.io-parser/build/esm/binary.js","webpack://jsge/./node_modules/socket.io-parser/build/esm/index.js","webpack://jsge/./node_modules/socket.io-parser/build/esm/is-binary.js","webpack://jsge/./src/base/AnimationEventImageObj.js","webpack://jsge/./src/base/CanvasView.js","webpack://jsge/./src/base/DrawConusObject.js","webpack://jsge/./src/base/DrawImageObject.js","webpack://jsge/./src/base/DrawLineObject.js","webpack://jsge/./src/base/DrawObjectFactory.js","webpack://jsge/./src/base/DrawPolygonObject.js","webpack://jsge/./src/base/DrawRectObject.js","webpack://jsge/./src/base/DrawShapeObject.js","webpack://jsge/./src/base/DrawTextObject.js","webpack://jsge/./src/base/Events/SystemEvent.js","webpack://jsge/./src/base/Exception.js","webpack://jsge/./src/base/Logger.js","webpack://jsge/./src/base/Primitives.js","webpack://jsge/./src/base/RenderLayer.js","webpack://jsge/./src/base/ScreenPage.js","webpack://jsge/./src/base/ScreenPageData.js","webpack://jsge/./src/base/System.js","webpack://jsge/./src/base/SystemAudioInterface.js","webpack://jsge/./src/base/SystemInterface.js","webpack://jsge/./src/base/SystemSocketConnection.js","webpack://jsge/./src/base/WebGlDrawProgramData.js","webpack://jsge/./src/base/WebGlInterface.js","webpack://jsge/./src/configs.js","webpack://jsge/./src/constants.js","webpack://jsge/./src/utils.js","webpack://jsge/webpack/bootstrap","webpack://jsge/webpack/runtime/define property getters","webpack://jsge/webpack/runtime/hasOwnProperty shorthand","webpack://jsge/webpack/runtime/make namespace object","webpack://jsge/./src/index.js"],"sourcesContent":["/**\n * Initialize a new `Emitter`.\n *\n * @api public\n */\n\nexport function Emitter(obj) {\n  if (obj) return mixin(obj);\n}\n\n/**\n * Mixin the emitter properties.\n *\n * @param {Object} obj\n * @return {Object}\n * @api private\n */\n\nfunction mixin(obj) {\n  for (var key in Emitter.prototype) {\n    obj[key] = Emitter.prototype[key];\n  }\n  return obj;\n}\n\n/**\n * Listen on the given `event` with `fn`.\n *\n * @param {String} event\n * @param {Function} fn\n * @return {Emitter}\n * @api public\n */\n\nEmitter.prototype.on =\nEmitter.prototype.addEventListener = function(event, fn){\n  this._callbacks = this._callbacks || {};\n  (this._callbacks['$' + event] = this._callbacks['$' + event] || [])\n    .push(fn);\n  return this;\n};\n\n/**\n * Adds an `event` listener that will be invoked a single\n * time then automatically removed.\n *\n * @param {String} event\n * @param {Function} fn\n * @return {Emitter}\n * @api public\n */\n\nEmitter.prototype.once = function(event, fn){\n  function on() {\n    this.off(event, on);\n    fn.apply(this, arguments);\n  }\n\n  on.fn = fn;\n  this.on(event, on);\n  return this;\n};\n\n/**\n * Remove the given callback for `event` or all\n * registered callbacks.\n *\n * @param {String} event\n * @param {Function} fn\n * @return {Emitter}\n * @api public\n */\n\nEmitter.prototype.off =\nEmitter.prototype.removeListener =\nEmitter.prototype.removeAllListeners =\nEmitter.prototype.removeEventListener = function(event, fn){\n  this._callbacks = this._callbacks || {};\n\n  // all\n  if (0 == arguments.length) {\n    this._callbacks = {};\n    return this;\n  }\n\n  // specific event\n  var callbacks = this._callbacks['$' + event];\n  if (!callbacks) return this;\n\n  // remove all handlers\n  if (1 == arguments.length) {\n    delete this._callbacks['$' + event];\n    return this;\n  }\n\n  // remove specific handler\n  var cb;\n  for (var i = 0; i < callbacks.length; i++) {\n    cb = callbacks[i];\n    if (cb === fn || cb.fn === fn) {\n      callbacks.splice(i, 1);\n      break;\n    }\n  }\n\n  // Remove event specific arrays for event types that no\n  // one is subscribed for to avoid memory leak.\n  if (callbacks.length === 0) {\n    delete this._callbacks['$' + event];\n  }\n\n  return this;\n};\n\n/**\n * Emit `event` with the given args.\n *\n * @param {String} event\n * @param {Mixed} ...\n * @return {Emitter}\n */\n\nEmitter.prototype.emit = function(event){\n  this._callbacks = this._callbacks || {};\n\n  var args = new Array(arguments.length - 1)\n    , callbacks = this._callbacks['$' + event];\n\n  for (var i = 1; i < arguments.length; i++) {\n    args[i - 1] = arguments[i];\n  }\n\n  if (callbacks) {\n    callbacks = callbacks.slice(0);\n    for (var i = 0, len = callbacks.length; i < len; ++i) {\n      callbacks[i].apply(this, args);\n    }\n  }\n\n  return this;\n};\n\n// alias used for reserved events (protected method)\nEmitter.prototype.emitReserved = Emitter.prototype.emit;\n\n/**\n * Return array of callbacks for `event`.\n *\n * @param {String} event\n * @return {Array}\n * @api public\n */\n\nEmitter.prototype.listeners = function(event){\n  this._callbacks = this._callbacks || {};\n  return this._callbacks['$' + event] || [];\n};\n\n/**\n * Check if this emitter has `event` handlers.\n *\n * @param {String} event\n * @return {Boolean}\n * @api public\n */\n\nEmitter.prototype.hasListeners = function(event){\n  return !! this.listeners(event).length;\n};\n","const PROGRESS_EVENT_TYPE={loadstart:\"loadstart\",progress:\"progress\",abort:\"abort\",error:\"error\",load:\"load\",timeout:\"timeout\"};export default class AssetsManager{#e;#t;#i;#s;#a;#r;#o;#n;constructor(){this.#t=new Map,this.#i=new Map,this.#s=new Map,this.#a=new Map,this.#r=new Map,this.#o=new Map,this.#e=new EventTarget,this.#n=0}get filesWaitingForUpload(){return this.#a.size+this.#o.size+this.#r.size}getAudio(e){const t=this.#t.get(e);if(t)return t;Warning(\"Audio with key '\"+e+\"' is not loaded\")}getImage(e){const t=this.#i.get(e);if(t)return t;Warning(\"Image with key '\"+e+\"' is not loaded\")}getTileMap(e){const t=this.#s.get(e);if(t)return t;Warning(\"Tilemap with key '\"+e+\"' is not loaded\")}preload(){return this.#d(),Promise.allSettled(Array.from(this.#a.entries()).map((e=>this.#l(e[0],e[1])))).then((e=>(e.forEach((e=>{\"rejected\"===e.status&&Warning(e.reason||e.value)})),Promise.allSettled(Array.from(this.#o.entries()).map((e=>this.#h(e[0],e[1])))).then((e=>(e.forEach((e=>{\"rejected\"===e.status&&Warning(e.reason||e.value)})),Promise.allSettled(Array.from(this.#r.entries()).map((e=>this.#u(e[0],e[1])))).then((e=>(e.forEach((e=>{\"rejected\"===e.status&&Warning(e.reason||e.value)})),this.#m(),Promise.resolve())))))))))}addAudio(e,t){this.#c(e,t),this.#a.has(e)&&Warning(\"Audio with key \"+e+\" is already registered\"),this.#a.set(e,t)}addImage(e,t){this.#c(e,t),this.#r.has(e)&&Warning(\"Image with key \"+e+\" is already registered\"),this.#r.set(e,t)}addTileMap(e,t){this.#c(e,t),this.#o.has(e)&&Warning(\"Tilemap with key \"+e+\" is already registered\"),this.#o.set(e,t)}addEventListener(e,t,...i){PROGRESS_EVENT_TYPE[e]?this.#e.addEventListener(e,t,...i):Warning(\"Event type should be one of the ProgressEvent.type\")}removeEventListener(e,t,...i){this.#e.removeEventListener(e,t,...i)}#g(e,t){const{firstgid:i,source:s}=e;return this.#p(s),fetch(t+s).then((e=>e.json())).then((e=>{const{name:s,image:a}=e;return s&&a&&this.addImage(s,t?t+a:a,e),e.gid=i,Promise.resolve(e)})).catch((()=>{const e=new Error(\"Can't load related tileset \",s);return Promise.reject(e)}))}#h(e,t){return this.#E(t),fetch(t).then((e=>e.json())).then((i=>{let s,a=t.split(\"/\"),r=a.length;if(a[r-1].includes(\".tmj\")||a[r-1].includes(\".json\")?(a.pop(),s=a.join(\"/\")+\"/\"):(a[r-2].includes(\".tmj\")||a[r-2].includes(\".json\"))&&(a.splice(r-2,2),s=a.join(\"/\")+\"/\"),this.#P(e,i),this.#T(e),i.tilesets&&i.tilesets.length>0){const t=[];return i.tilesets.forEach(((i,a)=>{const r=this.#g(i,s).then((t=>(this.#v(e,a,t),this.#w(),Promise.resolve())));t.push(r)})),Promise.all(t)}})).catch((e=>(e.message.includes(\"JSON.parse:\")&&(e=new Error(\"Can't load tilemap \"+t)),this.#Q(e),Promise.reject(e))))}#l(e,t){return new Promise(((i,s)=>{const a=new Audio(t);a.addEventListener(\"loadeddata\",(()=>{this.#f(e,a),this.#L(e),this.#w(),i()})),a.addEventListener(\"error\",(()=>{const e=new Error(\"Can't load audio \"+t);this.#Q(e),s(e)}))}))}#u(e,t){return new Promise(((i,s)=>{const a=new Image;a.onload=()=>{createImageBitmap(a).then((t=>{this.#M(e,t),this.#j(e),this.#w(),i()}))},a.onerror=()=>{const e=new Error(\"Can't load image \"+t);this.#Q(e),s(e)},a.src=t}))}#p(e){e.includes(\".tsj\")||e.includes(\".json\")||Exception(\"Related Tileset file type is not correct, only .tsj or .json files are supported\")}#E(e){e.includes(\".tmj\")||e.includes(\".json\")||Exception(\"Tilemap file type is not correct, only .tmj or .json files are supported\")}#c(e,t){const i=\"image key and url should be provided\";e&&0!==e.trim().length||Exception(i),t&&0!==t.trim().length||Exception(i)}#f(e,t){this.#t.set(e,t)}#L(e){this.#a.delete(e)}#M(e,t){this.#i.set(e,t)}#j(e){this.#r.delete(e)}#v(e,t,i){this.#s.get(e).tilesets[t].data=i}#P(e,t){this.#s.set(e,t)}#T(e){this.#o.delete(e)}#d(){let e=this.filesWaitingForUpload;this.#e.dispatchEvent(new ProgressEvent(PROGRESS_EVENT_TYPE.loadstart,{total:e}))}#m(){this.#e.dispatchEvent(new ProgressEvent(PROGRESS_EVENT_TYPE.load))}#w(){const e=this.filesWaitingForUpload;this.#n+=1,this.#e.dispatchEvent(new ProgressEvent(PROGRESS_EVENT_TYPE.progress,{lengthComputable:!0,loaded:this.#n,total:e}))}#Q(e){this.#e.dispatchEvent(new ProgressEvent(PROGRESS_EVENT_TYPE.error,{error:e}))}}function Exception(e){throw new Error(e)}function Warning(e){console.warn(e)}","// imported from https://github.com/component/has-cors\nlet value = false;\ntry {\n    value = typeof XMLHttpRequest !== 'undefined' &&\n        'withCredentials' in new XMLHttpRequest();\n}\ncatch (err) {\n    // if XMLHttp support is disabled in IE then it will throw\n    // when trying to create\n}\nexport const hasCORS = value;\n","// imported from https://github.com/galkn/querystring\n/**\n * Compiles a querystring\n * Returns string representation of the object\n *\n * @param {Object}\n * @api private\n */\nexport function encode(obj) {\n    let str = '';\n    for (let i in obj) {\n        if (obj.hasOwnProperty(i)) {\n            if (str.length)\n                str += '&';\n            str += encodeURIComponent(i) + '=' + encodeURIComponent(obj[i]);\n        }\n    }\n    return str;\n}\n/**\n * Parses a simple querystring into an object\n *\n * @param {String} qs\n * @api private\n */\nexport function decode(qs) {\n    let qry = {};\n    let pairs = qs.split('&');\n    for (let i = 0, l = pairs.length; i < l; i++) {\n        let pair = pairs[i].split('=');\n        qry[decodeURIComponent(pair[0])] = decodeURIComponent(pair[1]);\n    }\n    return qry;\n}\n","// imported from https://github.com/galkn/parseuri\n/**\n * Parses an URI\n *\n * @author Steven Levithan <stevenlevithan.com> (MIT license)\n * @api private\n */\nconst re = /^(?:(?![^:@]+:[^:@\\/]*@)(http|https|ws|wss):\\/\\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?((?:[a-f0-9]{0,4}:){2,7}[a-f0-9]{0,4}|[^:\\/?#]*)(?::(\\d*))?)(((\\/(?:[^?#](?![^?#\\/]*\\.[^?#\\/.]+(?:[?#]|$)))*\\/?)?([^?#\\/]*))(?:\\?([^#]*))?(?:#(.*))?)/;\nconst parts = [\n    'source', 'protocol', 'authority', 'userInfo', 'user', 'password', 'host', 'port', 'relative', 'path', 'directory', 'file', 'query', 'anchor'\n];\nexport function parse(str) {\n    const src = str, b = str.indexOf('['), e = str.indexOf(']');\n    if (b != -1 && e != -1) {\n        str = str.substring(0, b) + str.substring(b, e).replace(/:/g, ';') + str.substring(e, str.length);\n    }\n    let m = re.exec(str || ''), uri = {}, i = 14;\n    while (i--) {\n        uri[parts[i]] = m[i] || '';\n    }\n    if (b != -1 && e != -1) {\n        uri.source = src;\n        uri.host = uri.host.substring(1, uri.host.length - 1).replace(/;/g, ':');\n        uri.authority = uri.authority.replace('[', '').replace(']', '').replace(/;/g, ':');\n        uri.ipv6uri = true;\n    }\n    uri.pathNames = pathNames(uri, uri['path']);\n    uri.queryKey = queryKey(uri, uri['query']);\n    return uri;\n}\nfunction pathNames(obj, path) {\n    const regx = /\\/{2,9}/g, names = path.replace(regx, \"/\").split(\"/\");\n    if (path.slice(0, 1) == '/' || path.length === 0) {\n        names.splice(0, 1);\n    }\n    if (path.slice(-1) == '/') {\n        names.splice(names.length - 1, 1);\n    }\n    return names;\n}\nfunction queryKey(uri, query) {\n    const data = {};\n    query.replace(/(?:^|&)([^&=]*)=?([^&]*)/g, function ($0, $1, $2) {\n        if ($1) {\n            data[$1] = $2;\n        }\n    });\n    return data;\n}\n","// imported from https://github.com/unshiftio/yeast\n'use strict';\nconst alphabet = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-_'.split(''), length = 64, map = {};\nlet seed = 0, i = 0, prev;\n/**\n * Return a string representing the specified number.\n *\n * @param {Number} num The number to convert.\n * @returns {String} The string representation of the number.\n * @api public\n */\nexport function encode(num) {\n    let encoded = '';\n    do {\n        encoded = alphabet[num % length] + encoded;\n        num = Math.floor(num / length);\n    } while (num > 0);\n    return encoded;\n}\n/**\n * Return the integer value specified by the given string.\n *\n * @param {String} str The string to convert.\n * @returns {Number} The integer value represented by the string.\n * @api public\n */\nexport function decode(str) {\n    let decoded = 0;\n    for (i = 0; i < str.length; i++) {\n        decoded = decoded * length + map[str.charAt(i)];\n    }\n    return decoded;\n}\n/**\n * Yeast: A tiny growing id generator.\n *\n * @returns {String} A unique id.\n * @api public\n */\nexport function yeast() {\n    const now = encode(+new Date());\n    if (now !== prev)\n        return seed = 0, prev = now;\n    return now + '.' + encode(seed++);\n}\n//\n// Map each character to its index.\n//\nfor (; i < length; i++)\n    map[alphabet[i]] = i;\n","export const globalThisShim = (() => {\n    if (typeof self !== \"undefined\") {\n        return self;\n    }\n    else if (typeof window !== \"undefined\") {\n        return window;\n    }\n    else {\n        return Function(\"return this\")();\n    }\n})();\n","import { Socket } from \"./socket.js\";\nexport { Socket };\nexport const protocol = Socket.protocol;\nexport { Transport } from \"./transport.js\";\nexport { transports } from \"./transports/index.js\";\nexport { installTimerFunctions } from \"./util.js\";\nexport { parse } from \"./contrib/parseuri.js\";\nexport { nextTick } from \"./transports/websocket-constructor.js\";\n","import { transports } from \"./transports/index.js\";\nimport { installTimerFunctions, byteLength } from \"./util.js\";\nimport { decode } from \"./contrib/parseqs.js\";\nimport { parse } from \"./contrib/parseuri.js\";\nimport { Emitter } from \"@socket.io/component-emitter\";\nimport { protocol } from \"engine.io-parser\";\nexport class Socket extends Emitter {\n    /**\n     * Socket constructor.\n     *\n     * @param {String|Object} uri or options\n     * @param {Object} opts - options\n     * @api public\n     */\n    constructor(uri, opts = {}) {\n        super();\n        if (uri && \"object\" === typeof uri) {\n            opts = uri;\n            uri = null;\n        }\n        if (uri) {\n            uri = parse(uri);\n            opts.hostname = uri.host;\n            opts.secure = uri.protocol === \"https\" || uri.protocol === \"wss\";\n            opts.port = uri.port;\n            if (uri.query)\n                opts.query = uri.query;\n        }\n        else if (opts.host) {\n            opts.hostname = parse(opts.host).host;\n        }\n        installTimerFunctions(this, opts);\n        this.secure =\n            null != opts.secure\n                ? opts.secure\n                : typeof location !== \"undefined\" && \"https:\" === location.protocol;\n        if (opts.hostname && !opts.port) {\n            // if no port is specified manually, use the protocol default\n            opts.port = this.secure ? \"443\" : \"80\";\n        }\n        this.hostname =\n            opts.hostname ||\n                (typeof location !== \"undefined\" ? location.hostname : \"localhost\");\n        this.port =\n            opts.port ||\n                (typeof location !== \"undefined\" && location.port\n                    ? location.port\n                    : this.secure\n                        ? \"443\"\n                        : \"80\");\n        this.transports = opts.transports || [\"polling\", \"websocket\"];\n        this.readyState = \"\";\n        this.writeBuffer = [];\n        this.prevBufferLen = 0;\n        this.opts = Object.assign({\n            path: \"/engine.io\",\n            agent: false,\n            withCredentials: false,\n            upgrade: true,\n            timestampParam: \"t\",\n            rememberUpgrade: false,\n            rejectUnauthorized: true,\n            perMessageDeflate: {\n                threshold: 1024\n            },\n            transportOptions: {},\n            closeOnBeforeunload: true\n        }, opts);\n        this.opts.path = this.opts.path.replace(/\\/$/, \"\") + \"/\";\n        if (typeof this.opts.query === \"string\") {\n            this.opts.query = decode(this.opts.query);\n        }\n        // set on handshake\n        this.id = null;\n        this.upgrades = null;\n        this.pingInterval = null;\n        this.pingTimeout = null;\n        // set on heartbeat\n        this.pingTimeoutTimer = null;\n        if (typeof addEventListener === \"function\") {\n            if (this.opts.closeOnBeforeunload) {\n                // Firefox closes the connection when the \"beforeunload\" event is emitted but not Chrome. This event listener\n                // ensures every browser behaves the same (no \"disconnect\" event at the Socket.IO level when the page is\n                // closed/reloaded)\n                this.beforeunloadEventListener = () => {\n                    if (this.transport) {\n                        // silently close the transport\n                        this.transport.removeAllListeners();\n                        this.transport.close();\n                    }\n                };\n                addEventListener(\"beforeunload\", this.beforeunloadEventListener, false);\n            }\n            if (this.hostname !== \"localhost\") {\n                this.offlineEventListener = () => {\n                    this.onClose(\"transport close\", {\n                        description: \"network connection lost\"\n                    });\n                };\n                addEventListener(\"offline\", this.offlineEventListener, false);\n            }\n        }\n        this.open();\n    }\n    /**\n     * Creates transport of the given type.\n     *\n     * @param {String} transport name\n     * @return {Transport}\n     * @api private\n     */\n    createTransport(name) {\n        const query = Object.assign({}, this.opts.query);\n        // append engine.io protocol identifier\n        query.EIO = protocol;\n        // transport name\n        query.transport = name;\n        // session id if we already have one\n        if (this.id)\n            query.sid = this.id;\n        const opts = Object.assign({}, this.opts.transportOptions[name], this.opts, {\n            query,\n            socket: this,\n            hostname: this.hostname,\n            secure: this.secure,\n            port: this.port\n        });\n        return new transports[name](opts);\n    }\n    /**\n     * Initializes transport to use and starts probe.\n     *\n     * @api private\n     */\n    open() {\n        let transport;\n        if (this.opts.rememberUpgrade &&\n            Socket.priorWebsocketSuccess &&\n            this.transports.indexOf(\"websocket\") !== -1) {\n            transport = \"websocket\";\n        }\n        else if (0 === this.transports.length) {\n            // Emit error on next tick so it can be listened to\n            this.setTimeoutFn(() => {\n                this.emitReserved(\"error\", \"No transports available\");\n            }, 0);\n            return;\n        }\n        else {\n            transport = this.transports[0];\n        }\n        this.readyState = \"opening\";\n        // Retry with the next transport if the transport is disabled (jsonp: false)\n        try {\n            transport = this.createTransport(transport);\n        }\n        catch (e) {\n            this.transports.shift();\n            this.open();\n            return;\n        }\n        transport.open();\n        this.setTransport(transport);\n    }\n    /**\n     * Sets the current transport. Disables the existing one (if any).\n     *\n     * @api private\n     */\n    setTransport(transport) {\n        if (this.transport) {\n            this.transport.removeAllListeners();\n        }\n        // set up transport\n        this.transport = transport;\n        // set up transport listeners\n        transport\n            .on(\"drain\", this.onDrain.bind(this))\n            .on(\"packet\", this.onPacket.bind(this))\n            .on(\"error\", this.onError.bind(this))\n            .on(\"close\", reason => this.onClose(\"transport close\", reason));\n    }\n    /**\n     * Probes a transport.\n     *\n     * @param {String} transport name\n     * @api private\n     */\n    probe(name) {\n        let transport = this.createTransport(name);\n        let failed = false;\n        Socket.priorWebsocketSuccess = false;\n        const onTransportOpen = () => {\n            if (failed)\n                return;\n            transport.send([{ type: \"ping\", data: \"probe\" }]);\n            transport.once(\"packet\", msg => {\n                if (failed)\n                    return;\n                if (\"pong\" === msg.type && \"probe\" === msg.data) {\n                    this.upgrading = true;\n                    this.emitReserved(\"upgrading\", transport);\n                    if (!transport)\n                        return;\n                    Socket.priorWebsocketSuccess = \"websocket\" === transport.name;\n                    this.transport.pause(() => {\n                        if (failed)\n                            return;\n                        if (\"closed\" === this.readyState)\n                            return;\n                        cleanup();\n                        this.setTransport(transport);\n                        transport.send([{ type: \"upgrade\" }]);\n                        this.emitReserved(\"upgrade\", transport);\n                        transport = null;\n                        this.upgrading = false;\n                        this.flush();\n                    });\n                }\n                else {\n                    const err = new Error(\"probe error\");\n                    // @ts-ignore\n                    err.transport = transport.name;\n                    this.emitReserved(\"upgradeError\", err);\n                }\n            });\n        };\n        function freezeTransport() {\n            if (failed)\n                return;\n            // Any callback called by transport should be ignored since now\n            failed = true;\n            cleanup();\n            transport.close();\n            transport = null;\n        }\n        // Handle any error that happens while probing\n        const onerror = err => {\n            const error = new Error(\"probe error: \" + err);\n            // @ts-ignore\n            error.transport = transport.name;\n            freezeTransport();\n            this.emitReserved(\"upgradeError\", error);\n        };\n        function onTransportClose() {\n            onerror(\"transport closed\");\n        }\n        // When the socket is closed while we're probing\n        function onclose() {\n            onerror(\"socket closed\");\n        }\n        // When the socket is upgraded while we're probing\n        function onupgrade(to) {\n            if (transport && to.name !== transport.name) {\n                freezeTransport();\n            }\n        }\n        // Remove all listeners on the transport and on self\n        const cleanup = () => {\n            transport.removeListener(\"open\", onTransportOpen);\n            transport.removeListener(\"error\", onerror);\n            transport.removeListener(\"close\", onTransportClose);\n            this.off(\"close\", onclose);\n            this.off(\"upgrading\", onupgrade);\n        };\n        transport.once(\"open\", onTransportOpen);\n        transport.once(\"error\", onerror);\n        transport.once(\"close\", onTransportClose);\n        this.once(\"close\", onclose);\n        this.once(\"upgrading\", onupgrade);\n        transport.open();\n    }\n    /**\n     * Called when connection is deemed open.\n     *\n     * @api private\n     */\n    onOpen() {\n        this.readyState = \"open\";\n        Socket.priorWebsocketSuccess = \"websocket\" === this.transport.name;\n        this.emitReserved(\"open\");\n        this.flush();\n        // we check for `readyState` in case an `open`\n        // listener already closed the socket\n        if (\"open\" === this.readyState &&\n            this.opts.upgrade &&\n            this.transport.pause) {\n            let i = 0;\n            const l = this.upgrades.length;\n            for (; i < l; i++) {\n                this.probe(this.upgrades[i]);\n            }\n        }\n    }\n    /**\n     * Handles a packet.\n     *\n     * @api private\n     */\n    onPacket(packet) {\n        if (\"opening\" === this.readyState ||\n            \"open\" === this.readyState ||\n            \"closing\" === this.readyState) {\n            this.emitReserved(\"packet\", packet);\n            // Socket is live - any packet counts\n            this.emitReserved(\"heartbeat\");\n            switch (packet.type) {\n                case \"open\":\n                    this.onHandshake(JSON.parse(packet.data));\n                    break;\n                case \"ping\":\n                    this.resetPingTimeout();\n                    this.sendPacket(\"pong\");\n                    this.emitReserved(\"ping\");\n                    this.emitReserved(\"pong\");\n                    break;\n                case \"error\":\n                    const err = new Error(\"server error\");\n                    // @ts-ignore\n                    err.code = packet.data;\n                    this.onError(err);\n                    break;\n                case \"message\":\n                    this.emitReserved(\"data\", packet.data);\n                    this.emitReserved(\"message\", packet.data);\n                    break;\n            }\n        }\n        else {\n        }\n    }\n    /**\n     * Called upon handshake completion.\n     *\n     * @param {Object} data - handshake obj\n     * @api private\n     */\n    onHandshake(data) {\n        this.emitReserved(\"handshake\", data);\n        this.id = data.sid;\n        this.transport.query.sid = data.sid;\n        this.upgrades = this.filterUpgrades(data.upgrades);\n        this.pingInterval = data.pingInterval;\n        this.pingTimeout = data.pingTimeout;\n        this.maxPayload = data.maxPayload;\n        this.onOpen();\n        // In case open handler closes socket\n        if (\"closed\" === this.readyState)\n            return;\n        this.resetPingTimeout();\n    }\n    /**\n     * Sets and resets ping timeout timer based on server pings.\n     *\n     * @api private\n     */\n    resetPingTimeout() {\n        this.clearTimeoutFn(this.pingTimeoutTimer);\n        this.pingTimeoutTimer = this.setTimeoutFn(() => {\n            this.onClose(\"ping timeout\");\n        }, this.pingInterval + this.pingTimeout);\n        if (this.opts.autoUnref) {\n            this.pingTimeoutTimer.unref();\n        }\n    }\n    /**\n     * Called on `drain` event\n     *\n     * @api private\n     */\n    onDrain() {\n        this.writeBuffer.splice(0, this.prevBufferLen);\n        // setting prevBufferLen = 0 is very important\n        // for example, when upgrading, upgrade packet is sent over,\n        // and a nonzero prevBufferLen could cause problems on `drain`\n        this.prevBufferLen = 0;\n        if (0 === this.writeBuffer.length) {\n            this.emitReserved(\"drain\");\n        }\n        else {\n            this.flush();\n        }\n    }\n    /**\n     * Flush write buffers.\n     *\n     * @api private\n     */\n    flush() {\n        if (\"closed\" !== this.readyState &&\n            this.transport.writable &&\n            !this.upgrading &&\n            this.writeBuffer.length) {\n            const packets = this.getWritablePackets();\n            this.transport.send(packets);\n            // keep track of current length of writeBuffer\n            // splice writeBuffer and callbackBuffer on `drain`\n            this.prevBufferLen = packets.length;\n            this.emitReserved(\"flush\");\n        }\n    }\n    /**\n     * Ensure the encoded size of the writeBuffer is below the maxPayload value sent by the server (only for HTTP\n     * long-polling)\n     *\n     * @private\n     */\n    getWritablePackets() {\n        const shouldCheckPayloadSize = this.maxPayload &&\n            this.transport.name === \"polling\" &&\n            this.writeBuffer.length > 1;\n        if (!shouldCheckPayloadSize) {\n            return this.writeBuffer;\n        }\n        let payloadSize = 1; // first packet type\n        for (let i = 0; i < this.writeBuffer.length; i++) {\n            const data = this.writeBuffer[i].data;\n            if (data) {\n                payloadSize += byteLength(data);\n            }\n            if (i > 0 && payloadSize > this.maxPayload) {\n                return this.writeBuffer.slice(0, i);\n            }\n            payloadSize += 2; // separator + packet type\n        }\n        return this.writeBuffer;\n    }\n    /**\n     * Sends a message.\n     *\n     * @param {String} message.\n     * @param {Function} callback function.\n     * @param {Object} options.\n     * @return {Socket} for chaining.\n     * @api public\n     */\n    write(msg, options, fn) {\n        this.sendPacket(\"message\", msg, options, fn);\n        return this;\n    }\n    send(msg, options, fn) {\n        this.sendPacket(\"message\", msg, options, fn);\n        return this;\n    }\n    /**\n     * Sends a packet.\n     *\n     * @param {String} packet type.\n     * @param {String} data.\n     * @param {Object} options.\n     * @param {Function} callback function.\n     * @api private\n     */\n    sendPacket(type, data, options, fn) {\n        if (\"function\" === typeof data) {\n            fn = data;\n            data = undefined;\n        }\n        if (\"function\" === typeof options) {\n            fn = options;\n            options = null;\n        }\n        if (\"closing\" === this.readyState || \"closed\" === this.readyState) {\n            return;\n        }\n        options = options || {};\n        options.compress = false !== options.compress;\n        const packet = {\n            type: type,\n            data: data,\n            options: options\n        };\n        this.emitReserved(\"packetCreate\", packet);\n        this.writeBuffer.push(packet);\n        if (fn)\n            this.once(\"flush\", fn);\n        this.flush();\n    }\n    /**\n     * Closes the connection.\n     *\n     * @api public\n     */\n    close() {\n        const close = () => {\n            this.onClose(\"forced close\");\n            this.transport.close();\n        };\n        const cleanupAndClose = () => {\n            this.off(\"upgrade\", cleanupAndClose);\n            this.off(\"upgradeError\", cleanupAndClose);\n            close();\n        };\n        const waitForUpgrade = () => {\n            // wait for upgrade to finish since we can't send packets while pausing a transport\n            this.once(\"upgrade\", cleanupAndClose);\n            this.once(\"upgradeError\", cleanupAndClose);\n        };\n        if (\"opening\" === this.readyState || \"open\" === this.readyState) {\n            this.readyState = \"closing\";\n            if (this.writeBuffer.length) {\n                this.once(\"drain\", () => {\n                    if (this.upgrading) {\n                        waitForUpgrade();\n                    }\n                    else {\n                        close();\n                    }\n                });\n            }\n            else if (this.upgrading) {\n                waitForUpgrade();\n            }\n            else {\n                close();\n            }\n        }\n        return this;\n    }\n    /**\n     * Called upon transport error\n     *\n     * @api private\n     */\n    onError(err) {\n        Socket.priorWebsocketSuccess = false;\n        this.emitReserved(\"error\", err);\n        this.onClose(\"transport error\", err);\n    }\n    /**\n     * Called upon transport close.\n     *\n     * @api private\n     */\n    onClose(reason, description) {\n        if (\"opening\" === this.readyState ||\n            \"open\" === this.readyState ||\n            \"closing\" === this.readyState) {\n            // clear timers\n            this.clearTimeoutFn(this.pingTimeoutTimer);\n            // stop event from firing again for transport\n            this.transport.removeAllListeners(\"close\");\n            // ensure transport won't stay open\n            this.transport.close();\n            // ignore further transport communication\n            this.transport.removeAllListeners();\n            if (typeof removeEventListener === \"function\") {\n                removeEventListener(\"beforeunload\", this.beforeunloadEventListener, false);\n                removeEventListener(\"offline\", this.offlineEventListener, false);\n            }\n            // set ready state\n            this.readyState = \"closed\";\n            // clear session id\n            this.id = null;\n            // emit close event\n            this.emitReserved(\"close\", reason, description);\n            // clean buffers after, so users can still\n            // grab the buffers on `close` event\n            this.writeBuffer = [];\n            this.prevBufferLen = 0;\n        }\n    }\n    /**\n     * Filters upgrades, returning only those matching client transports.\n     *\n     * @param {Array} server upgrades\n     * @api private\n     *\n     */\n    filterUpgrades(upgrades) {\n        const filteredUpgrades = [];\n        let i = 0;\n        const j = upgrades.length;\n        for (; i < j; i++) {\n            if (~this.transports.indexOf(upgrades[i]))\n                filteredUpgrades.push(upgrades[i]);\n        }\n        return filteredUpgrades;\n    }\n}\nSocket.protocol = protocol;\n","import { decodePacket } from \"engine.io-parser\";\nimport { Emitter } from \"@socket.io/component-emitter\";\nimport { installTimerFunctions } from \"./util.js\";\nclass TransportError extends Error {\n    constructor(reason, description, context) {\n        super(reason);\n        this.description = description;\n        this.context = context;\n        this.type = \"TransportError\";\n    }\n}\nexport class Transport extends Emitter {\n    /**\n     * Transport abstract constructor.\n     *\n     * @param {Object} options.\n     * @api private\n     */\n    constructor(opts) {\n        super();\n        this.writable = false;\n        installTimerFunctions(this, opts);\n        this.opts = opts;\n        this.query = opts.query;\n        this.readyState = \"\";\n        this.socket = opts.socket;\n    }\n    /**\n     * Emits an error.\n     *\n     * @param {String} reason\n     * @param description\n     * @param context - the error context\n     * @return {Transport} for chaining\n     * @api protected\n     */\n    onError(reason, description, context) {\n        super.emitReserved(\"error\", new TransportError(reason, description, context));\n        return this;\n    }\n    /**\n     * Opens the transport.\n     *\n     * @api public\n     */\n    open() {\n        if (\"closed\" === this.readyState || \"\" === this.readyState) {\n            this.readyState = \"opening\";\n            this.doOpen();\n        }\n        return this;\n    }\n    /**\n     * Closes the transport.\n     *\n     * @api public\n     */\n    close() {\n        if (\"opening\" === this.readyState || \"open\" === this.readyState) {\n            this.doClose();\n            this.onClose();\n        }\n        return this;\n    }\n    /**\n     * Sends multiple packets.\n     *\n     * @param {Array} packets\n     * @api public\n     */\n    send(packets) {\n        if (\"open\" === this.readyState) {\n            this.write(packets);\n        }\n        else {\n            // this might happen if the transport was silently closed in the beforeunload event handler\n        }\n    }\n    /**\n     * Called upon open\n     *\n     * @api protected\n     */\n    onOpen() {\n        this.readyState = \"open\";\n        this.writable = true;\n        super.emitReserved(\"open\");\n    }\n    /**\n     * Called with data.\n     *\n     * @param {String} data\n     * @api protected\n     */\n    onData(data) {\n        const packet = decodePacket(data, this.socket.binaryType);\n        this.onPacket(packet);\n    }\n    /**\n     * Called with a decoded packet.\n     *\n     * @api protected\n     */\n    onPacket(packet) {\n        super.emitReserved(\"packet\", packet);\n    }\n    /**\n     * Called upon close.\n     *\n     * @api protected\n     */\n    onClose(details) {\n        this.readyState = \"closed\";\n        super.emitReserved(\"close\", details);\n    }\n}\n","import { Polling } from \"./polling.js\";\nimport { WS } from \"./websocket.js\";\nexport const transports = {\n    websocket: WS,\n    polling: Polling\n};\n","import { Transport } from \"../transport.js\";\nimport { yeast } from \"../contrib/yeast.js\";\nimport { encode } from \"../contrib/parseqs.js\";\nimport { encodePayload, decodePayload } from \"engine.io-parser\";\nimport { XHR as XMLHttpRequest } from \"./xmlhttprequest.js\";\nimport { Emitter } from \"@socket.io/component-emitter\";\nimport { installTimerFunctions, pick } from \"../util.js\";\nimport { globalThisShim as globalThis } from \"../globalThis.js\";\nfunction empty() { }\nconst hasXHR2 = (function () {\n    const xhr = new XMLHttpRequest({\n        xdomain: false\n    });\n    return null != xhr.responseType;\n})();\nexport class Polling extends Transport {\n    /**\n     * XHR Polling constructor.\n     *\n     * @param {Object} opts\n     * @api public\n     */\n    constructor(opts) {\n        super(opts);\n        this.polling = false;\n        if (typeof location !== \"undefined\") {\n            const isSSL = \"https:\" === location.protocol;\n            let port = location.port;\n            // some user agents have empty `location.port`\n            if (!port) {\n                port = isSSL ? \"443\" : \"80\";\n            }\n            this.xd =\n                (typeof location !== \"undefined\" &&\n                    opts.hostname !== location.hostname) ||\n                    port !== opts.port;\n            this.xs = opts.secure !== isSSL;\n        }\n        /**\n         * XHR supports binary\n         */\n        const forceBase64 = opts && opts.forceBase64;\n        this.supportsBinary = hasXHR2 && !forceBase64;\n    }\n    /**\n     * Transport name.\n     */\n    get name() {\n        return \"polling\";\n    }\n    /**\n     * Opens the socket (triggers polling). We write a PING message to determine\n     * when the transport is open.\n     *\n     * @api private\n     */\n    doOpen() {\n        this.poll();\n    }\n    /**\n     * Pauses polling.\n     *\n     * @param {Function} callback upon buffers are flushed and transport is paused\n     * @api private\n     */\n    pause(onPause) {\n        this.readyState = \"pausing\";\n        const pause = () => {\n            this.readyState = \"paused\";\n            onPause();\n        };\n        if (this.polling || !this.writable) {\n            let total = 0;\n            if (this.polling) {\n                total++;\n                this.once(\"pollComplete\", function () {\n                    --total || pause();\n                });\n            }\n            if (!this.writable) {\n                total++;\n                this.once(\"drain\", function () {\n                    --total || pause();\n                });\n            }\n        }\n        else {\n            pause();\n        }\n    }\n    /**\n     * Starts polling cycle.\n     *\n     * @api public\n     */\n    poll() {\n        this.polling = true;\n        this.doPoll();\n        this.emitReserved(\"poll\");\n    }\n    /**\n     * Overloads onData to detect payloads.\n     *\n     * @api private\n     */\n    onData(data) {\n        const callback = packet => {\n            // if its the first message we consider the transport open\n            if (\"opening\" === this.readyState && packet.type === \"open\") {\n                this.onOpen();\n            }\n            // if its a close packet, we close the ongoing requests\n            if (\"close\" === packet.type) {\n                this.onClose({ description: \"transport closed by the server\" });\n                return false;\n            }\n            // otherwise bypass onData and handle the message\n            this.onPacket(packet);\n        };\n        // decode payload\n        decodePayload(data, this.socket.binaryType).forEach(callback);\n        // if an event did not trigger closing\n        if (\"closed\" !== this.readyState) {\n            // if we got data we're not polling\n            this.polling = false;\n            this.emitReserved(\"pollComplete\");\n            if (\"open\" === this.readyState) {\n                this.poll();\n            }\n            else {\n            }\n        }\n    }\n    /**\n     * For polling, send a close packet.\n     *\n     * @api private\n     */\n    doClose() {\n        const close = () => {\n            this.write([{ type: \"close\" }]);\n        };\n        if (\"open\" === this.readyState) {\n            close();\n        }\n        else {\n            // in case we're trying to close while\n            // handshaking is in progress (GH-164)\n            this.once(\"open\", close);\n        }\n    }\n    /**\n     * Writes a packets payload.\n     *\n     * @param {Array} data packets\n     * @param {Function} drain callback\n     * @api private\n     */\n    write(packets) {\n        this.writable = false;\n        encodePayload(packets, data => {\n            this.doWrite(data, () => {\n                this.writable = true;\n                this.emitReserved(\"drain\");\n            });\n        });\n    }\n    /**\n     * Generates uri for connection.\n     *\n     * @api private\n     */\n    uri() {\n        let query = this.query || {};\n        const schema = this.opts.secure ? \"https\" : \"http\";\n        let port = \"\";\n        // cache busting is forced\n        if (false !== this.opts.timestampRequests) {\n            query[this.opts.timestampParam] = yeast();\n        }\n        if (!this.supportsBinary && !query.sid) {\n            query.b64 = 1;\n        }\n        // avoid port if default for schema\n        if (this.opts.port &&\n            ((\"https\" === schema && Number(this.opts.port) !== 443) ||\n                (\"http\" === schema && Number(this.opts.port) !== 80))) {\n            port = \":\" + this.opts.port;\n        }\n        const encodedQuery = encode(query);\n        const ipv6 = this.opts.hostname.indexOf(\":\") !== -1;\n        return (schema +\n            \"://\" +\n            (ipv6 ? \"[\" + this.opts.hostname + \"]\" : this.opts.hostname) +\n            port +\n            this.opts.path +\n            (encodedQuery.length ? \"?\" + encodedQuery : \"\"));\n    }\n    /**\n     * Creates a request.\n     *\n     * @param {String} method\n     * @api private\n     */\n    request(opts = {}) {\n        Object.assign(opts, { xd: this.xd, xs: this.xs }, this.opts);\n        return new Request(this.uri(), opts);\n    }\n    /**\n     * Sends data.\n     *\n     * @param {String} data to send.\n     * @param {Function} called upon flush.\n     * @api private\n     */\n    doWrite(data, fn) {\n        const req = this.request({\n            method: \"POST\",\n            data: data\n        });\n        req.on(\"success\", fn);\n        req.on(\"error\", (xhrStatus, context) => {\n            this.onError(\"xhr post error\", xhrStatus, context);\n        });\n    }\n    /**\n     * Starts a poll cycle.\n     *\n     * @api private\n     */\n    doPoll() {\n        const req = this.request();\n        req.on(\"data\", this.onData.bind(this));\n        req.on(\"error\", (xhrStatus, context) => {\n            this.onError(\"xhr poll error\", xhrStatus, context);\n        });\n        this.pollXhr = req;\n    }\n}\nexport class Request extends Emitter {\n    /**\n     * Request constructor\n     *\n     * @param {Object} options\n     * @api public\n     */\n    constructor(uri, opts) {\n        super();\n        installTimerFunctions(this, opts);\n        this.opts = opts;\n        this.method = opts.method || \"GET\";\n        this.uri = uri;\n        this.async = false !== opts.async;\n        this.data = undefined !== opts.data ? opts.data : null;\n        this.create();\n    }\n    /**\n     * Creates the XHR object and sends the request.\n     *\n     * @api private\n     */\n    create() {\n        const opts = pick(this.opts, \"agent\", \"pfx\", \"key\", \"passphrase\", \"cert\", \"ca\", \"ciphers\", \"rejectUnauthorized\", \"autoUnref\");\n        opts.xdomain = !!this.opts.xd;\n        opts.xscheme = !!this.opts.xs;\n        const xhr = (this.xhr = new XMLHttpRequest(opts));\n        try {\n            xhr.open(this.method, this.uri, this.async);\n            try {\n                if (this.opts.extraHeaders) {\n                    xhr.setDisableHeaderCheck && xhr.setDisableHeaderCheck(true);\n                    for (let i in this.opts.extraHeaders) {\n                        if (this.opts.extraHeaders.hasOwnProperty(i)) {\n                            xhr.setRequestHeader(i, this.opts.extraHeaders[i]);\n                        }\n                    }\n                }\n            }\n            catch (e) { }\n            if (\"POST\" === this.method) {\n                try {\n                    xhr.setRequestHeader(\"Content-type\", \"text/plain;charset=UTF-8\");\n                }\n                catch (e) { }\n            }\n            try {\n                xhr.setRequestHeader(\"Accept\", \"*/*\");\n            }\n            catch (e) { }\n            // ie6 check\n            if (\"withCredentials\" in xhr) {\n                xhr.withCredentials = this.opts.withCredentials;\n            }\n            if (this.opts.requestTimeout) {\n                xhr.timeout = this.opts.requestTimeout;\n            }\n            xhr.onreadystatechange = () => {\n                if (4 !== xhr.readyState)\n                    return;\n                if (200 === xhr.status || 1223 === xhr.status) {\n                    this.onLoad();\n                }\n                else {\n                    // make sure the `error` event handler that's user-set\n                    // does not throw in the same tick and gets caught here\n                    this.setTimeoutFn(() => {\n                        this.onError(typeof xhr.status === \"number\" ? xhr.status : 0);\n                    }, 0);\n                }\n            };\n            xhr.send(this.data);\n        }\n        catch (e) {\n            // Need to defer since .create() is called directly from the constructor\n            // and thus the 'error' event can only be only bound *after* this exception\n            // occurs.  Therefore, also, we cannot throw here at all.\n            this.setTimeoutFn(() => {\n                this.onError(e);\n            }, 0);\n            return;\n        }\n        if (typeof document !== \"undefined\") {\n            this.index = Request.requestsCount++;\n            Request.requests[this.index] = this;\n        }\n    }\n    /**\n     * Called upon error.\n     *\n     * @api private\n     */\n    onError(err) {\n        this.emitReserved(\"error\", err, this.xhr);\n        this.cleanup(true);\n    }\n    /**\n     * Cleans up house.\n     *\n     * @api private\n     */\n    cleanup(fromError) {\n        if (\"undefined\" === typeof this.xhr || null === this.xhr) {\n            return;\n        }\n        this.xhr.onreadystatechange = empty;\n        if (fromError) {\n            try {\n                this.xhr.abort();\n            }\n            catch (e) { }\n        }\n        if (typeof document !== \"undefined\") {\n            delete Request.requests[this.index];\n        }\n        this.xhr = null;\n    }\n    /**\n     * Called upon load.\n     *\n     * @api private\n     */\n    onLoad() {\n        const data = this.xhr.responseText;\n        if (data !== null) {\n            this.emitReserved(\"data\", data);\n            this.emitReserved(\"success\");\n            this.cleanup();\n        }\n    }\n    /**\n     * Aborts the request.\n     *\n     * @api public\n     */\n    abort() {\n        this.cleanup();\n    }\n}\nRequest.requestsCount = 0;\nRequest.requests = {};\n/**\n * Aborts pending requests when unloading the window. This is needed to prevent\n * memory leaks (e.g. when using IE) and to ensure that no spurious error is\n * emitted.\n */\nif (typeof document !== \"undefined\") {\n    // @ts-ignore\n    if (typeof attachEvent === \"function\") {\n        // @ts-ignore\n        attachEvent(\"onunload\", unloadHandler);\n    }\n    else if (typeof addEventListener === \"function\") {\n        const terminationEvent = \"onpagehide\" in globalThis ? \"pagehide\" : \"unload\";\n        addEventListener(terminationEvent, unloadHandler, false);\n    }\n}\nfunction unloadHandler() {\n    for (let i in Request.requests) {\n        if (Request.requests.hasOwnProperty(i)) {\n            Request.requests[i].abort();\n        }\n    }\n}\n","import { globalThisShim as globalThis } from \"../globalThis.js\";\nexport const nextTick = (() => {\n    const isPromiseAvailable = typeof Promise === \"function\" && typeof Promise.resolve === \"function\";\n    if (isPromiseAvailable) {\n        return cb => Promise.resolve().then(cb);\n    }\n    else {\n        return (cb, setTimeoutFn) => setTimeoutFn(cb, 0);\n    }\n})();\nexport const WebSocket = globalThis.WebSocket || globalThis.MozWebSocket;\nexport const usingBrowserWebSocket = true;\nexport const defaultBinaryType = \"arraybuffer\";\n","import { Transport } from \"../transport.js\";\nimport { encode } from \"../contrib/parseqs.js\";\nimport { yeast } from \"../contrib/yeast.js\";\nimport { pick } from \"../util.js\";\nimport { defaultBinaryType, nextTick, usingBrowserWebSocket, WebSocket } from \"./websocket-constructor.js\";\nimport { encodePacket } from \"engine.io-parser\";\n// detect ReactNative environment\nconst isReactNative = typeof navigator !== \"undefined\" &&\n    typeof navigator.product === \"string\" &&\n    navigator.product.toLowerCase() === \"reactnative\";\nexport class WS extends Transport {\n    /**\n     * WebSocket transport constructor.\n     *\n     * @api {Object} connection options\n     * @api public\n     */\n    constructor(opts) {\n        super(opts);\n        this.supportsBinary = !opts.forceBase64;\n    }\n    /**\n     * Transport name.\n     *\n     * @api public\n     */\n    get name() {\n        return \"websocket\";\n    }\n    /**\n     * Opens socket.\n     *\n     * @api private\n     */\n    doOpen() {\n        if (!this.check()) {\n            // let probe timeout\n            return;\n        }\n        const uri = this.uri();\n        const protocols = this.opts.protocols;\n        // React Native only supports the 'headers' option, and will print a warning if anything else is passed\n        const opts = isReactNative\n            ? {}\n            : pick(this.opts, \"agent\", \"perMessageDeflate\", \"pfx\", \"key\", \"passphrase\", \"cert\", \"ca\", \"ciphers\", \"rejectUnauthorized\", \"localAddress\", \"protocolVersion\", \"origin\", \"maxPayload\", \"family\", \"checkServerIdentity\");\n        if (this.opts.extraHeaders) {\n            opts.headers = this.opts.extraHeaders;\n        }\n        try {\n            this.ws =\n                usingBrowserWebSocket && !isReactNative\n                    ? protocols\n                        ? new WebSocket(uri, protocols)\n                        : new WebSocket(uri)\n                    : new WebSocket(uri, protocols, opts);\n        }\n        catch (err) {\n            return this.emitReserved(\"error\", err);\n        }\n        this.ws.binaryType = this.socket.binaryType || defaultBinaryType;\n        this.addEventListeners();\n    }\n    /**\n     * Adds event listeners to the socket\n     *\n     * @api private\n     */\n    addEventListeners() {\n        this.ws.onopen = () => {\n            if (this.opts.autoUnref) {\n                this.ws._socket.unref();\n            }\n            this.onOpen();\n        };\n        this.ws.onclose = closeEvent => this.onClose({\n            description: \"websocket connection closed\",\n            context: closeEvent\n        });\n        this.ws.onmessage = ev => this.onData(ev.data);\n        this.ws.onerror = e => this.onError(\"websocket error\", e);\n    }\n    /**\n     * Writes data to socket.\n     *\n     * @param {Array} array of packets.\n     * @api private\n     */\n    write(packets) {\n        this.writable = false;\n        // encodePacket efficient as it uses WS framing\n        // no need for encodePayload\n        for (let i = 0; i < packets.length; i++) {\n            const packet = packets[i];\n            const lastPacket = i === packets.length - 1;\n            encodePacket(packet, this.supportsBinary, data => {\n                // always create a new object (GH-437)\n                const opts = {};\n                if (!usingBrowserWebSocket) {\n                    if (packet.options) {\n                        opts.compress = packet.options.compress;\n                    }\n                    if (this.opts.perMessageDeflate) {\n                        const len = \n                        // @ts-ignore\n                        \"string\" === typeof data ? Buffer.byteLength(data) : data.length;\n                        if (len < this.opts.perMessageDeflate.threshold) {\n                            opts.compress = false;\n                        }\n                    }\n                }\n                // Sometimes the websocket has already been closed but the browser didn't\n                // have a chance of informing us about it yet, in that case send will\n                // throw an error\n                try {\n                    if (usingBrowserWebSocket) {\n                        // TypeError is thrown when passing the second argument on Safari\n                        this.ws.send(data);\n                    }\n                    else {\n                        this.ws.send(data, opts);\n                    }\n                }\n                catch (e) {\n                }\n                if (lastPacket) {\n                    // fake drain\n                    // defer to next tick to allow Socket to clear writeBuffer\n                    nextTick(() => {\n                        this.writable = true;\n                        this.emitReserved(\"drain\");\n                    }, this.setTimeoutFn);\n                }\n            });\n        }\n    }\n    /**\n     * Closes socket.\n     *\n     * @api private\n     */\n    doClose() {\n        if (typeof this.ws !== \"undefined\") {\n            this.ws.close();\n            this.ws = null;\n        }\n    }\n    /**\n     * Generates uri for connection.\n     *\n     * @api private\n     */\n    uri() {\n        let query = this.query || {};\n        const schema = this.opts.secure ? \"wss\" : \"ws\";\n        let port = \"\";\n        // avoid port if default for schema\n        if (this.opts.port &&\n            ((\"wss\" === schema && Number(this.opts.port) !== 443) ||\n                (\"ws\" === schema && Number(this.opts.port) !== 80))) {\n            port = \":\" + this.opts.port;\n        }\n        // append timestamp to URI\n        if (this.opts.timestampRequests) {\n            query[this.opts.timestampParam] = yeast();\n        }\n        // communicate binary support capabilities\n        if (!this.supportsBinary) {\n            query.b64 = 1;\n        }\n        const encodedQuery = encode(query);\n        const ipv6 = this.opts.hostname.indexOf(\":\") !== -1;\n        return (schema +\n            \"://\" +\n            (ipv6 ? \"[\" + this.opts.hostname + \"]\" : this.opts.hostname) +\n            port +\n            this.opts.path +\n            (encodedQuery.length ? \"?\" + encodedQuery : \"\"));\n    }\n    /**\n     * Feature detection for WebSocket.\n     *\n     * @return {Boolean} whether this transport is available.\n     * @api public\n     */\n    check() {\n        return !!WebSocket;\n    }\n}\n","// browser shim for xmlhttprequest module\nimport { hasCORS } from \"../contrib/has-cors.js\";\nimport { globalThisShim as globalThis } from \"../globalThis.js\";\nexport function XHR(opts) {\n    const xdomain = opts.xdomain;\n    // XMLHttpRequest can be disabled on IE\n    try {\n        if (\"undefined\" !== typeof XMLHttpRequest && (!xdomain || hasCORS)) {\n            return new XMLHttpRequest();\n        }\n    }\n    catch (e) { }\n    if (!xdomain) {\n        try {\n            return new globalThis[[\"Active\"].concat(\"Object\").join(\"X\")](\"Microsoft.XMLHTTP\");\n        }\n        catch (e) { }\n    }\n}\n","import { globalThisShim as globalThis } from \"./globalThis.js\";\nexport function pick(obj, ...attr) {\n    return attr.reduce((acc, k) => {\n        if (obj.hasOwnProperty(k)) {\n            acc[k] = obj[k];\n        }\n        return acc;\n    }, {});\n}\n// Keep a reference to the real timeout functions so they can be used when overridden\nconst NATIVE_SET_TIMEOUT = setTimeout;\nconst NATIVE_CLEAR_TIMEOUT = clearTimeout;\nexport function installTimerFunctions(obj, opts) {\n    if (opts.useNativeTimers) {\n        obj.setTimeoutFn = NATIVE_SET_TIMEOUT.bind(globalThis);\n        obj.clearTimeoutFn = NATIVE_CLEAR_TIMEOUT.bind(globalThis);\n    }\n    else {\n        obj.setTimeoutFn = setTimeout.bind(globalThis);\n        obj.clearTimeoutFn = clearTimeout.bind(globalThis);\n    }\n}\n// base64 encoded buffers are about 33% bigger (https://en.wikipedia.org/wiki/Base64)\nconst BASE64_OVERHEAD = 1.33;\n// we could also have used `new Blob([obj]).size`, but it isn't supported in IE9\nexport function byteLength(obj) {\n    if (typeof obj === \"string\") {\n        return utf8Length(obj);\n    }\n    // arraybuffer or blob\n    return Math.ceil((obj.byteLength || obj.size) * BASE64_OVERHEAD);\n}\nfunction utf8Length(str) {\n    let c = 0, length = 0;\n    for (let i = 0, l = str.length; i < l; i++) {\n        c = str.charCodeAt(i);\n        if (c < 0x80) {\n            length += 1;\n        }\n        else if (c < 0x800) {\n            length += 2;\n        }\n        else if (c < 0xd800 || c >= 0xe000) {\n            length += 3;\n        }\n        else {\n            i++;\n            length += 4;\n        }\n    }\n    return length;\n}\n","const PACKET_TYPES = Object.create(null); // no Map = no polyfill\nPACKET_TYPES[\"open\"] = \"0\";\nPACKET_TYPES[\"close\"] = \"1\";\nPACKET_TYPES[\"ping\"] = \"2\";\nPACKET_TYPES[\"pong\"] = \"3\";\nPACKET_TYPES[\"message\"] = \"4\";\nPACKET_TYPES[\"upgrade\"] = \"5\";\nPACKET_TYPES[\"noop\"] = \"6\";\nconst PACKET_TYPES_REVERSE = Object.create(null);\nObject.keys(PACKET_TYPES).forEach(key => {\n    PACKET_TYPES_REVERSE[PACKET_TYPES[key]] = key;\n});\nconst ERROR_PACKET = { type: \"error\", data: \"parser error\" };\nexport { PACKET_TYPES, PACKET_TYPES_REVERSE, ERROR_PACKET };\n","// imported from https://github.com/socketio/base64-arraybuffer\nconst chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n// Use a lookup table to find the index.\nconst lookup = typeof Uint8Array === 'undefined' ? [] : new Uint8Array(256);\nfor (let i = 0; i < chars.length; i++) {\n    lookup[chars.charCodeAt(i)] = i;\n}\nexport const encode = (arraybuffer) => {\n    let bytes = new Uint8Array(arraybuffer), i, len = bytes.length, base64 = '';\n    for (i = 0; i < len; i += 3) {\n        base64 += chars[bytes[i] >> 2];\n        base64 += chars[((bytes[i] & 3) << 4) | (bytes[i + 1] >> 4)];\n        base64 += chars[((bytes[i + 1] & 15) << 2) | (bytes[i + 2] >> 6)];\n        base64 += chars[bytes[i + 2] & 63];\n    }\n    if (len % 3 === 2) {\n        base64 = base64.substring(0, base64.length - 1) + '=';\n    }\n    else if (len % 3 === 1) {\n        base64 = base64.substring(0, base64.length - 2) + '==';\n    }\n    return base64;\n};\nexport const decode = (base64) => {\n    let bufferLength = base64.length * 0.75, len = base64.length, i, p = 0, encoded1, encoded2, encoded3, encoded4;\n    if (base64[base64.length - 1] === '=') {\n        bufferLength--;\n        if (base64[base64.length - 2] === '=') {\n            bufferLength--;\n        }\n    }\n    const arraybuffer = new ArrayBuffer(bufferLength), bytes = new Uint8Array(arraybuffer);\n    for (i = 0; i < len; i += 4) {\n        encoded1 = lookup[base64.charCodeAt(i)];\n        encoded2 = lookup[base64.charCodeAt(i + 1)];\n        encoded3 = lookup[base64.charCodeAt(i + 2)];\n        encoded4 = lookup[base64.charCodeAt(i + 3)];\n        bytes[p++] = (encoded1 << 2) | (encoded2 >> 4);\n        bytes[p++] = ((encoded2 & 15) << 4) | (encoded3 >> 2);\n        bytes[p++] = ((encoded3 & 3) << 6) | (encoded4 & 63);\n    }\n    return arraybuffer;\n};\n","import { ERROR_PACKET, PACKET_TYPES_REVERSE } from \"./commons.js\";\nimport { decode } from \"./contrib/base64-arraybuffer.js\";\nconst withNativeArrayBuffer = typeof ArrayBuffer === \"function\";\nconst decodePacket = (encodedPacket, binaryType) => {\n    if (typeof encodedPacket !== \"string\") {\n        return {\n            type: \"message\",\n            data: mapBinary(encodedPacket, binaryType)\n        };\n    }\n    const type = encodedPacket.charAt(0);\n    if (type === \"b\") {\n        return {\n            type: \"message\",\n            data: decodeBase64Packet(encodedPacket.substring(1), binaryType)\n        };\n    }\n    const packetType = PACKET_TYPES_REVERSE[type];\n    if (!packetType) {\n        return ERROR_PACKET;\n    }\n    return encodedPacket.length > 1\n        ? {\n            type: PACKET_TYPES_REVERSE[type],\n            data: encodedPacket.substring(1)\n        }\n        : {\n            type: PACKET_TYPES_REVERSE[type]\n        };\n};\nconst decodeBase64Packet = (data, binaryType) => {\n    if (withNativeArrayBuffer) {\n        const decoded = decode(data);\n        return mapBinary(decoded, binaryType);\n    }\n    else {\n        return { base64: true, data }; // fallback for old browsers\n    }\n};\nconst mapBinary = (data, binaryType) => {\n    switch (binaryType) {\n        case \"blob\":\n            return data instanceof ArrayBuffer ? new Blob([data]) : data;\n        case \"arraybuffer\":\n        default:\n            return data; // assuming the data is already an ArrayBuffer\n    }\n};\nexport default decodePacket;\n","import { PACKET_TYPES } from \"./commons.js\";\nconst withNativeBlob = typeof Blob === \"function\" ||\n    (typeof Blob !== \"undefined\" &&\n        Object.prototype.toString.call(Blob) === \"[object BlobConstructor]\");\nconst withNativeArrayBuffer = typeof ArrayBuffer === \"function\";\n// ArrayBuffer.isView method is not defined in IE10\nconst isView = obj => {\n    return typeof ArrayBuffer.isView === \"function\"\n        ? ArrayBuffer.isView(obj)\n        : obj && obj.buffer instanceof ArrayBuffer;\n};\nconst encodePacket = ({ type, data }, supportsBinary, callback) => {\n    if (withNativeBlob && data instanceof Blob) {\n        if (supportsBinary) {\n            return callback(data);\n        }\n        else {\n            return encodeBlobAsBase64(data, callback);\n        }\n    }\n    else if (withNativeArrayBuffer &&\n        (data instanceof ArrayBuffer || isView(data))) {\n        if (supportsBinary) {\n            return callback(data);\n        }\n        else {\n            return encodeBlobAsBase64(new Blob([data]), callback);\n        }\n    }\n    // plain string\n    return callback(PACKET_TYPES[type] + (data || \"\"));\n};\nconst encodeBlobAsBase64 = (data, callback) => {\n    const fileReader = new FileReader();\n    fileReader.onload = function () {\n        const content = fileReader.result.split(\",\")[1];\n        callback(\"b\" + (content || \"\"));\n    };\n    return fileReader.readAsDataURL(data);\n};\nexport default encodePacket;\n","import encodePacket from \"./encodePacket.js\";\nimport decodePacket from \"./decodePacket.js\";\nconst SEPARATOR = String.fromCharCode(30); // see https://en.wikipedia.org/wiki/Delimiter#ASCII_delimited_text\nconst encodePayload = (packets, callback) => {\n    // some packets may be added to the array while encoding, so the initial length must be saved\n    const length = packets.length;\n    const encodedPackets = new Array(length);\n    let count = 0;\n    packets.forEach((packet, i) => {\n        // force base64 encoding for binary packets\n        encodePacket(packet, false, encodedPacket => {\n            encodedPackets[i] = encodedPacket;\n            if (++count === length) {\n                callback(encodedPackets.join(SEPARATOR));\n            }\n        });\n    });\n};\nconst decodePayload = (encodedPayload, binaryType) => {\n    const encodedPackets = encodedPayload.split(SEPARATOR);\n    const packets = [];\n    for (let i = 0; i < encodedPackets.length; i++) {\n        const decodedPacket = decodePacket(encodedPackets[i], binaryType);\n        packets.push(decodedPacket);\n        if (decodedPacket.type === \"error\") {\n            break;\n        }\n    }\n    return packets;\n};\nexport const protocol = 4;\nexport { encodePacket, encodePayload, decodePacket, decodePayload };\n","/**\n * Initialize backoff timer with `opts`.\n *\n * - `min` initial timeout in milliseconds [100]\n * - `max` max timeout [10000]\n * - `jitter` [0]\n * - `factor` [2]\n *\n * @param {Object} opts\n * @api public\n */\nexport function Backoff(opts) {\n    opts = opts || {};\n    this.ms = opts.min || 100;\n    this.max = opts.max || 10000;\n    this.factor = opts.factor || 2;\n    this.jitter = opts.jitter > 0 && opts.jitter <= 1 ? opts.jitter : 0;\n    this.attempts = 0;\n}\n/**\n * Return the backoff duration.\n *\n * @return {Number}\n * @api public\n */\nBackoff.prototype.duration = function () {\n    var ms = this.ms * Math.pow(this.factor, this.attempts++);\n    if (this.jitter) {\n        var rand = Math.random();\n        var deviation = Math.floor(rand * this.jitter * ms);\n        ms = (Math.floor(rand * 10) & 1) == 0 ? ms - deviation : ms + deviation;\n    }\n    return Math.min(ms, this.max) | 0;\n};\n/**\n * Reset the number of attempts.\n *\n * @api public\n */\nBackoff.prototype.reset = function () {\n    this.attempts = 0;\n};\n/**\n * Set the minimum duration\n *\n * @api public\n */\nBackoff.prototype.setMin = function (min) {\n    this.ms = min;\n};\n/**\n * Set the maximum duration\n *\n * @api public\n */\nBackoff.prototype.setMax = function (max) {\n    this.max = max;\n};\n/**\n * Set the jitter\n *\n * @api public\n */\nBackoff.prototype.setJitter = function (jitter) {\n    this.jitter = jitter;\n};\n","import { url } from \"./url.js\";\nimport { Manager } from \"./manager.js\";\nimport { Socket } from \"./socket.js\";\n/**\n * Managers cache.\n */\nconst cache = {};\nfunction lookup(uri, opts) {\n    if (typeof uri === \"object\") {\n        opts = uri;\n        uri = undefined;\n    }\n    opts = opts || {};\n    const parsed = url(uri, opts.path || \"/socket.io\");\n    const source = parsed.source;\n    const id = parsed.id;\n    const path = parsed.path;\n    const sameNamespace = cache[id] && path in cache[id][\"nsps\"];\n    const newConnection = opts.forceNew ||\n        opts[\"force new connection\"] ||\n        false === opts.multiplex ||\n        sameNamespace;\n    let io;\n    if (newConnection) {\n        io = new Manager(source, opts);\n    }\n    else {\n        if (!cache[id]) {\n            cache[id] = new Manager(source, opts);\n        }\n        io = cache[id];\n    }\n    if (parsed.query && !opts.query) {\n        opts.query = parsed.queryKey;\n    }\n    return io.socket(parsed.path, opts);\n}\n// so that \"lookup\" can be used both as a function (e.g. `io(...)`) and as a\n// namespace (e.g. `io.connect(...)`), for backward compatibility\nObject.assign(lookup, {\n    Manager,\n    Socket,\n    io: lookup,\n    connect: lookup,\n});\n/**\n * Protocol version.\n *\n * @public\n */\nexport { protocol } from \"socket.io-parser\";\n/**\n * Expose constructors for standalone build.\n *\n * @public\n */\nexport { Manager, Socket, lookup as io, lookup as connect, lookup as default, };\n","import { Socket as Engine, installTimerFunctions, nextTick, } from \"engine.io-client\";\nimport { Socket } from \"./socket.js\";\nimport * as parser from \"socket.io-parser\";\nimport { on } from \"./on.js\";\nimport { Backoff } from \"./contrib/backo2.js\";\nimport { Emitter, } from \"@socket.io/component-emitter\";\nexport class Manager extends Emitter {\n    constructor(uri, opts) {\n        var _a;\n        super();\n        this.nsps = {};\n        this.subs = [];\n        if (uri && \"object\" === typeof uri) {\n            opts = uri;\n            uri = undefined;\n        }\n        opts = opts || {};\n        opts.path = opts.path || \"/socket.io\";\n        this.opts = opts;\n        installTimerFunctions(this, opts);\n        this.reconnection(opts.reconnection !== false);\n        this.reconnectionAttempts(opts.reconnectionAttempts || Infinity);\n        this.reconnectionDelay(opts.reconnectionDelay || 1000);\n        this.reconnectionDelayMax(opts.reconnectionDelayMax || 5000);\n        this.randomizationFactor((_a = opts.randomizationFactor) !== null && _a !== void 0 ? _a : 0.5);\n        this.backoff = new Backoff({\n            min: this.reconnectionDelay(),\n            max: this.reconnectionDelayMax(),\n            jitter: this.randomizationFactor(),\n        });\n        this.timeout(null == opts.timeout ? 20000 : opts.timeout);\n        this._readyState = \"closed\";\n        this.uri = uri;\n        const _parser = opts.parser || parser;\n        this.encoder = new _parser.Encoder();\n        this.decoder = new _parser.Decoder();\n        this._autoConnect = opts.autoConnect !== false;\n        if (this._autoConnect)\n            this.open();\n    }\n    reconnection(v) {\n        if (!arguments.length)\n            return this._reconnection;\n        this._reconnection = !!v;\n        return this;\n    }\n    reconnectionAttempts(v) {\n        if (v === undefined)\n            return this._reconnectionAttempts;\n        this._reconnectionAttempts = v;\n        return this;\n    }\n    reconnectionDelay(v) {\n        var _a;\n        if (v === undefined)\n            return this._reconnectionDelay;\n        this._reconnectionDelay = v;\n        (_a = this.backoff) === null || _a === void 0 ? void 0 : _a.setMin(v);\n        return this;\n    }\n    randomizationFactor(v) {\n        var _a;\n        if (v === undefined)\n            return this._randomizationFactor;\n        this._randomizationFactor = v;\n        (_a = this.backoff) === null || _a === void 0 ? void 0 : _a.setJitter(v);\n        return this;\n    }\n    reconnectionDelayMax(v) {\n        var _a;\n        if (v === undefined)\n            return this._reconnectionDelayMax;\n        this._reconnectionDelayMax = v;\n        (_a = this.backoff) === null || _a === void 0 ? void 0 : _a.setMax(v);\n        return this;\n    }\n    timeout(v) {\n        if (!arguments.length)\n            return this._timeout;\n        this._timeout = v;\n        return this;\n    }\n    /**\n     * Starts trying to reconnect if reconnection is enabled and we have not\n     * started reconnecting yet\n     *\n     * @private\n     */\n    maybeReconnectOnOpen() {\n        // Only try to reconnect if it's the first time we're connecting\n        if (!this._reconnecting &&\n            this._reconnection &&\n            this.backoff.attempts === 0) {\n            // keeps reconnection from firing twice for the same reconnection loop\n            this.reconnect();\n        }\n    }\n    /**\n     * Sets the current transport `socket`.\n     *\n     * @param {Function} fn - optional, callback\n     * @return self\n     * @public\n     */\n    open(fn) {\n        if (~this._readyState.indexOf(\"open\"))\n            return this;\n        this.engine = new Engine(this.uri, this.opts);\n        const socket = this.engine;\n        const self = this;\n        this._readyState = \"opening\";\n        this.skipReconnect = false;\n        // emit `open`\n        const openSubDestroy = on(socket, \"open\", function () {\n            self.onopen();\n            fn && fn();\n        });\n        // emit `error`\n        const errorSub = on(socket, \"error\", (err) => {\n            self.cleanup();\n            self._readyState = \"closed\";\n            this.emitReserved(\"error\", err);\n            if (fn) {\n                fn(err);\n            }\n            else {\n                // Only do this if there is no fn to handle the error\n                self.maybeReconnectOnOpen();\n            }\n        });\n        if (false !== this._timeout) {\n            const timeout = this._timeout;\n            if (timeout === 0) {\n                openSubDestroy(); // prevents a race condition with the 'open' event\n            }\n            // set timer\n            const timer = this.setTimeoutFn(() => {\n                openSubDestroy();\n                socket.close();\n                // @ts-ignore\n                socket.emit(\"error\", new Error(\"timeout\"));\n            }, timeout);\n            if (this.opts.autoUnref) {\n                timer.unref();\n            }\n            this.subs.push(function subDestroy() {\n                clearTimeout(timer);\n            });\n        }\n        this.subs.push(openSubDestroy);\n        this.subs.push(errorSub);\n        return this;\n    }\n    /**\n     * Alias for open()\n     *\n     * @return self\n     * @public\n     */\n    connect(fn) {\n        return this.open(fn);\n    }\n    /**\n     * Called upon transport open.\n     *\n     * @private\n     */\n    onopen() {\n        // clear old subs\n        this.cleanup();\n        // mark as open\n        this._readyState = \"open\";\n        this.emitReserved(\"open\");\n        // add new subs\n        const socket = this.engine;\n        this.subs.push(on(socket, \"ping\", this.onping.bind(this)), on(socket, \"data\", this.ondata.bind(this)), on(socket, \"error\", this.onerror.bind(this)), on(socket, \"close\", this.onclose.bind(this)), on(this.decoder, \"decoded\", this.ondecoded.bind(this)));\n    }\n    /**\n     * Called upon a ping.\n     *\n     * @private\n     */\n    onping() {\n        this.emitReserved(\"ping\");\n    }\n    /**\n     * Called with data.\n     *\n     * @private\n     */\n    ondata(data) {\n        try {\n            this.decoder.add(data);\n        }\n        catch (e) {\n            this.onclose(\"parse error\", e);\n        }\n    }\n    /**\n     * Called when parser fully decodes a packet.\n     *\n     * @private\n     */\n    ondecoded(packet) {\n        // the nextTick call prevents an exception in a user-provided event listener from triggering a disconnection due to a \"parse error\"\n        nextTick(() => {\n            this.emitReserved(\"packet\", packet);\n        }, this.setTimeoutFn);\n    }\n    /**\n     * Called upon socket error.\n     *\n     * @private\n     */\n    onerror(err) {\n        this.emitReserved(\"error\", err);\n    }\n    /**\n     * Creates a new socket for the given `nsp`.\n     *\n     * @return {Socket}\n     * @public\n     */\n    socket(nsp, opts) {\n        let socket = this.nsps[nsp];\n        if (!socket) {\n            socket = new Socket(this, nsp, opts);\n            this.nsps[nsp] = socket;\n        }\n        return socket;\n    }\n    /**\n     * Called upon a socket close.\n     *\n     * @param socket\n     * @private\n     */\n    _destroy(socket) {\n        const nsps = Object.keys(this.nsps);\n        for (const nsp of nsps) {\n            const socket = this.nsps[nsp];\n            if (socket.active) {\n                return;\n            }\n        }\n        this._close();\n    }\n    /**\n     * Writes a packet.\n     *\n     * @param packet\n     * @private\n     */\n    _packet(packet) {\n        const encodedPackets = this.encoder.encode(packet);\n        for (let i = 0; i < encodedPackets.length; i++) {\n            this.engine.write(encodedPackets[i], packet.options);\n        }\n    }\n    /**\n     * Clean up transport subscriptions and packet buffer.\n     *\n     * @private\n     */\n    cleanup() {\n        this.subs.forEach((subDestroy) => subDestroy());\n        this.subs.length = 0;\n        this.decoder.destroy();\n    }\n    /**\n     * Close the current socket.\n     *\n     * @private\n     */\n    _close() {\n        this.skipReconnect = true;\n        this._reconnecting = false;\n        this.onclose(\"forced close\");\n        if (this.engine)\n            this.engine.close();\n    }\n    /**\n     * Alias for close()\n     *\n     * @private\n     */\n    disconnect() {\n        return this._close();\n    }\n    /**\n     * Called upon engine close.\n     *\n     * @private\n     */\n    onclose(reason, description) {\n        this.cleanup();\n        this.backoff.reset();\n        this._readyState = \"closed\";\n        this.emitReserved(\"close\", reason, description);\n        if (this._reconnection && !this.skipReconnect) {\n            this.reconnect();\n        }\n    }\n    /**\n     * Attempt a reconnection.\n     *\n     * @private\n     */\n    reconnect() {\n        if (this._reconnecting || this.skipReconnect)\n            return this;\n        const self = this;\n        if (this.backoff.attempts >= this._reconnectionAttempts) {\n            this.backoff.reset();\n            this.emitReserved(\"reconnect_failed\");\n            this._reconnecting = false;\n        }\n        else {\n            const delay = this.backoff.duration();\n            this._reconnecting = true;\n            const timer = this.setTimeoutFn(() => {\n                if (self.skipReconnect)\n                    return;\n                this.emitReserved(\"reconnect_attempt\", self.backoff.attempts);\n                // check again for the case socket closed in above events\n                if (self.skipReconnect)\n                    return;\n                self.open((err) => {\n                    if (err) {\n                        self._reconnecting = false;\n                        self.reconnect();\n                        this.emitReserved(\"reconnect_error\", err);\n                    }\n                    else {\n                        self.onreconnect();\n                    }\n                });\n            }, delay);\n            if (this.opts.autoUnref) {\n                timer.unref();\n            }\n            this.subs.push(function subDestroy() {\n                clearTimeout(timer);\n            });\n        }\n    }\n    /**\n     * Called upon successful reconnect.\n     *\n     * @private\n     */\n    onreconnect() {\n        const attempt = this.backoff.attempts;\n        this._reconnecting = false;\n        this.backoff.reset();\n        this.emitReserved(\"reconnect\", attempt);\n    }\n}\n","export function on(obj, ev, fn) {\n    obj.on(ev, fn);\n    return function subDestroy() {\n        obj.off(ev, fn);\n    };\n}\n","import { PacketType } from \"socket.io-parser\";\nimport { on } from \"./on.js\";\nimport { Emitter, } from \"@socket.io/component-emitter\";\n/**\n * Internal events.\n * These events can't be emitted by the user.\n */\nconst RESERVED_EVENTS = Object.freeze({\n    connect: 1,\n    connect_error: 1,\n    disconnect: 1,\n    disconnecting: 1,\n    // EventEmitter reserved events: https://nodejs.org/api/events.html#events_event_newlistener\n    newListener: 1,\n    removeListener: 1,\n});\n/**\n * A Socket is the fundamental class for interacting with the server.\n *\n * A Socket belongs to a certain Namespace (by default /) and uses an underlying {@link Manager} to communicate.\n *\n * @example\n * const socket = io();\n *\n * socket.on(\"connect\", () => {\n *   console.log(\"connected\");\n * });\n *\n * // send an event to the server\n * socket.emit(\"foo\", \"bar\");\n *\n * socket.on(\"foobar\", () => {\n *   // an event was received from the server\n * });\n *\n * // upon disconnection\n * socket.on(\"disconnect\", (reason) => {\n *   console.log(`disconnected due to ${reason}`);\n * });\n */\nexport class Socket extends Emitter {\n    /**\n     * `Socket` constructor.\n     */\n    constructor(io, nsp, opts) {\n        super();\n        /**\n         * Whether the socket is currently connected to the server.\n         *\n         * @example\n         * const socket = io();\n         *\n         * socket.on(\"connect\", () => {\n         *   console.log(socket.connected); // true\n         * });\n         *\n         * socket.on(\"disconnect\", () => {\n         *   console.log(socket.connected); // false\n         * });\n         */\n        this.connected = false;\n        /**\n         * Buffer for packets received before the CONNECT packet\n         */\n        this.receiveBuffer = [];\n        /**\n         * Buffer for packets that will be sent once the socket is connected\n         */\n        this.sendBuffer = [];\n        this.ids = 0;\n        this.acks = {};\n        this.flags = {};\n        this.io = io;\n        this.nsp = nsp;\n        if (opts && opts.auth) {\n            this.auth = opts.auth;\n        }\n        if (this.io._autoConnect)\n            this.open();\n    }\n    /**\n     * Whether the socket is currently disconnected\n     *\n     * @example\n     * const socket = io();\n     *\n     * socket.on(\"connect\", () => {\n     *   console.log(socket.disconnected); // false\n     * });\n     *\n     * socket.on(\"disconnect\", () => {\n     *   console.log(socket.disconnected); // true\n     * });\n     */\n    get disconnected() {\n        return !this.connected;\n    }\n    /**\n     * Subscribe to open, close and packet events\n     *\n     * @private\n     */\n    subEvents() {\n        if (this.subs)\n            return;\n        const io = this.io;\n        this.subs = [\n            on(io, \"open\", this.onopen.bind(this)),\n            on(io, \"packet\", this.onpacket.bind(this)),\n            on(io, \"error\", this.onerror.bind(this)),\n            on(io, \"close\", this.onclose.bind(this)),\n        ];\n    }\n    /**\n     * Whether the Socket will try to reconnect when its Manager connects or reconnects.\n     *\n     * @example\n     * const socket = io();\n     *\n     * console.log(socket.active); // true\n     *\n     * socket.on(\"disconnect\", (reason) => {\n     *   if (reason === \"io server disconnect\") {\n     *     // the disconnection was initiated by the server, you need to manually reconnect\n     *     console.log(socket.active); // false\n     *   }\n     *   // else the socket will automatically try to reconnect\n     *   console.log(socket.active); // true\n     * });\n     */\n    get active() {\n        return !!this.subs;\n    }\n    /**\n     * \"Opens\" the socket.\n     *\n     * @example\n     * const socket = io({\n     *   autoConnect: false\n     * });\n     *\n     * socket.connect();\n     */\n    connect() {\n        if (this.connected)\n            return this;\n        this.subEvents();\n        if (!this.io[\"_reconnecting\"])\n            this.io.open(); // ensure open\n        if (\"open\" === this.io._readyState)\n            this.onopen();\n        return this;\n    }\n    /**\n     * Alias for {@link connect()}.\n     */\n    open() {\n        return this.connect();\n    }\n    /**\n     * Sends a `message` event.\n     *\n     * This method mimics the WebSocket.send() method.\n     *\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/send\n     *\n     * @example\n     * socket.send(\"hello\");\n     *\n     * // this is equivalent to\n     * socket.emit(\"message\", \"hello\");\n     *\n     * @return self\n     */\n    send(...args) {\n        args.unshift(\"message\");\n        this.emit.apply(this, args);\n        return this;\n    }\n    /**\n     * Override `emit`.\n     * If the event is in `events`, it's emitted normally.\n     *\n     * @example\n     * socket.emit(\"hello\", \"world\");\n     *\n     * // all serializable datastructures are supported (no need to call JSON.stringify)\n     * socket.emit(\"hello\", 1, \"2\", { 3: [\"4\"], 5: Uint8Array.from([6]) });\n     *\n     * // with an acknowledgement from the server\n     * socket.emit(\"hello\", \"world\", (val) => {\n     *   // ...\n     * });\n     *\n     * @return self\n     */\n    emit(ev, ...args) {\n        if (RESERVED_EVENTS.hasOwnProperty(ev)) {\n            throw new Error('\"' + ev.toString() + '\" is a reserved event name');\n        }\n        args.unshift(ev);\n        const packet = {\n            type: PacketType.EVENT,\n            data: args,\n        };\n        packet.options = {};\n        packet.options.compress = this.flags.compress !== false;\n        // event ack callback\n        if (\"function\" === typeof args[args.length - 1]) {\n            const id = this.ids++;\n            const ack = args.pop();\n            this._registerAckCallback(id, ack);\n            packet.id = id;\n        }\n        const isTransportWritable = this.io.engine &&\n            this.io.engine.transport &&\n            this.io.engine.transport.writable;\n        const discardPacket = this.flags.volatile && (!isTransportWritable || !this.connected);\n        if (discardPacket) {\n        }\n        else if (this.connected) {\n            this.notifyOutgoingListeners(packet);\n            this.packet(packet);\n        }\n        else {\n            this.sendBuffer.push(packet);\n        }\n        this.flags = {};\n        return this;\n    }\n    /**\n     * @private\n     */\n    _registerAckCallback(id, ack) {\n        const timeout = this.flags.timeout;\n        if (timeout === undefined) {\n            this.acks[id] = ack;\n            return;\n        }\n        // @ts-ignore\n        const timer = this.io.setTimeoutFn(() => {\n            delete this.acks[id];\n            for (let i = 0; i < this.sendBuffer.length; i++) {\n                if (this.sendBuffer[i].id === id) {\n                    this.sendBuffer.splice(i, 1);\n                }\n            }\n            ack.call(this, new Error(\"operation has timed out\"));\n        }, timeout);\n        this.acks[id] = (...args) => {\n            // @ts-ignore\n            this.io.clearTimeoutFn(timer);\n            ack.apply(this, [null, ...args]);\n        };\n    }\n    /**\n     * Sends a packet.\n     *\n     * @param packet\n     * @private\n     */\n    packet(packet) {\n        packet.nsp = this.nsp;\n        this.io._packet(packet);\n    }\n    /**\n     * Called upon engine `open`.\n     *\n     * @private\n     */\n    onopen() {\n        if (typeof this.auth == \"function\") {\n            this.auth((data) => {\n                this.packet({ type: PacketType.CONNECT, data });\n            });\n        }\n        else {\n            this.packet({ type: PacketType.CONNECT, data: this.auth });\n        }\n    }\n    /**\n     * Called upon engine or manager `error`.\n     *\n     * @param err\n     * @private\n     */\n    onerror(err) {\n        if (!this.connected) {\n            this.emitReserved(\"connect_error\", err);\n        }\n    }\n    /**\n     * Called upon engine `close`.\n     *\n     * @param reason\n     * @param description\n     * @private\n     */\n    onclose(reason, description) {\n        this.connected = false;\n        delete this.id;\n        this.emitReserved(\"disconnect\", reason, description);\n    }\n    /**\n     * Called with socket packet.\n     *\n     * @param packet\n     * @private\n     */\n    onpacket(packet) {\n        const sameNamespace = packet.nsp === this.nsp;\n        if (!sameNamespace)\n            return;\n        switch (packet.type) {\n            case PacketType.CONNECT:\n                if (packet.data && packet.data.sid) {\n                    const id = packet.data.sid;\n                    this.onconnect(id);\n                }\n                else {\n                    this.emitReserved(\"connect_error\", new Error(\"It seems you are trying to reach a Socket.IO server in v2.x with a v3.x client, but they are not compatible (more information here: https://socket.io/docs/v3/migrating-from-2-x-to-3-0/)\"));\n                }\n                break;\n            case PacketType.EVENT:\n            case PacketType.BINARY_EVENT:\n                this.onevent(packet);\n                break;\n            case PacketType.ACK:\n            case PacketType.BINARY_ACK:\n                this.onack(packet);\n                break;\n            case PacketType.DISCONNECT:\n                this.ondisconnect();\n                break;\n            case PacketType.CONNECT_ERROR:\n                this.destroy();\n                const err = new Error(packet.data.message);\n                // @ts-ignore\n                err.data = packet.data.data;\n                this.emitReserved(\"connect_error\", err);\n                break;\n        }\n    }\n    /**\n     * Called upon a server event.\n     *\n     * @param packet\n     * @private\n     */\n    onevent(packet) {\n        const args = packet.data || [];\n        if (null != packet.id) {\n            args.push(this.ack(packet.id));\n        }\n        if (this.connected) {\n            this.emitEvent(args);\n        }\n        else {\n            this.receiveBuffer.push(Object.freeze(args));\n        }\n    }\n    emitEvent(args) {\n        if (this._anyListeners && this._anyListeners.length) {\n            const listeners = this._anyListeners.slice();\n            for (const listener of listeners) {\n                listener.apply(this, args);\n            }\n        }\n        super.emit.apply(this, args);\n    }\n    /**\n     * Produces an ack callback to emit with an event.\n     *\n     * @private\n     */\n    ack(id) {\n        const self = this;\n        let sent = false;\n        return function (...args) {\n            // prevent double callbacks\n            if (sent)\n                return;\n            sent = true;\n            self.packet({\n                type: PacketType.ACK,\n                id: id,\n                data: args,\n            });\n        };\n    }\n    /**\n     * Called upon a server acknowlegement.\n     *\n     * @param packet\n     * @private\n     */\n    onack(packet) {\n        const ack = this.acks[packet.id];\n        if (\"function\" === typeof ack) {\n            ack.apply(this, packet.data);\n            delete this.acks[packet.id];\n        }\n        else {\n        }\n    }\n    /**\n     * Called upon server connect.\n     *\n     * @private\n     */\n    onconnect(id) {\n        this.id = id;\n        this.connected = true;\n        this.emitBuffered();\n        this.emitReserved(\"connect\");\n    }\n    /**\n     * Emit buffered events (received and emitted).\n     *\n     * @private\n     */\n    emitBuffered() {\n        this.receiveBuffer.forEach((args) => this.emitEvent(args));\n        this.receiveBuffer = [];\n        this.sendBuffer.forEach((packet) => {\n            this.notifyOutgoingListeners(packet);\n            this.packet(packet);\n        });\n        this.sendBuffer = [];\n    }\n    /**\n     * Called upon server disconnect.\n     *\n     * @private\n     */\n    ondisconnect() {\n        this.destroy();\n        this.onclose(\"io server disconnect\");\n    }\n    /**\n     * Called upon forced client/server side disconnections,\n     * this method ensures the manager stops tracking us and\n     * that reconnections don't get triggered for this.\n     *\n     * @private\n     */\n    destroy() {\n        if (this.subs) {\n            // clean subscriptions to avoid reconnections\n            this.subs.forEach((subDestroy) => subDestroy());\n            this.subs = undefined;\n        }\n        this.io[\"_destroy\"](this);\n    }\n    /**\n     * Disconnects the socket manually. In that case, the socket will not try to reconnect.\n     *\n     * If this is the last active Socket instance of the {@link Manager}, the low-level connection will be closed.\n     *\n     * @example\n     * const socket = io();\n     *\n     * socket.on(\"disconnect\", (reason) => {\n     *   // console.log(reason); prints \"io client disconnect\"\n     * });\n     *\n     * socket.disconnect();\n     *\n     * @return self\n     */\n    disconnect() {\n        if (this.connected) {\n            this.packet({ type: PacketType.DISCONNECT });\n        }\n        // remove socket from pool\n        this.destroy();\n        if (this.connected) {\n            // fire events\n            this.onclose(\"io client disconnect\");\n        }\n        return this;\n    }\n    /**\n     * Alias for {@link disconnect()}.\n     *\n     * @return self\n     */\n    close() {\n        return this.disconnect();\n    }\n    /**\n     * Sets the compress flag.\n     *\n     * @example\n     * socket.compress(false).emit(\"hello\");\n     *\n     * @param compress - if `true`, compresses the sending data\n     * @return self\n     */\n    compress(compress) {\n        this.flags.compress = compress;\n        return this;\n    }\n    /**\n     * Sets a modifier for a subsequent event emission that the event message will be dropped when this socket is not\n     * ready to send messages.\n     *\n     * @example\n     * socket.volatile.emit(\"hello\"); // the server may or may not receive it\n     *\n     * @returns self\n     */\n    get volatile() {\n        this.flags.volatile = true;\n        return this;\n    }\n    /**\n     * Sets a modifier for a subsequent event emission that the callback will be called with an error when the\n     * given number of milliseconds have elapsed without an acknowledgement from the server:\n     *\n     * @example\n     * socket.timeout(5000).emit(\"my-event\", (err) => {\n     *   if (err) {\n     *     // the server did not acknowledge the event in the given delay\n     *   }\n     * });\n     *\n     * @returns self\n     */\n    timeout(timeout) {\n        this.flags.timeout = timeout;\n        return this;\n    }\n    /**\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\n     * callback.\n     *\n     * @example\n     * socket.onAny((event, ...args) => {\n     *   console.log(`got ${event}`);\n     * });\n     *\n     * @param listener\n     */\n    onAny(listener) {\n        this._anyListeners = this._anyListeners || [];\n        this._anyListeners.push(listener);\n        return this;\n    }\n    /**\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\n     * callback. The listener is added to the beginning of the listeners array.\n     *\n     * @example\n     * socket.prependAny((event, ...args) => {\n     *   console.log(`got event ${event}`);\n     * });\n     *\n     * @param listener\n     */\n    prependAny(listener) {\n        this._anyListeners = this._anyListeners || [];\n        this._anyListeners.unshift(listener);\n        return this;\n    }\n    /**\n     * Removes the listener that will be fired when any event is emitted.\n     *\n     * @example\n     * const catchAllListener = (event, ...args) => {\n     *   console.log(`got event ${event}`);\n     * }\n     *\n     * socket.onAny(catchAllListener);\n     *\n     * // remove a specific listener\n     * socket.offAny(catchAllListener);\n     *\n     * // or remove all listeners\n     * socket.offAny();\n     *\n     * @param listener\n     */\n    offAny(listener) {\n        if (!this._anyListeners) {\n            return this;\n        }\n        if (listener) {\n            const listeners = this._anyListeners;\n            for (let i = 0; i < listeners.length; i++) {\n                if (listener === listeners[i]) {\n                    listeners.splice(i, 1);\n                    return this;\n                }\n            }\n        }\n        else {\n            this._anyListeners = [];\n        }\n        return this;\n    }\n    /**\n     * Returns an array of listeners that are listening for any event that is specified. This array can be manipulated,\n     * e.g. to remove listeners.\n     */\n    listenersAny() {\n        return this._anyListeners || [];\n    }\n    /**\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\n     * callback.\n     *\n     * Note: acknowledgements sent to the server are not included.\n     *\n     * @example\n     * socket.onAnyOutgoing((event, ...args) => {\n     *   console.log(`sent event ${event}`);\n     * });\n     *\n     * @param listener\n     */\n    onAnyOutgoing(listener) {\n        this._anyOutgoingListeners = this._anyOutgoingListeners || [];\n        this._anyOutgoingListeners.push(listener);\n        return this;\n    }\n    /**\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\n     * callback. The listener is added to the beginning of the listeners array.\n     *\n     * Note: acknowledgements sent to the server are not included.\n     *\n     * @example\n     * socket.prependAnyOutgoing((event, ...args) => {\n     *   console.log(`sent event ${event}`);\n     * });\n     *\n     * @param listener\n     */\n    prependAnyOutgoing(listener) {\n        this._anyOutgoingListeners = this._anyOutgoingListeners || [];\n        this._anyOutgoingListeners.unshift(listener);\n        return this;\n    }\n    /**\n     * Removes the listener that will be fired when any event is emitted.\n     *\n     * @example\n     * const catchAllListener = (event, ...args) => {\n     *   console.log(`sent event ${event}`);\n     * }\n     *\n     * socket.onAnyOutgoing(catchAllListener);\n     *\n     * // remove a specific listener\n     * socket.offAnyOutgoing(catchAllListener);\n     *\n     * // or remove all listeners\n     * socket.offAnyOutgoing();\n     *\n     * @param [listener] - the catch-all listener (optional)\n     */\n    offAnyOutgoing(listener) {\n        if (!this._anyOutgoingListeners) {\n            return this;\n        }\n        if (listener) {\n            const listeners = this._anyOutgoingListeners;\n            for (let i = 0; i < listeners.length; i++) {\n                if (listener === listeners[i]) {\n                    listeners.splice(i, 1);\n                    return this;\n                }\n            }\n        }\n        else {\n            this._anyOutgoingListeners = [];\n        }\n        return this;\n    }\n    /**\n     * Returns an array of listeners that are listening for any event that is specified. This array can be manipulated,\n     * e.g. to remove listeners.\n     */\n    listenersAnyOutgoing() {\n        return this._anyOutgoingListeners || [];\n    }\n    /**\n     * Notify the listeners for each packet sent\n     *\n     * @param packet\n     *\n     * @private\n     */\n    notifyOutgoingListeners(packet) {\n        if (this._anyOutgoingListeners && this._anyOutgoingListeners.length) {\n            const listeners = this._anyOutgoingListeners.slice();\n            for (const listener of listeners) {\n                listener.apply(this, packet.data);\n            }\n        }\n    }\n}\n","import { parse } from \"engine.io-client\";\n/**\n * URL parser.\n *\n * @param uri - url\n * @param path - the request path of the connection\n * @param loc - An object meant to mimic window.location.\n *        Defaults to window.location.\n * @public\n */\nexport function url(uri, path = \"\", loc) {\n    let obj = uri;\n    // default to window.location\n    loc = loc || (typeof location !== \"undefined\" && location);\n    if (null == uri)\n        uri = loc.protocol + \"//\" + loc.host;\n    // relative path support\n    if (typeof uri === \"string\") {\n        if (\"/\" === uri.charAt(0)) {\n            if (\"/\" === uri.charAt(1)) {\n                uri = loc.protocol + uri;\n            }\n            else {\n                uri = loc.host + uri;\n            }\n        }\n        if (!/^(https?|wss?):\\/\\//.test(uri)) {\n            if (\"undefined\" !== typeof loc) {\n                uri = loc.protocol + \"//\" + uri;\n            }\n            else {\n                uri = \"https://\" + uri;\n            }\n        }\n        // parse\n        obj = parse(uri);\n    }\n    // make sure we treat `localhost:80` and `localhost` equally\n    if (!obj.port) {\n        if (/^(http|ws)$/.test(obj.protocol)) {\n            obj.port = \"80\";\n        }\n        else if (/^(http|ws)s$/.test(obj.protocol)) {\n            obj.port = \"443\";\n        }\n    }\n    obj.path = obj.path || \"/\";\n    const ipv6 = obj.host.indexOf(\":\") !== -1;\n    const host = ipv6 ? \"[\" + obj.host + \"]\" : obj.host;\n    // define unique id\n    obj.id = obj.protocol + \"://\" + host + \":\" + obj.port + path;\n    // define href\n    obj.href =\n        obj.protocol +\n            \"://\" +\n            host +\n            (loc && loc.port === obj.port ? \"\" : \":\" + obj.port);\n    return obj;\n}\n","import { isBinary } from \"./is-binary.js\";\n/**\n * Replaces every Buffer | ArrayBuffer | Blob | File in packet with a numbered placeholder.\n *\n * @param {Object} packet - socket.io event packet\n * @return {Object} with deconstructed packet and list of buffers\n * @public\n */\nexport function deconstructPacket(packet) {\n    const buffers = [];\n    const packetData = packet.data;\n    const pack = packet;\n    pack.data = _deconstructPacket(packetData, buffers);\n    pack.attachments = buffers.length; // number of binary 'attachments'\n    return { packet: pack, buffers: buffers };\n}\nfunction _deconstructPacket(data, buffers) {\n    if (!data)\n        return data;\n    if (isBinary(data)) {\n        const placeholder = { _placeholder: true, num: buffers.length };\n        buffers.push(data);\n        return placeholder;\n    }\n    else if (Array.isArray(data)) {\n        const newData = new Array(data.length);\n        for (let i = 0; i < data.length; i++) {\n            newData[i] = _deconstructPacket(data[i], buffers);\n        }\n        return newData;\n    }\n    else if (typeof data === \"object\" && !(data instanceof Date)) {\n        const newData = {};\n        for (const key in data) {\n            if (Object.prototype.hasOwnProperty.call(data, key)) {\n                newData[key] = _deconstructPacket(data[key], buffers);\n            }\n        }\n        return newData;\n    }\n    return data;\n}\n/**\n * Reconstructs a binary packet from its placeholder packet and buffers\n *\n * @param {Object} packet - event packet with placeholders\n * @param {Array} buffers - binary buffers to put in placeholder positions\n * @return {Object} reconstructed packet\n * @public\n */\nexport function reconstructPacket(packet, buffers) {\n    packet.data = _reconstructPacket(packet.data, buffers);\n    delete packet.attachments; // no longer useful\n    return packet;\n}\nfunction _reconstructPacket(data, buffers) {\n    if (!data)\n        return data;\n    if (data && data._placeholder === true) {\n        const isIndexValid = typeof data.num === \"number\" &&\n            data.num >= 0 &&\n            data.num < buffers.length;\n        if (isIndexValid) {\n            return buffers[data.num]; // appropriate buffer (should be natural order anyway)\n        }\n        else {\n            throw new Error(\"illegal attachments\");\n        }\n    }\n    else if (Array.isArray(data)) {\n        for (let i = 0; i < data.length; i++) {\n            data[i] = _reconstructPacket(data[i], buffers);\n        }\n    }\n    else if (typeof data === \"object\") {\n        for (const key in data) {\n            if (Object.prototype.hasOwnProperty.call(data, key)) {\n                data[key] = _reconstructPacket(data[key], buffers);\n            }\n        }\n    }\n    return data;\n}\n","import { Emitter } from \"@socket.io/component-emitter\";\nimport { deconstructPacket, reconstructPacket } from \"./binary.js\";\nimport { isBinary, hasBinary } from \"./is-binary.js\";\n/**\n * These strings must not be used as event names, as they have a special meaning.\n */\nconst RESERVED_EVENTS = [\n    \"connect\",\n    \"connect_error\",\n    \"disconnect\",\n    \"disconnecting\",\n    \"newListener\",\n    \"removeListener\", // used by the Node.js EventEmitter\n];\n/**\n * Protocol version.\n *\n * @public\n */\nexport const protocol = 5;\nexport var PacketType;\n(function (PacketType) {\n    PacketType[PacketType[\"CONNECT\"] = 0] = \"CONNECT\";\n    PacketType[PacketType[\"DISCONNECT\"] = 1] = \"DISCONNECT\";\n    PacketType[PacketType[\"EVENT\"] = 2] = \"EVENT\";\n    PacketType[PacketType[\"ACK\"] = 3] = \"ACK\";\n    PacketType[PacketType[\"CONNECT_ERROR\"] = 4] = \"CONNECT_ERROR\";\n    PacketType[PacketType[\"BINARY_EVENT\"] = 5] = \"BINARY_EVENT\";\n    PacketType[PacketType[\"BINARY_ACK\"] = 6] = \"BINARY_ACK\";\n})(PacketType || (PacketType = {}));\n/**\n * A socket.io Encoder instance\n */\nexport class Encoder {\n    /**\n     * Encoder constructor\n     *\n     * @param {function} replacer - custom replacer to pass down to JSON.parse\n     */\n    constructor(replacer) {\n        this.replacer = replacer;\n    }\n    /**\n     * Encode a packet as a single string if non-binary, or as a\n     * buffer sequence, depending on packet type.\n     *\n     * @param {Object} obj - packet object\n     */\n    encode(obj) {\n        if (obj.type === PacketType.EVENT || obj.type === PacketType.ACK) {\n            if (hasBinary(obj)) {\n                return this.encodeAsBinary({\n                    type: obj.type === PacketType.EVENT\n                        ? PacketType.BINARY_EVENT\n                        : PacketType.BINARY_ACK,\n                    nsp: obj.nsp,\n                    data: obj.data,\n                    id: obj.id,\n                });\n            }\n        }\n        return [this.encodeAsString(obj)];\n    }\n    /**\n     * Encode packet as string.\n     */\n    encodeAsString(obj) {\n        // first is type\n        let str = \"\" + obj.type;\n        // attachments if we have them\n        if (obj.type === PacketType.BINARY_EVENT ||\n            obj.type === PacketType.BINARY_ACK) {\n            str += obj.attachments + \"-\";\n        }\n        // if we have a namespace other than `/`\n        // we append it followed by a comma `,`\n        if (obj.nsp && \"/\" !== obj.nsp) {\n            str += obj.nsp + \",\";\n        }\n        // immediately followed by the id\n        if (null != obj.id) {\n            str += obj.id;\n        }\n        // json data\n        if (null != obj.data) {\n            str += JSON.stringify(obj.data, this.replacer);\n        }\n        return str;\n    }\n    /**\n     * Encode packet as 'buffer sequence' by removing blobs, and\n     * deconstructing packet into object with placeholders and\n     * a list of buffers.\n     */\n    encodeAsBinary(obj) {\n        const deconstruction = deconstructPacket(obj);\n        const pack = this.encodeAsString(deconstruction.packet);\n        const buffers = deconstruction.buffers;\n        buffers.unshift(pack); // add packet info to beginning of data list\n        return buffers; // write all the buffers\n    }\n}\n// see https://stackoverflow.com/questions/8511281/check-if-a-value-is-an-object-in-javascript\nfunction isObject(value) {\n    return Object.prototype.toString.call(value) === \"[object Object]\";\n}\n/**\n * A socket.io Decoder instance\n *\n * @return {Object} decoder\n */\nexport class Decoder extends Emitter {\n    /**\n     * Decoder constructor\n     *\n     * @param {function} reviver - custom reviver to pass down to JSON.stringify\n     */\n    constructor(reviver) {\n        super();\n        this.reviver = reviver;\n    }\n    /**\n     * Decodes an encoded packet string into packet JSON.\n     *\n     * @param {String} obj - encoded packet\n     */\n    add(obj) {\n        let packet;\n        if (typeof obj === \"string\") {\n            if (this.reconstructor) {\n                throw new Error(\"got plaintext data when reconstructing a packet\");\n            }\n            packet = this.decodeString(obj);\n            const isBinaryEvent = packet.type === PacketType.BINARY_EVENT;\n            if (isBinaryEvent || packet.type === PacketType.BINARY_ACK) {\n                packet.type = isBinaryEvent ? PacketType.EVENT : PacketType.ACK;\n                // binary packet's json\n                this.reconstructor = new BinaryReconstructor(packet);\n                // no attachments, labeled binary but no binary data to follow\n                if (packet.attachments === 0) {\n                    super.emitReserved(\"decoded\", packet);\n                }\n            }\n            else {\n                // non-binary full packet\n                super.emitReserved(\"decoded\", packet);\n            }\n        }\n        else if (isBinary(obj) || obj.base64) {\n            // raw binary data\n            if (!this.reconstructor) {\n                throw new Error(\"got binary data when not reconstructing a packet\");\n            }\n            else {\n                packet = this.reconstructor.takeBinaryData(obj);\n                if (packet) {\n                    // received final buffer\n                    this.reconstructor = null;\n                    super.emitReserved(\"decoded\", packet);\n                }\n            }\n        }\n        else {\n            throw new Error(\"Unknown type: \" + obj);\n        }\n    }\n    /**\n     * Decode a packet String (JSON data)\n     *\n     * @param {String} str\n     * @return {Object} packet\n     */\n    decodeString(str) {\n        let i = 0;\n        // look up type\n        const p = {\n            type: Number(str.charAt(0)),\n        };\n        if (PacketType[p.type] === undefined) {\n            throw new Error(\"unknown packet type \" + p.type);\n        }\n        // look up attachments if type binary\n        if (p.type === PacketType.BINARY_EVENT ||\n            p.type === PacketType.BINARY_ACK) {\n            const start = i + 1;\n            while (str.charAt(++i) !== \"-\" && i != str.length) { }\n            const buf = str.substring(start, i);\n            if (buf != Number(buf) || str.charAt(i) !== \"-\") {\n                throw new Error(\"Illegal attachments\");\n            }\n            p.attachments = Number(buf);\n        }\n        // look up namespace (if any)\n        if (\"/\" === str.charAt(i + 1)) {\n            const start = i + 1;\n            while (++i) {\n                const c = str.charAt(i);\n                if (\",\" === c)\n                    break;\n                if (i === str.length)\n                    break;\n            }\n            p.nsp = str.substring(start, i);\n        }\n        else {\n            p.nsp = \"/\";\n        }\n        // look up id\n        const next = str.charAt(i + 1);\n        if (\"\" !== next && Number(next) == next) {\n            const start = i + 1;\n            while (++i) {\n                const c = str.charAt(i);\n                if (null == c || Number(c) != c) {\n                    --i;\n                    break;\n                }\n                if (i === str.length)\n                    break;\n            }\n            p.id = Number(str.substring(start, i + 1));\n        }\n        // look up json data\n        if (str.charAt(++i)) {\n            const payload = this.tryParse(str.substr(i));\n            if (Decoder.isPayloadValid(p.type, payload)) {\n                p.data = payload;\n            }\n            else {\n                throw new Error(\"invalid payload\");\n            }\n        }\n        return p;\n    }\n    tryParse(str) {\n        try {\n            return JSON.parse(str, this.reviver);\n        }\n        catch (e) {\n            return false;\n        }\n    }\n    static isPayloadValid(type, payload) {\n        switch (type) {\n            case PacketType.CONNECT:\n                return isObject(payload);\n            case PacketType.DISCONNECT:\n                return payload === undefined;\n            case PacketType.CONNECT_ERROR:\n                return typeof payload === \"string\" || isObject(payload);\n            case PacketType.EVENT:\n            case PacketType.BINARY_EVENT:\n                return (Array.isArray(payload) &&\n                    (typeof payload[0] === \"number\" ||\n                        (typeof payload[0] === \"string\" &&\n                            RESERVED_EVENTS.indexOf(payload[0]) === -1)));\n            case PacketType.ACK:\n            case PacketType.BINARY_ACK:\n                return Array.isArray(payload);\n        }\n    }\n    /**\n     * Deallocates a parser's resources\n     */\n    destroy() {\n        if (this.reconstructor) {\n            this.reconstructor.finishedReconstruction();\n            this.reconstructor = null;\n        }\n    }\n}\n/**\n * A manager of a binary event's 'buffer sequence'. Should\n * be constructed whenever a packet of type BINARY_EVENT is\n * decoded.\n *\n * @param {Object} packet\n * @return {BinaryReconstructor} initialized reconstructor\n */\nclass BinaryReconstructor {\n    constructor(packet) {\n        this.packet = packet;\n        this.buffers = [];\n        this.reconPack = packet;\n    }\n    /**\n     * Method to be called when binary data received from connection\n     * after a BINARY_EVENT packet.\n     *\n     * @param {Buffer | ArrayBuffer} binData - the raw binary data received\n     * @return {null | Object} returns null if more binary data is expected or\n     *   a reconstructed packet object if all buffers have been received.\n     */\n    takeBinaryData(binData) {\n        this.buffers.push(binData);\n        if (this.buffers.length === this.reconPack.attachments) {\n            // done with buffer list\n            const packet = reconstructPacket(this.reconPack, this.buffers);\n            this.finishedReconstruction();\n            return packet;\n        }\n        return null;\n    }\n    /**\n     * Cleans up binary packet reconstruction variables.\n     */\n    finishedReconstruction() {\n        this.reconPack = null;\n        this.buffers = [];\n    }\n}\n","const withNativeArrayBuffer = typeof ArrayBuffer === \"function\";\nconst isView = (obj) => {\n    return typeof ArrayBuffer.isView === \"function\"\n        ? ArrayBuffer.isView(obj)\n        : obj.buffer instanceof ArrayBuffer;\n};\nconst toString = Object.prototype.toString;\nconst withNativeBlob = typeof Blob === \"function\" ||\n    (typeof Blob !== \"undefined\" &&\n        toString.call(Blob) === \"[object BlobConstructor]\");\nconst withNativeFile = typeof File === \"function\" ||\n    (typeof File !== \"undefined\" &&\n        toString.call(File) === \"[object FileConstructor]\");\n/**\n * Returns true if obj is a Buffer, an ArrayBuffer, a Blob or a File.\n *\n * @private\n */\nexport function isBinary(obj) {\n    return ((withNativeArrayBuffer && (obj instanceof ArrayBuffer || isView(obj))) ||\n        (withNativeBlob && obj instanceof Blob) ||\n        (withNativeFile && obj instanceof File));\n}\nexport function hasBinary(obj, toJSON) {\n    if (!obj || typeof obj !== \"object\") {\n        return false;\n    }\n    if (Array.isArray(obj)) {\n        for (let i = 0, l = obj.length; i < l; i++) {\n            if (hasBinary(obj[i])) {\n                return true;\n            }\n        }\n        return false;\n    }\n    if (isBinary(obj)) {\n        return true;\n    }\n    if (obj.toJSON &&\n        typeof obj.toJSON === \"function\" &&\n        arguments.length === 1) {\n        return hasBinary(obj.toJSON(), true);\n    }\n    for (const key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key) && hasBinary(obj[key])) {\n            return true;\n        }\n    }\n    return false;\n}\n","export class AnimationEventImageObj {\r\n    #eventName;\r\n    #animationSpriteIndexes;\r\n    #currentSprite;\r\n    #isActive;\r\n    \r\n    constructor(eventName, animationSpriteIndexes, currentSprite, isActive = false) {\r\n        this.#eventName = eventName;\r\n        this.#animationSpriteIndexes = animationSpriteIndexes;\r\n        this.#currentSprite = currentSprite ? currentSprite : animationSpriteIndexes[0];\r\n        this.#isActive = isActive;\r\n    }\r\n\r\n    get isActive() {\r\n        return this.#isActive;\r\n    }\r\n\r\n    set isActive(value) {\r\n        this.#isActive = value;\r\n    }\r\n\r\n    get currentSprite() {\r\n        return this.#currentSprite;\r\n    }\r\n\r\n    get isLastSprite() {\r\n        return this.#animationSpriteIndexes[(this.#animationSpriteIndexes.length - 1)] === this.#currentSprite;\r\n    }\r\n\r\n    iterateSprite() {\r\n        if (!this.isLastSprite) {\r\n            this.#currentSprite = this.#currentSprite + 1;\r\n        } else {\r\n            this.#currentSprite = this.#animationSpriteIndexes[0];\r\n            this.#isActive = false;\r\n        }\r\n    }\r\n\r\n    set currentSprite(value) {\r\n        this.#currentSprite = value;\r\n    }\r\n\r\n    activateAnimation = () => {\r\n        this.isActive = true;\r\n    };\r\n}","import { RenderLayer } from \"./RenderLayer.js\";\r\nimport { DrawShapeObject } from \"./DrawShapeObject.js\";\r\nimport { Exception, Warning } from \"./Exception.js\";\r\nimport { ERROR_CODES, WARNING_CODES } from \"../constants.js\";\r\nimport { WebGlInterface } from \"./WebGlInterface.js\";\r\nimport { SystemSettings } from \"../configs.js\";\r\nimport { ScreenPageData } from \"./ScreenPageData.js\";\r\nimport AssetsManager from \"assetsm\";\r\n//import { calculateBufferData } from \"../wa/release.js\";\r\nimport { CONST } from \"../constants.js\";\r\n\r\nconst INDEX_TOP_LINE = 0,\r\n    INDEX_RIGHT_LINE = 1,\r\n    INDEX_BOTTOM_LINE = 2,\r\n    INDEX_LEFT_LINE = 3;\r\n\r\nconst INDEX_X1 = 0,\r\n    INDEX_Y1 = 1,\r\n    INDEX_X2 = 2,\r\n    INDEX_Y2 = 3;\r\n\r\n/**\r\n * Canvas view represents each canvas on the page<br> \r\n * Should be created via ScreenPage.createCanvasView(),<br>\r\n * Contains draw logic and holds DrawObjects and Tile\r\n * Can retrieved by ScreenPage.getView()\r\n * @see {@link ScreenPage} a part of ScreenPage\r\n * @hideconstructor\r\n */\r\nexport class CanvasView {\r\n    /**\r\n     * @type {HTMLCanvasElement}\r\n     */\r\n    #canvas;\r\n    /**\r\n     * @type {boolean}\r\n     */\r\n    #isCleared;\r\n    /**\r\n     * @type {boolean}\r\n     */\r\n    #isOffsetTurnedOff\r\n    /**\r\n     * @type {boolean}\r\n     */\r\n    #isWorldBoundariesEnabled;\r\n\r\n    #drawContext;\r\n    #webGlInterface;\r\n\r\n    /**\r\n     * @type {SystemSettings}\r\n     */\r\n    #systemSettings;\r\n    /**\r\n     * @type {ScreenPageData}\r\n     */\r\n    #screenPageData;\r\n    /**\r\n     * @type {AssetsManager}\r\n     */\r\n    #loader;\r\n\r\n    /**\r\n     * @type {Array<DrawShapeObject>}\r\n     */\r\n    #renderObjects;\r\n    /**\r\n     * @type {Array<RenderLayer>}\r\n     */\r\n    #renderLayers;\r\n    \r\n    /**\r\n     * @type {Array<Promise>}\r\n     */\r\n    #bindTileMapPromises;\r\n    /**\r\n     * @type {Array<Promise>}\r\n     */\r\n    #bindRenderObjectPromises;\r\n\r\n    constructor(name, systemSettings, screenPageData, loader, isOffsetTurnedOff) {\r\n        this.#canvas = document.createElement(\"canvas\");\r\n        this.#canvas.id = name;\r\n        this.#canvas.style.position = \"absolute\";\r\n        this.#isCleared = false;\r\n        this.#isOffsetTurnedOff = isOffsetTurnedOff;\r\n\r\n        this.#screenPageData = screenPageData;\r\n        this.#systemSettings = systemSettings;\r\n        this.#loader = loader;\r\n        this.#renderObjects = [];\r\n        this.#renderLayers = [];\r\n\r\n        this.#bindTileMapPromises = [];\r\n        this.#bindRenderObjectPromises = [];\r\n        this.bindRenderLayerMethod = this.systemSettings.gameOptions.optimization === CONST.OPTIMIZATION.WEB_ASSEMBLY.ASSEMBLY_SCRIPT ? this._bindRenderLayerWM : this._bindRenderLayer;\r\n    }\r\n\r\n    get screenPageData() {\r\n        return this.#screenPageData;\r\n    }\r\n\r\n    get systemSettings() {\r\n        return this.#systemSettings;\r\n    }\r\n\r\n    get loader() {\r\n        return this.#loader;\r\n    }\r\n\r\n    /**\r\n     * a getter to retrieve all attached renderObjects\r\n     */\r\n    get renderObjects() {\r\n        return this.#renderObjects;\r\n    }\r\n\r\n    get canvas() {\r\n        return this.#canvas;\r\n    }\r\n\r\n    /**\r\n     * Retrieve specific objects instances\r\n     * @param {DrawShapeObject} instance - drawObjectInstance to retrieve \r\n     * @returns {Array<DrawShapeObject>}\r\n     */\r\n    getObjectsByInstance(instance) {\r\n        return this.#renderObjects.filter((object) => object instanceof instance);\r\n    }\r\n\r\n    get _renderLayers() {\r\n        return this.#renderLayers;\r\n    }\r\n\r\n    set _renderObject(object) {\r\n        this.#renderObjects.push(object);\r\n    } \r\n\r\n    set _renderObjects(objects) {\r\n        this.#renderObjects = objects;\r\n    } \r\n\r\n    set _renderLayers(layer) {\r\n        this.#renderLayers.push(layer);\r\n    }\r\n\r\n    set _isCleared(value) {\r\n        this.#isCleared = value;\r\n    }\r\n\r\n    get _isCleared() {\r\n        return this.#isCleared;\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     */\r\n    _enableMapBoundaries() {\r\n        this.#isWorldBoundariesEnabled = true;\r\n    }\r\n\r\n    _initiateWebGlContext(debug = false) {\r\n        const webgl = this.#canvas.getContext(\"webgl\");\r\n        if (webgl) {\r\n            this.#drawContext = webgl;\r\n            this.#webGlInterface = new WebGlInterface(this.#drawContext, debug);\r\n            \r\n            return Promise.all([this.#webGlInterface._initiateImagesDrawProgram(),\r\n                this.#webGlInterface._initPrimitivesDrawProgram()]);\r\n        } else {\r\n            Exception(ERROR_CODES.WEBGL_ERROR, \"webgl is not supported in this browser\");\r\n        } \r\n    }\r\n\r\n    _clearWebGlContext() {\r\n        this.#webGlInterface._clearView();\r\n        this.#isCleared = true;\r\n    }\r\n\r\n    _executeTileImagesDraw() {\r\n        return this.#webGlInterface._executeTileImagesDraw();\r\n    }\r\n\r\n    _setCanvasSize(width, height) {\r\n        this.canvas.width = width;\r\n        this.canvas.height = height;\r\n        if (this.#webGlInterface) {\r\n            this.#webGlInterface._fixCanvasSize(width, height);\r\n        }\r\n    }\r\n\r\n    _sortRenderObjectsByZIndex() {\r\n        this.#renderObjects = this.#renderObjects.sort((obj1, obj2) => obj2.zIndex - obj1.zIndex);\r\n    }\r\n\r\n    _prepareBindRenderLayerPromises() {\r\n        for (const layer of this.#renderLayers) {\r\n            this.#bindTileMapPromises.push(this.bindRenderLayerMethod(layer).catch((err) => {\r\n                Exception(ERROR_CODES.UNHANDLED_PREPARE_EXCEPTION, err);\r\n            }));\r\n        }\r\n    }\r\n\r\n    _executeBindRenderLayerPromises() {\r\n        return Promise.allSettled(this.#bindTileMapPromises).then((bindResults) => {\r\n            this.#clearTileMapPromises();\r\n            return Promise.resolve(bindResults);\r\n        });\r\n    }\r\n\r\n    _bindRenderLayerWM(renderLayer) {\r\n        return new Promise((resolve, reject) => {\r\n            const tilemap = this.loader.getTileMap(renderLayer.tileMapKey),\r\n                tilesets = tilemap.tilesets,\r\n                tilesetImages = tilesets.map((tileset) => this.#getImage(tileset.data.name)),\r\n                layerData = tilemap.layers.find((layer) => layer.name === renderLayer.layerKey),\r\n                { tileheight:dtheight, tilewidth:dtwidth } = tilemap,\r\n                setBoundaries = false;//, //renderLayer.setBoundaries,\r\n                //[ worldW, worldH ] = this.screenPageData.worldDimensions,\r\n                //[ canvasW, canvasH ] = this.screenPageData.drawDimensions,\r\n                //[ xOffset, yOffset ] = this.screenPageData.worldOffset;\r\n                \r\n            if (!layerData) {\r\n                Warning(WARNING_CODES.NOT_FOUND, \"check tilemap and layers name\");\r\n                reject();\r\n            }\r\n            for (let i = 0; i <= tilesets.length - 1; i++) {\r\n                const tileset = tilesets[i].data,\r\n                    //tilesetImages = this.loader.getTilesetImageArray(tileset.name),\r\n                    tilewidth = tileset.tilewidth,\r\n                    tileheight = tileset.tileheight,\r\n                    //atlasRows = tileset.imageheight / tileheight,\r\n                    atlasColumns = tileset.imagewidth / tilewidth,\r\n                    layerCols = layerData.width,\r\n                    layerRows = layerData.height,\r\n                    //visibleCols = Math.ceil(canvasW / tilewidth),\r\n                    //visibleRows = Math.ceil(canvasH / tileheight),\r\n                    //offsetCols = layerCols - visibleCols,\r\n                    //offsetRows = layerRows - visibleRows,\r\n                    atlasImage = tilesetImages[i],\r\n                    atlasWidth = atlasImage.width,\r\n                    atlasHeight = atlasImage.height;\r\n                    \r\n                const [verticesBufferData, texturesBufferData] = calculateBufferData(layerRows, layerCols, layerData.data, dtwidth, dtheight, tilewidth, tileheight, atlasColumns, atlasWidth, atlasHeight, setBoundaries);\r\n                \r\n                this.#bindTileImages(verticesBufferData, texturesBufferData, atlasImage, tileset.name);\r\n                if (setBoundaries) {\r\n                    this.screenPageData._mergeBoundaries();\r\n                    renderLayer.setBoundaries = false;\r\n                }\r\n                resolve();\r\n            }\r\n        });\r\n    }\r\n\r\n    _bindRenderLayer(renderLayer) {\r\n        return new Promise((resolve, reject) => {\r\n            const tilemap = this.loader.getTileMap(renderLayer.tileMapKey),\r\n                tilesets = tilemap.tilesets,\r\n                tilesetImages = tilesets.map((tileset) => this.#getImage(tileset.data.name)),\r\n                layerData = tilemap.layers.find((layer) => layer.name === renderLayer.layerKey),\r\n                { tileheight:dtheight, tilewidth:dtwidth } = tilemap,\r\n                tilewidth = dtwidth,\r\n                tileheight = dtheight,\r\n                setBoundaries = renderLayer.setBoundaries,\r\n                [ settingsWorldWidth, settingsWorldHeight ] = this.screenPageData.worldDimensions,\r\n                //[ canvasW, canvasH ] = this.screenPageData.drawDimensions,\r\n                [ xOffset, yOffset ] = this.#isOffsetTurnedOff === true ? [0,0] : this.screenPageData.worldOffset;\r\n                \r\n            let boundariesRowsIndexes = new Map(),\r\n                boundaries = [];\r\n\r\n            if (!layerData) {\r\n                Warning(WARNING_CODES.NOT_FOUND, \"check tilemap and layers name\");\r\n                reject();\r\n            }\r\n            \r\n            for (let i = 0; i < tilesets.length; i++) {\r\n                const tileset = tilesets[i].data,\r\n                    firstgid = tilesets[i].firstgid,\r\n                    nextTileset = tilesets[i + 1],\r\n                    nextgid = nextTileset ? nextTileset.firstgid : null,\r\n                    tilesetwidth = tileset.tilewidth,\r\n                    tilesetheight = tileset.tileheight,\r\n                    atlasImage = tilesetImages[i],\r\n                    //atlasWidth = atlasImage.width,\r\n                    //atlasHeight = atlasImage.height,\r\n                    atlasWidth = tileset.imagewidth,\r\n                    atlasHeight = tileset.imageheight,\r\n                    //atlasRows = atlasHeight / tileheight,\r\n                    atlasColumns = Math.floor(atlasWidth / tilesetwidth),\r\n                    layerCols = layerData.width,\r\n                    layerRows = layerData.height,\r\n                    worldW = tilewidth * layerCols,\r\n                    worldH = tileheight * layerRows,\r\n                    moduloTop = yOffset % tileheight,\r\n                    moduleLeft = xOffset % tilewidth,\r\n                    skipRowsTop = yOffset !== 0 ? Math.floor(yOffset / tileheight) : 0,\r\n                    skipColsLeft = xOffset !== 0 ? Math.floor(xOffset / tilewidth) : 0,\r\n                    skipColsRight = Math.floor((worldW - (xOffset + worldW)) / tilewidth),\r\n                    endColLeft = Math.ceil((xOffset + worldW ) / tilewidth),\r\n                    endRowTop = Math.ceil((yOffset + worldH ) / tileheight),\r\n                    \r\n                    verticesBufferData = [],\r\n                    texturesBufferData = [];\r\n                if (setBoundaries) {\r\n                    if (worldW !== settingsWorldWidth || worldH !== settingsWorldHeight) {\r\n                        Warning(WARNING_CODES.UNEXPECTED_WORLD_SIZE, \" World size from tilemap is different than settings one, fixing...\");\r\n                        this.screenPageData._setWorldDimensions(worldW, worldH);\r\n                    }\r\n                    \r\n                    // boundaries cleanups every draw circle, we need to set world boundaries again\r\n                    if (this.#isWorldBoundariesEnabled) {\r\n                        this.screenPageData._setMapBoundaries();\r\n                    }\r\n                }\r\n\r\n                let mapIndex = skipRowsTop * layerCols;\r\n\r\n                const rowsEnd = endRowTop - skipRowsTop,\r\n                    colsEnd = endColLeft - skipColsLeft;\r\n\r\n                for (let row = 0; row < rowsEnd; row++) {\r\n                    mapIndex += skipColsLeft;\r\n                    let currentRowIndexes = new Map();\r\n\r\n                    for (let col = 0; col < colsEnd; col++) {\r\n                        let tile = layerData.data[mapIndex];\r\n                        //if (tile !== 0)\r\n                        if (tile >= firstgid && (nextgid === null || tile < nextgid)) {\r\n                            const mapPosX = col * dtwidth - moduleLeft,\r\n                                mapPosY = row * dtheight - moduloTop;\r\n\r\n                            tile -= firstgid;\r\n                            const atlasPosX = tile % atlasColumns * tilesetwidth,\r\n                                atlasPosY = Math.floor(tile / atlasColumns) * tilesetheight,\r\n                                vecX1 = mapPosX,\r\n                                vecY1 = mapPosY,\r\n                                vecX2 = mapPosX + tilesetwidth,\r\n                                vecY2 = mapPosY + tilesetheight,\r\n                                texX1 = 1 / atlasWidth * atlasPosX,\r\n                                texY1 = 1 / atlasHeight * atlasPosY,\r\n                                texX2 = texX1 + (1 / atlasWidth * tilesetwidth),\r\n                                texY2 = texY1 + (1 / atlasHeight * tilesetheight);\r\n                            verticesBufferData.push(\r\n                                vecX1, vecY1,\r\n                                vecX2, vecY1,\r\n                                vecX1, vecY2,\r\n                                vecX1, vecY2,\r\n                                vecX2, vecY1,\r\n                                vecX2, vecY2);\r\n                            texturesBufferData.push(\r\n                                texX1, texY1,\r\n                                texX2, texY1,\r\n                                texX1, texY2,\r\n                                texX1, texY2,\r\n                                texX2, texY1,\r\n                                texX2, texY2\r\n                            );\r\n                            \r\n                            if (setBoundaries) {\r\n                                let rightLine = [ mapPosX + tilesetwidth, mapPosY, mapPosX + tilesetwidth, mapPosY + tilesetheight ],\r\n                                    bottomLine = [ mapPosX + tilesetwidth, mapPosY + tilesetheight, mapPosX, mapPosY + tilesetheight ],\r\n                                    topLine = [ mapPosX, mapPosY, mapPosX + tilesetwidth, mapPosY],\r\n                                    leftLine = [ mapPosX, mapPosY + tilesetheight, mapPosX, mapPosY ],\r\n                                    currentAddedCellIndexes = [null, null, null, null];\r\n                                \r\n                                const topRow = row !== 0 ? boundariesRowsIndexes.get(row - 1) : undefined;\r\n                                if (topRow ) {\r\n                                    const topCellIndexes = topRow.get(col);\r\n                                    if (topCellIndexes) {\r\n                                        //remove double lines from top\r\n                                        const bottomTopCellIndex = topCellIndexes[INDEX_BOTTOM_LINE],\r\n                                            bottomTopCell = boundaries[bottomTopCellIndex];\r\n                                        if (bottomTopCell) {\r\n                                            const bottomTopCellX1 = bottomTopCell[INDEX_X1],\r\n                                                bottomTopCellY1 = bottomTopCell[INDEX_Y1],\r\n                                                bottomTopCellX2 = bottomTopCell[INDEX_X2],\r\n                                                bottomTopCellY2 = bottomTopCell[INDEX_Y2],\r\n                                                topX1 = topLine[INDEX_X1],\r\n                                                topY1 = topLine[INDEX_Y1],\r\n                                                topX2 = topLine[INDEX_X2],\r\n                                                topY2 = topLine[INDEX_Y2];\r\n                                            \r\n                                            if (topX1 === bottomTopCellX2 && topY1 === bottomTopCellY2 &&\r\n                                                topX2 === bottomTopCellX1 && topY2 === bottomTopCellY1) {\r\n                                                boundaries[bottomTopCellIndex] = undefined;\r\n                                                topLine = undefined;\r\n                                            }\r\n                                        }\r\n\r\n                                        // merge line from top right\r\n                                        const rightTopCellIndex = topCellIndexes[INDEX_RIGHT_LINE],\r\n                                            rightTopCell = boundaries[rightTopCellIndex];\r\n                                        if (rightTopCell) {\r\n                                            const rightTopCellX1 = rightTopCell[INDEX_X1],\r\n                                                rightTopCellY1 = rightTopCell[INDEX_Y1],\r\n                                                rightTopCellX2 = rightTopCell[INDEX_X2],\r\n                                                rightX1 = rightLine[INDEX_X1],\r\n                                                rightX2 = rightLine[INDEX_X2];\r\n                                            if (rightTopCellX1 === rightX2 && rightTopCellX2 === rightX1) {\r\n                                                boundaries[rightTopCellIndex] = undefined;\r\n                                                rightLine[INDEX_X1] = rightTopCellX1;\r\n                                                rightLine[INDEX_Y1] = rightTopCellY1;\r\n                                            }\r\n                                        }\r\n                                        // merge line from top left\r\n                                        const leftTopCellIndex = topCellIndexes[INDEX_LEFT_LINE],\r\n                                            leftTopCell = boundaries[leftTopCellIndex];\r\n                                        if (leftTopCell) {\r\n                                            const leftTopCellX1 = leftTopCell[INDEX_X1],\r\n                                                leftTopCellX2 = leftTopCell[INDEX_X2],\r\n                                                leftTopCellY2 = leftTopCell[INDEX_Y2],\r\n                                                leftX1 = leftLine[INDEX_X1],\r\n                                                leftX2 = leftLine[INDEX_X2];\r\n                                            if (leftTopCellX1 === leftX2 && leftTopCellX2 === leftX1) {\r\n                                                boundaries[leftTopCellIndex] = undefined;\r\n                                                leftLine[INDEX_X2] = leftTopCellX2;\r\n                                                leftLine[INDEX_Y2] = leftTopCellY2;\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                }\r\n                                const leftCellIndexes = col !== 0 ? currentRowIndexes.get(col - 1) : undefined;\r\n                                if (leftCellIndexes) {\r\n\r\n                                    //remove double lines from left\r\n                                    const rightLeftCellIndex = leftCellIndexes[INDEX_RIGHT_LINE],\r\n                                        rightLeftCell = boundaries[rightLeftCellIndex],\r\n                                        rightLeftCellX1 = rightLeftCell[INDEX_X1],\r\n                                        rightLeftCellY1 = rightLeftCell[INDEX_Y1],\r\n                                        rightLeftCellX2 = rightLeftCell[INDEX_X2],\r\n                                        rightLeftCellY2 = rightLeftCell[INDEX_Y2],\r\n                                        leftX1 = leftLine[INDEX_X1],\r\n                                        leftY1 = leftLine[INDEX_Y1],\r\n                                        leftX2 = leftLine[INDEX_X2],\r\n                                        leftY2 = leftLine[INDEX_Y2];\r\n\r\n                                    if (leftX1 === rightLeftCellX2 && leftY1 === rightLeftCellY2 &&\r\n                                        leftX2 === rightLeftCellX1 && leftY2 === rightLeftCellY1) {\r\n                                        boundaries[rightLeftCellIndex] = undefined;\r\n                                        leftLine = undefined;\r\n                                    }\r\n\r\n                                    //merge long lines from left top\r\n                                    const topLeftCellIndex = leftCellIndexes[INDEX_TOP_LINE],\r\n                                        topLeftCell = boundaries[topLeftCellIndex];\r\n                                    if (topLeftCell && topLine) {\r\n                                        const topLeftCellX1 = topLeftCell[INDEX_X1],\r\n                                            topLeftCellY1 = topLeftCell[INDEX_Y1],\r\n                                            topLeftCellY2 = topLeftCell[INDEX_Y2],\r\n                                            topY1 = topLine[INDEX_Y1],\r\n                                            topY2 = topLine[INDEX_Y2];\r\n                                        if (topLeftCellY1 === topY2 && topLeftCellY2 === topY1 ) {\r\n                                            boundaries[topLeftCellIndex] = undefined;\r\n                                            topLine[INDEX_X1] = topLeftCellX1;\r\n                                            topLine[INDEX_Y1] = topLeftCellY1;\r\n                                        }\r\n                                    }\r\n\r\n                                    // merge long lines from left bottom\r\n                                    const bottomLeftCellIndex = leftCellIndexes[INDEX_BOTTOM_LINE],\r\n                                        bottomLeftCell = boundaries[bottomLeftCellIndex];\r\n                                    if (bottomLeftCell) {\r\n                                        const bottomLeftCellY1 = bottomLeftCell[INDEX_Y1],\r\n                                            bottomLeftCellX2 = bottomLeftCell[INDEX_X2],\r\n                                            bottomLeftCellY2 = bottomLeftCell[INDEX_Y2],\r\n                                            bottomY1 = bottomLine[INDEX_Y1],\r\n                                            bottomY2 = bottomLine[INDEX_Y2];\r\n                                        if (bottomLeftCellY1 === bottomY2 && bottomLeftCellY2 === bottomY1 ) {\r\n                                            boundaries[bottomLeftCellIndex] = undefined;\r\n                                            //opposite direction\r\n                                            bottomLine[INDEX_X2] = bottomLeftCellX2;\r\n                                            bottomLine[INDEX_Y2] = bottomLeftCellY2;\r\n                                        }\r\n                                    }\r\n\r\n                                }\r\n\r\n                                if (topLine) {\r\n                                    boundaries.push(topLine);\r\n                                    currentAddedCellIndexes[INDEX_TOP_LINE] = boundaries.length - 1;\r\n                                }\r\n                                boundaries.push(rightLine);\r\n                                currentAddedCellIndexes[INDEX_RIGHT_LINE] = boundaries.length - 1;\r\n                                boundaries.push(bottomLine);\r\n                                currentAddedCellIndexes[INDEX_BOTTOM_LINE] = boundaries.length - 1;\r\n                                if (leftLine) {\r\n                                    boundaries.push(leftLine);\r\n                                    currentAddedCellIndexes[INDEX_LEFT_LINE] = boundaries.length - 1;\r\n                                }\r\n                                //save values indexes cols info\r\n                                currentRowIndexes.set(col, currentAddedCellIndexes);\r\n                            }\r\n\r\n                        }\r\n                        mapIndex++;\r\n                    }\r\n                    if (currentRowIndexes.size > 0) {\r\n                        //save values indexes rows info\r\n                        boundariesRowsIndexes.set(row, currentRowIndexes);\r\n                    }\r\n                    mapIndex += skipColsRight;\r\n                }\r\n                if (verticesBufferData.length > 0 && texturesBufferData.length > 0) {\r\n                    this.#bindTileImages(verticesBufferData, texturesBufferData, atlasImage, tileset.name);\r\n                }\r\n            }\r\n            \r\n            if (setBoundaries) {\r\n                const filtered = boundaries.filter(array => array);\r\n                this.screenPageData._addBoundariesArray(filtered);\r\n            }\r\n            resolve();\r\n        });\r\n    }\r\n    \r\n    _prepareBindRenderObjectPromises() {\r\n        for (let i = 0; i < this.#renderObjects.length; i++) {\r\n            const object = this.#renderObjects[i];\r\n            if (object.isRemoved) {\r\n                this.#renderObjects.splice(i, 1);\r\n                i--;\r\n            }\r\n            if (object.isAnimations) {\r\n                object._processActiveAnimations();\r\n            }\r\n            const promise = this.#bindRenderObject(object).catch((err) => {\r\n                Warning(WARNING_CODES.UNHANDLED_DRAW_ISSUE, err);\r\n                return Promise.reject(err);\r\n            });\r\n            this.#bindRenderObjectPromises.push(promise);\r\n        }\r\n    }\r\n\r\n    _prepareBindBoundariesPromise() {\r\n        this.#bindRenderObjectPromises.push(this.#drawBoundariesWebGl().catch((err) => {\r\n            Exception(ERROR_CODES.UNHANDLED_PREPARE_EXCEPTION, err);\r\n        }));\r\n    }\r\n\r\n    _executeBindRenderObjectPromises () {\r\n        return Promise.allSettled(this.#bindRenderObjectPromises).then((bindResults) => {\r\n            this.#clearRenderObjectPromises();\r\n            return Promise.resolve(bindResults);\r\n        });\r\n    }\r\n\r\n    #getImage(key) {\r\n        return this.loader.getImage(key);\r\n    }\r\n\r\n    #bindTileImages(verticesBufferData, texturesBufferData,  atlasImage, image_name, drawMask, rotation, translation) {\r\n        this.#webGlInterface._bindTileImages(verticesBufferData, texturesBufferData, atlasImage, image_name, drawMask, rotation, translation);\r\n    }\r\n\r\n    #clearTileMapPromises() {\r\n        this.#bindTileMapPromises = [];\r\n    }\r\n\r\n    #bindRenderObject(renderObject) {\r\n        return new Promise((resolve) => {\r\n            const [ xOffset, yOffset ] = this.#isOffsetTurnedOff === true ? [0,0] : this.screenPageData.worldOffset,\r\n                x = renderObject.x - xOffset,\r\n                y = renderObject.y - yOffset;\r\n\r\n            if (renderObject.type === CONST.DRAW_TYPE.IMAGE) {\r\n                const atlasImage = this.#getImage(renderObject.key),\r\n                    animationIndex = renderObject.imageIndex;\r\n                let imageX = 0,\r\n                    imageY = 0;\r\n                if (animationIndex !== 0) {\r\n                    const imageColsNumber = atlasImage.width / renderObject.width;\r\n                    imageX = animationIndex % imageColsNumber * renderObject.width,\r\n                    imageY = Math.floor(animationIndex / imageColsNumber) * renderObject.height;\r\n                }\r\n                const posX = x - renderObject.width / 2,\r\n                    posY = y - renderObject.height / 2;\r\n                const vecX1 = posX,\r\n                    vecY1 = posY,\r\n                    vecX2 = vecX1 + renderObject.width,\r\n                    vecY2 = vecY1 + renderObject.height,\r\n                    texX1 = 1 / atlasImage.width * imageX,\r\n                    texY1 = 1 / atlasImage.height * imageY,\r\n                    texX2 = texX1 + (1 / atlasImage.width * renderObject.width),\r\n                    texY2 = texY1 + (1 / atlasImage.height * renderObject.height);\r\n                const verticesBufferData = [\r\n                        vecX1, vecY1,\r\n                        vecX2, vecY1,\r\n                        vecX1, vecY2,\r\n                        vecX1, vecY2,\r\n                        vecX2, vecY1,\r\n                        vecX2, vecY2\r\n                    ],\r\n                    texturesBufferData = [\r\n                        texX1, texY1,\r\n                        texX2, texY1,\r\n                        texX1, texY2,\r\n                        texX1, texY2,\r\n                        texX2, texY1,\r\n                        texX2, texY2\r\n                    ];\r\n                this.#webGlInterface._bindAndDrawTileImages(verticesBufferData, texturesBufferData, atlasImage, renderObject.key, renderObject.rotation, [x, y]);\r\n                //ctx.restore();\r\n            } else if (renderObject.type === CONST.DRAW_TYPE.TEXT) {\r\n                this.#webGlInterface._bindText(x, y, renderObject);\r\n            } else if (renderObject.type === CONST.DRAW_TYPE.CIRCLE) {\r\n                this.#webGlInterface._bindConus(renderObject, renderObject.rotation, [x, y]);\r\n            } else if (renderObject.type === CONST.DRAW_TYPE.LINE) {\r\n                this.#webGlInterface._drawLines(renderObject.vertices, renderObject.bgColor, this.systemSettings.gameOptions.boundariesWidth);\r\n            } else {\r\n                this.#webGlInterface._bindPrimitives(renderObject, renderObject.rotation, [x, y]);\r\n            }\r\n            if (renderObject.boundaries && this.systemSettings.gameOptions.boundaries.drawObjectBoundaries) {\r\n                const shiftX = x,// - renderObject.boundaries[0],\r\n                    shiftY = y,// - renderObject.boundaries[1],\r\n                rotation = renderObject.rotation ? renderObject.rotation : 0;\r\n                this.#webGlInterface._drawPolygon(renderObject.boundaries, this.systemSettings.gameOptions.boundaries.boundariesColor, this.systemSettings.gameOptions.boundaries.boundariesWidth, rotation, [shiftX, shiftY]);\r\n            }\r\n            return resolve();\r\n        });\r\n    }\r\n\r\n    #clearRenderObjectPromises() {\r\n        this.#bindRenderObjectPromises = [];\r\n    }\r\n\r\n    #drawBoundariesWebGl() {\r\n        return new Promise((resolve) => {\r\n            const b = this.screenPageData.getBoundaries(),\r\n                len = b.length,\r\n                linesArray = [];\r\n        \r\n            for (let i = 0; i < len; i++) {\r\n                const item = b[i];\r\n                linesArray.push(item[0], item[1]);\r\n                linesArray.push(item[2], item[3]);\r\n            }\r\n            this.#webGlInterface._drawLines(linesArray, this.systemSettings.gameOptions.boundaries.boundariesColor, this.systemSettings.gameOptions.boundaries.boundariesWidth);\r\n            resolve();\r\n        });\r\n    }\r\n}","import { CONST } from \"../constants.js\";\r\nimport { DrawShapeObject } from \"./DrawShapeObject.js\";\r\nimport { Vertex } from \"./Primitives.js\";\r\n\r\n/**\r\n * Conus object to draw\r\n * @augments DrawShapeObject\r\n * @ignore\r\n */\r\nexport class DrawConusObject extends DrawShapeObject {\r\n    /**\r\n     * @type {Number}\r\n     */\r\n    #radius;\r\n\r\n    /**\r\n     * @type {Array<Vertex>}\r\n     */\r\n    #vertices;\r\n\r\n    /**\r\n     * @hideconstructor\r\n     */\r\n    constructor(x, y, radius, bgColor, angle, subtractProgram) {\r\n        super(CONST.DRAW_TYPE.CIRCLE, x, y, bgColor, subtractProgram);\r\n        this.#radius = radius;\r\n        this.#vertices = this.#calculateConusVertices(radius, angle);\r\n    }\r\n\r\n    /**\r\n     * @type {Array<Vertex>}\r\n     */\r\n    get vertices () {\r\n        return this.#vertices;\r\n    }\r\n\r\n    set vertices(value) {\r\n        this.#vertices = value;\r\n    }\r\n\r\n    get radius() {\r\n        return this.#radius;\r\n    }\r\n\r\n    #calculateConusVertices(radius, angle = 2*Math.PI, step = Math.PI/12) {\r\n        let conusPolygonCoords = [0, 0];\r\n\r\n        for (let r = 0; r <= angle; r += step) {\r\n            let x2 = Math.cos(r) * radius,\r\n                y2 = Math.sin(r) * radius;\r\n\r\n            conusPolygonCoords.push(x2, y2);\r\n        }\r\n\r\n        return conusPolygonCoords;\r\n    }\r\n}","import { AnimationEventImageObj } from \"./AnimationEventImageObj.js\";\r\nimport { CONST } from \"../constants.js\";\r\nimport { DrawShapeObject } from \"./DrawShapeObject.js\";\r\n\r\n/**\r\n * Image object to draw\r\n * @augments DrawShapeObject\r\n * @ignore\r\n */\r\nexport class DrawImageObject extends DrawShapeObject {\r\n    /**\r\n     * @type {Number}\r\n     */\r\n    #w;\r\n    /**\r\n     * @type {Number}\r\n     */\r\n    #h;\r\n    /**\r\n     * Image sprite key\r\n     * @type {String}\r\n     */\r\n    #key;\r\n    /**\r\n     * @type {EventTarget}\r\n     */\r\n    #emitter;\r\n    /**\r\n     * @type {Map<String, AnimationEventImageObj>}\r\n     */\r\n    #animations;\r\n    /**\r\n     * @type {Number}\r\n     */\r\n    #imageIndex;\r\n    /**\r\n     * @type {Array<Vertex> | null}\r\n     */\r\n    #boundaries = null;\r\n\r\n    /**\r\n     * @hideconstructor\r\n     */\r\n    constructor(mapX, mapY, width, height, key, imageIndex = 0, boundaries) {\r\n        super(CONST.DRAW_TYPE.IMAGE, mapX, mapY);\r\n        this.#key = key;\r\n        this.#emitter = new EventTarget();\r\n        this.#animations = new Map();\r\n        this.#imageIndex = imageIndex;\r\n        this.#boundaries = boundaries;\r\n        this.#w = width;\r\n        this.#h = height;\r\n    }\r\n\r\n    /**\r\n     * @type {Number}\r\n     */\r\n    get width() {\r\n        return this.#w;\r\n    }\r\n\r\n    /**\r\n     * @type {Number}\r\n     */\r\n    get height() {\r\n        return this.#h;\r\n    }\r\n\r\n    set width(w) {\r\n        this.#w = w;\r\n    }\r\n\r\n    set height(h) {\r\n        this.#h = h;\r\n    }\r\n\r\n    /**\r\n     * A key should match an image loaded through AssetsManager\r\n     * @type {String}\r\n     */\r\n    get key() {\r\n        return this.#key;\r\n    }\r\n\r\n    /**\r\n     * Current image index\r\n     * @type {Number}\r\n     */\r\n    get imageIndex() {\r\n        return this.#imageIndex;\r\n    }\r\n\r\n    /**\r\n     * Determines if image is animated or not\r\n     * @type {Boolean}\r\n     */\r\n    get isAnimations() {\r\n        return this.#animations.size > 0;\r\n    }\r\n\r\n     /**\r\n     * @type {Array<Vertex>}\r\n     */\r\n    get boundaries() {\r\n        return this.#boundaries;\r\n    }\r\n\r\n    _processActiveAnimations() {\r\n        for (let animationEvent of this.#animations.values()) {\r\n            if (animationEvent.isActive) {\r\n                animationEvent.iterateSprite();\r\n                this.#imageIndex = animationEvent.currentSprite;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Emit event\r\n     * @param {String} eventName \r\n     * @param  {...any} eventParams \r\n     */\r\n    emit(eventName, ...eventParams) {\r\n        const event = new Event(eventName);\r\n        event.data = [...eventParams];\r\n        this.#emitter.dispatchEvent(event);\r\n    }\r\n\r\n    /**\r\n     * Subscribe\r\n     * @param {String} eventName \r\n     * @param {*} listener \r\n     * @param {*} options \r\n     */\r\n    addEventListener(eventName, listener, options) {\r\n        this.#emitter.addEventListener(eventName, listener, options);\r\n    }\r\n\r\n    /**\r\n     * Unsubscribe\r\n     * @param {String} eventName \r\n     * @param {*} listener \r\n     * @param {*} options \r\n     */\r\n    removeEventListener(eventName, listener, options) {\r\n        this.#emitter.removeEventListener(eventName, listener, options);\r\n    }\r\n\r\n    /**\r\n     * Adds image animations\r\n     * @param { String } eventName -animation name\r\n     * @param { Number[] } animationSpriteIndexes - animation image indexes\r\n     */\r\n    addAnimation (eventName, animationSpriteIndexes) {\r\n        const animationEvent = new AnimationEventImageObj(eventName, animationSpriteIndexes);\r\n        this.#animations.set(eventName, animationEvent);\r\n        this.addEventListener(eventName, animationEvent.activateAnimation);\r\n    }\r\n\r\n    /**\r\n     * Removes animations\r\n     */\r\n    removeAllAnimations() {\r\n        for (let [eventName, animationEvent] of this.#animations.entries()) {\r\n            this.removeEventListener(eventName, animationEvent.activateAnimation);\r\n        }\r\n        this.#animations.clear();\r\n        this.#animations - undefined;\r\n    }\r\n}","import { CONST } from \"../constants.js\";\r\nimport { DrawShapeObject } from \"./DrawShapeObject.js\";\r\nimport { Vertex } from \"./Primitives.js\";\r\n\r\n/**\r\n * Line object to draw\r\n * @augments DrawShapeObject\r\n * @ignore\r\n */\r\nexport class DrawLineObject extends DrawShapeObject {\r\n    /**\r\n     * @type {Array<Number>}\r\n     */\r\n    #vertices;\r\n\r\n    /**\r\n     * @hideconstructor\r\n     */\r\n    constructor(vertices, bgColor) {\r\n        super(CONST.DRAW_TYPE.LINE, vertices[0][0], vertices[0][1], bgColor);\r\n        this.#vertices = vertices;\r\n    }\r\n\r\n    /**\r\n     * @type {Array<Vertex>}\r\n     */\r\n    get vertices () {\r\n        return this.#vertices;\r\n    }\r\n\r\n    set vertices(value) {\r\n        this.#vertices = value;\r\n    }\r\n}","import { DrawRectObject } from \"./DrawRectObject.js\";\r\nimport { DrawTextObject } from \"./DrawTextObject.js\";\r\nimport { DrawConusObject } from \"./DrawConusObject.js\";\r\nimport { DrawImageObject } from \"./DrawImageObject.js\";\r\nimport { DrawLineObject } from \"./DrawLineObject.js\";\r\nimport { DrawPolygonObject } from \"./DrawPolygonObject.js\";\r\nimport { Vertex } from \"./Primitives.js\";\r\n\r\n/**\r\n * Creates drawObjects instances.<br>\r\n * accessible via ScreenPage.draw <br>\r\n * @see {@link ScreenPage} a part of ScreenPage\r\n */\r\nexport class DrawObjectFactory {\r\n\r\n    /**\r\n     * @param {Number} x \r\n     * @param {Number} y \r\n     * @param {Number} width \r\n     * @param {Number} height \r\n     * @param {String} backgroundColor - rgba(r,g,b,a)\r\n     * @param {String} subtractProgram\r\n     * @returns {DrawRectObject}\r\n     */\r\n    rect(x, y, width, height, backgroundColor, subtractProgram) {\r\n        return new DrawRectObject(x, y, width, height, backgroundColor, subtractProgram); \r\n    }\r\n\r\n    /**\r\n     * @param {Number} x \r\n     * @param {Number} y \r\n     * @param {String} text \r\n     * @param {String} font - size fontFamily\r\n     * @param {String} color - rgba(r,g,b,a)\r\n     * @returns {DrawTextObject}\r\n     */\r\n    text(x, y, text, font, color) {\r\n        return new DrawTextObject(x, y, text, font, color);\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param {Number} radius \r\n     * @param {String} bgColor - rgba(r,g,b,a)\r\n     * @param {Number=} angle\r\n     * @param {String=} subtractProgram \r\n     * @returns {DrawConusObject}\r\n     */\r\n    conus(x, y, radius, bgColor, angle, subtractProgram) {\r\n        return new DrawConusObject(x, y, radius, bgColor, angle, subtractProgram);\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param {Number} radius \r\n     * @param {String} bgColor - rgba(r,g,b,a)\r\n     * @param {String=} subtractProgram \r\n     * @returns {DrawConusObject}\r\n     */\r\n    circle(x, y, radius, bgColor, subtractProgram) {\r\n        return new DrawConusObject(x, y, radius, bgColor, 2*Math.PI, subtractProgram);\r\n    }\r\n\r\n    /**\r\n     * @param {Number} x \r\n     * @param {Number} y \r\n     * @param {Number} width \r\n     * @param {Number} height \r\n     * @param {String} key \r\n     * @param {Number} [imageIndex = 0]\r\n     * @param {Array<Vertex>=} boundaries \r\n     * @returns {DrawImageObject}\r\n     */\r\n    image(x, y, width, height, key, imageIndex = 0, boundaries) {\r\n        return new DrawImageObject(x, y, width, height, key, imageIndex, boundaries);\r\n    }\r\n\r\n    /**\r\n     * @param {Array<Vertex>} vertices \r\n     * @param {String} bgColor - rgba(r,g,b,a)\r\n     * @returns {DrawLineObject}\r\n     */\r\n    line(vertices, bgColor) {\r\n        return new DrawLineObject(vertices, bgColor);\r\n    }\r\n\r\n    /**\r\n     * @param {Array<Vertex>} vertices - should go in anticlockwise order\r\n     * @param {String} bgColor - rgba(r,g,b,a) \r\n     * @param {String=} subtractProgram \r\n     * @returns {DrawPolygonObject}\r\n     */\r\n    polygon(vertices, bgColor, subtractProgram) {\r\n        return new DrawPolygonObject(vertices, bgColor, subtractProgram);\r\n    }\r\n}","import { CONST } from \"../constants.js\";\r\nimport { DrawShapeObject } from \"./DrawShapeObject.js\";\r\nimport { Vertex } from \"./Primitives.js\";\r\n\r\n/**\r\n * @augments DrawShapeObject\r\n * @ignore\r\n */\r\nexport class DrawPolygonObject extends DrawShapeObject {\r\n    /**\r\n     * @type {Array<Vertex>}\r\n     */\r\n    #vertices;\r\n\r\n    /**\r\n     * @hideconstructor\r\n     */\r\n    constructor(vertices, bgColor, subtractProgram) {\r\n        super(CONST.DRAW_TYPE.POLYGON, vertices[0].x, vertices[0].y, bgColor, subtractProgram);\r\n        this.#vertices = vertices;\r\n    }\r\n\r\n    /**\r\n     * @type {Array<Vertex>}\r\n     */\r\n    get vertices () {\r\n        return this.#vertices;\r\n    }\r\n\r\n    set vertices(value) {\r\n        this.#vertices = value;\r\n    }\r\n}","import { CONST } from \"../constants.js\";\r\nimport { DrawShapeObject } from \"./DrawShapeObject.js\";\r\n\r\n/**\r\n * @augments DrawShapeObject\r\n * @ignore\r\n */\r\nexport class DrawRectObject extends DrawShapeObject {\r\n    /**\r\n     * @type {Number}\r\n     */\r\n    #w;\r\n    /**\r\n     * @type {Number}\r\n     */\r\n    #h;\r\n    /**\r\n     * @type {Array<Vertex>}\r\n     */\r\n    #vertices;\r\n\r\n    /**\r\n     * @hideconstructor\r\n     */\r\n    constructor(x, y, w, h, bgColor, subtractProgram) {\r\n        super(CONST.DRAW_TYPE.RECTANGLE, x, y, bgColor, subtractProgram);\r\n        this.#w = w;\r\n        this.#h = h;\r\n    }\r\n\r\n    /**\r\n     * @type {Array<Vertex>}\r\n     */\r\n    get vertices () {\r\n        return this.#vertices;\r\n    }\r\n    /**\r\n     * @type {Number}\r\n     */\r\n    get width() {\r\n        return this.#w;\r\n    }\r\n\r\n    /**\r\n     * @type {Number}\r\n     */\r\n    get height() {\r\n        return this.#h;\r\n    }\r\n\r\n    set width(w) {\r\n        this.#w = w;\r\n    }\r\n\r\n    set height(h) {\r\n        this.#h = h;\r\n    }\r\n}","import { CONST } from \"../constants.js\";\r\nimport { generateUniqId } from \"../utils.js\";\r\nimport { Vertex } from \"./Primitives.js\";\r\n\r\n/**\r\n * A base draw object\r\n * @ignore\r\n */\r\nexport class DrawShapeObject {\r\n    #x;\r\n    #y;\r\n    #bg;\r\n    /**\r\n     * @type {CONST.DRAW_TYPE}\r\n     */\r\n    #type;\r\n    #subtract;\r\n    /**\r\n     * Is used for blending pixel arithmetic\r\n     * https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/blendFunc\r\n     * @type {Array<WebGL_API.Types>}\r\n     */\r\n    #blendFunc;\r\n    \r\n    /**\r\n     * @type {Number}\r\n     */\r\n    #zIndex = 0;\r\n    /**\r\n     * @type {Number}\r\n     */\r\n    #rotation = 0;\r\n    /**\r\n     * @type {Number}\r\n     */\r\n    #id = generateUniqId();\r\n    /**\r\n     * @type {Boolean}\r\n     */\r\n    #isRemoved = false;\r\n\r\n    /**\r\n     * @hideconstructor\r\n     */\r\n    constructor(type, mapX, mapY, bgColor, subtractProgram) {\r\n        this.#x = mapX;\r\n        this.#y = mapY;\r\n        this.#bg = bgColor;\r\n        this.#type = type;\r\n        this.#subtract = subtractProgram;\r\n    }\r\n\r\n    /**\r\n     * background color as rgba(r,g,b,a)\r\n     * @type {String}\r\n     */\r\n    get bgColor() {\r\n        return this.#bg;\r\n    }\r\n\r\n    set bgColor(value) {\r\n        this.#bg = value;\r\n    }\r\n\r\n    /**\r\n     * @type {CONST.DRAW_TYPE}\r\n     */\r\n    get type() {\r\n        return this.#type;\r\n    }\r\n\r\n    /**\r\n     * @type {Number}\r\n     */\r\n    get x() {\r\n        return this.#x;\r\n    }\r\n\r\n    /**\r\n     * @type {Number}\r\n     */\r\n    get y () {\r\n        return this.#y;\r\n    }\r\n\r\n    set x(posX) {\r\n        this.#x = posX;\r\n    }\r\n\r\n    set y(posY) {\r\n        this.#y = posY;\r\n    }\r\n\r\n    /**\r\n     * @type {String}\r\n     */\r\n    get subtract() {\r\n        return this.#subtract;\r\n    }\r\n\r\n    /**\r\n     * @type {Number}\r\n     */\r\n    get zIndex () {\r\n        return this.#zIndex;\r\n    }\r\n\r\n    set zIndex(value) {\r\n        this.#zIndex = value;\r\n    }\r\n\r\n    get blendFunc () {\r\n        return this.#blendFunc;\r\n    }\r\n\r\n    set blendFunc(value) {\r\n        this.#blendFunc = value;\r\n    }\r\n\r\n    /**\r\n     * @type {Number}\r\n     */\r\n    get rotation() {\r\n        return this.#rotation;\r\n    }\r\n\r\n    set rotation(value) {\r\n        this.#rotation = value;\r\n    }\r\n\r\n    /**\r\n     * @type {Number}\r\n     */\r\n    get id() {\r\n        return this.#id;\r\n    }\r\n\r\n    /**\r\n     * @type {Boolean}\r\n     */\r\n    get isRemoved() {\r\n        return this.#isRemoved;\r\n    }\r\n\r\n    /**\r\n     * Destroy object on next render iteration\r\n     */\r\n    destroy() {\r\n        this.#isRemoved = true;\r\n    }\r\n}","import { DrawShapeObject } from \"./DrawShapeObject.js\";\r\nimport { Rectangle } from \"./Primitives.js\";\r\nimport { CONST } from \"../constants.js\";\r\n\r\n/**\r\n * @augments DrawShapeObject\r\n * @ignore\r\n */\r\nexport class DrawTextObject extends DrawShapeObject {\r\n    #font;\r\n    #textAlign;\r\n    #textBaseline;\r\n    #fillStyle;\r\n    #strokeStyle;\r\n    #direction;\r\n    #text;\r\n    #textMetrics;\r\n\r\n    /**\r\n     * @hideconstructor\r\n     */\r\n    constructor(mapX, mapY, text, font, fillStyle) {\r\n        super(CONST.DRAW_TYPE.TEXT, mapX, mapY);\r\n        this.#text = text;\r\n        this.#font = font;\r\n        this.#fillStyle = fillStyle;\r\n        this.#textMetrics;\r\n    }\r\n\r\n    /**\r\n     * Rectangle text box\r\n     * @type {Rectangle}\r\n     */\r\n    get boundariesBox() {\r\n        const width = this.textMetrics ? this.textMetrics.width : 300,\r\n            height = this.textMetrics ? this.textMetrics.actualBoundingBoxAscent + /*this.textMetrics.actualBoundingBoxDescent*/ 5: 30;\r\n        return new Rectangle(this.x, this.y - height, width, height);\r\n    }\r\n\r\n    /**\r\n     * @type {String}\r\n     */\r\n    get text() {\r\n        return this.#text;\r\n    }\r\n\r\n    set text(value) {\r\n        this.#text = value;\r\n    }\r\n\r\n    /**\r\n     * @type {String}\r\n     */\r\n    get font() {\r\n        return this.#font;\r\n    }\r\n\r\n    set font(value) {\r\n        this.#font = value;\r\n    }\r\n\r\n    /**\r\n     * @type {String}\r\n     */\r\n    get textAlign() {\r\n        return this.#textAlign;\r\n    }\r\n\r\n    set textAlign(value) {\r\n        this.#textAlign = value;\r\n    }\r\n\r\n    /**\r\n     * @type {String}\r\n     */\r\n    get textBaseline() {\r\n        return this.#textBaseline;\r\n    }\r\n\r\n    set textBaseline(value) {\r\n        this.#textBaseline = value;\r\n    }\r\n\r\n    /**\r\n     * @type {String}\r\n     */\r\n    get fillStyle() {\r\n        return this.#fillStyle;\r\n    }\r\n\r\n    set fillStyle(value) {\r\n        this.#fillStyle = value;\r\n    }\r\n\r\n    /**\r\n     * @type {String}\r\n     */\r\n    get strokeStyle() {\r\n        return this.#strokeStyle;\r\n    }\r\n\r\n    set strokeStyle(value) {\r\n        this.#strokeStyle = value;\r\n    }\r\n\r\n    /**\r\n     * @type {String}\r\n     */\r\n    get textMetrics() {\r\n        return this.#textMetrics;\r\n    }\r\n\r\n    set textMetrics(value) {\r\n        this.#textMetrics = value;\r\n    }\r\n}","import { CONST, ERROR_CODES } from \"../../constants.js\";\r\nimport { Exception } from \"../Exception.js\";\r\n\r\nexport class SystemEvent extends Event {\r\n    #data;\r\n    constructor(eventValue, data){\r\n        super(eventValue);\r\n        if (!this.#isEventExist(eventValue)) {\r\n            Exception(ERROR_CODES.UNEXPECTED_EVENT_NAME, \", Please check if event is exist\");\r\n        }\r\n        this.#data = data;\r\n    }\r\n\r\n    #isEventExist(eventValue) {\r\n        return Object.values(CONST.EVENTS.WEBSOCKET.SERVER_CLIENT).find(eventVal => eventVal === eventValue);\r\n    }\r\n\r\n    get data () {\r\n        return this.#data;\r\n    }\r\n}","export function Exception (code, message) {\r\n    throw new Error(code + \": \" + message);\r\n}\r\n\r\nexport function Warning (code, message) {\r\n    console.warn(code, message);\r\n}","import { SystemSettings } from \"../configs.js\";\r\nimport { CONST } from \"../constants.js\";\r\n\r\nexport class Logger {\r\n    static debug(...args) {\r\n        if (SystemSettings.mode === CONST.MODE.DEBUG)\r\n            args.forEach(message => console.log(message));\r\n    }\r\n}","class Vertex {\r\n    #x;\r\n    #y;\r\n    constructor(x, y) {\r\n        this.#x = x;\r\n        this.#y = y;\r\n    }\r\n\r\n    get x() {\r\n        return this.#x;\r\n    }\r\n\r\n    get y() {\r\n        return this.#y;\r\n    }\r\n}\r\n\r\nclass Rectangle {\r\n    #x;\r\n    #y;\r\n    #w;\r\n    #h;\r\n    constructor(x, y, w, h) {\r\n       this.#x = x;\r\n       this.#y = y;\r\n       this.#w = w;\r\n       this.#h = h; \r\n    }\r\n    /**\r\n     * @type {Number}\r\n     */\r\n    get x() {\r\n        return this.#x;\r\n    }\r\n    /**\r\n     * @type {Number}\r\n     */\r\n    get y() {\r\n        return this.#y;\r\n    }\r\n    /**\r\n     * @type {Number}\r\n     */\r\n    get width() {\r\n        return this.#w;\r\n    }\r\n    /**\r\n     * @type {Number}\r\n     */\r\n    get height() {\r\n        return this.#h;\r\n    }\r\n}\r\n\r\nclass Vector {\r\n    #x;\r\n    #y;\r\n    constructor(x1, y1, x2, y2) {\r\n        this.#x = x2 - x1;\r\n        this.#y = y2 - y1;\r\n    }\r\n\r\n    get x() {\r\n        return this.#x;\r\n    }\r\n\r\n    get y() {\r\n        return this.#y;\r\n    }\r\n\r\n    get length() {\r\n        return Math.sqrt(Math.pow(this.#x, 2) + Math.pow(this.#y, 2));\r\n    }\r\n\r\n    get tetaAngle() {\r\n        return Math.atan2(this.#y, this.#x);\r\n    }\r\n}\r\n\r\nexport { Vertex, Rectangle, Vector };","export class RenderLayer {\r\n    #layerKey;\r\n    #tileMapKey;\r\n    #setBoundaries;\r\n    #drawBoundaries;\r\n\r\n    constructor(layerKey, tileMapKey, setBoundaries = false) {\r\n        this.#layerKey = layerKey;\r\n        this.#tileMapKey = tileMapKey;\r\n        this.#setBoundaries = setBoundaries;\r\n        this.#drawBoundaries = setBoundaries ? setBoundaries : false;\r\n    }\r\n\r\n    /**\r\n     * A layer name\r\n     * @type {String}\r\n     */\r\n    get layerKey() {\r\n        return this.#layerKey;\r\n    }\r\n\r\n    /**\r\n     * A tilemap layer key, should match key from the tilemap\r\n     * @type {String}\r\n     */\r\n    get tileMapKey() {\r\n        return this.#tileMapKey;\r\n    }\r\n\r\n    /**\r\n     * Should the layer borders used as boundaries, or not\r\n     * Can be set in ScreenPage.addRenderLayer() method\r\n     * @type {Boolean}\r\n     */\r\n    get setBoundaries() {\r\n        return this.#setBoundaries;\r\n    }\r\n\r\n    /**\r\n     * Should draw a boundaries helper, or not\r\n     * Can be set in SystemSettings\r\n     * @type {Boolean}\r\n     */\r\n    get drawBoundaries() {\r\n        return this.#drawBoundaries;\r\n    }\r\n\r\n    set drawBoundaries(value) {\r\n        this.#drawBoundaries = value;\r\n    }\r\n}\r\n","import { CONST, ERROR_CODES, WARNING_CODES } from \"../constants.js\";\r\nimport { ScreenPageData } from \"./ScreenPageData.js\";\r\nimport { Exception, Warning } from \"./Exception.js\";\r\nimport { Logger } from \"./Logger.js\";\r\nimport AssetsManager from \"assetsm\";\r\nimport { RenderLayer } from \"./RenderLayer.js\";\r\nimport { CanvasView } from \"./CanvasView.js\";\r\nimport { System } from \"./System.js\";\r\nimport { DrawObjectFactory } from \"./DrawObjectFactory.js\";\r\nimport { DrawConusObject } from \"./DrawConusObject.js\";\r\nimport { DrawImageObject } from \"./DrawImageObject.js\";\r\nimport { DrawLineObject } from \"./DrawLineObject.js\";\r\nimport { DrawPolygonObject } from \"./DrawPolygonObject.js\";\r\nimport { DrawRectObject } from \"./DrawRectObject.js\";\r\nimport { DrawShapeObject } from \"./DrawShapeObject.js\";\r\nimport { DrawTextObject } from \"./DrawTextObject.js\";\r\nimport { SystemInterface } from \"./SystemInterface.js\";\r\nimport { SystemAudioInterface } from \"./SystemAudioInterface.js\";\r\nimport { SystemSettings } from \"../configs.js\";\r\nimport { isPointLineIntersect, isPolygonLineIntersect, angle_2points } from \"../utils.js\";\r\nimport { Vector, Vertex } from \"./Primitives.js\";\r\n\r\n/**\r\n * Represents the page of the game,<br>\r\n * Register and holds CanvasView.<br>\r\n * Contains pages logic.<br>\r\n * Instances should be created and registered with System.registerPage() factory method\r\n * \r\n * @see {@link System} instances of this class holds by the System class\r\n * @hideconstructor\r\n */\r\nexport class ScreenPage {\r\n    /**\r\n     * @type {String}\r\n     */\r\n    #name;\r\n    /**\r\n     * @type {boolean}\r\n     */\r\n    #isInitiated = false;\r\n    /**\r\n     * @type {boolean}\r\n     */\r\n    #isActive;\r\n    /**\r\n     * @type {System}\r\n     */\r\n    #system;\r\n    /**\r\n     * @type {Map<CanvasView>}\r\n     */\r\n    #views;\r\n    /**\r\n     * @type {AssetsManager}\r\n     */\r\n    #loader;\r\n    /**\r\n     * @type {ScreenPageData}\r\n     */\r\n    #screenPageData;\r\n    /**\r\n     * @type {DrawObjectFactory}\r\n     */\r\n    #drawObjectFactory = new DrawObjectFactory();\r\n    /**\r\n     * @type {Number[]}\r\n     */\r\n    #tempFPStime;\r\n    /**\r\n     * @type {Function}\r\n     */\r\n    #fpsAverageCountTimer;\r\n    /**\r\n     * @type {EventTarget}\r\n     */\r\n    #emitter = new EventTarget();\r\n\r\n    constructor() {\r\n        this.#isActive = false;\r\n        this.#views = new Map();\r\n        this.#loader = new AssetsManager();\r\n        this.#screenPageData = new ScreenPageData();\r\n        this.#tempFPStime = [];\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param {String} eventName \r\n     * @param  {...any} eventParams \r\n     */\r\n    emit = (eventName, ...eventParams) => {\r\n        const event = new Event(eventName);\r\n        event.data = [...eventParams];\r\n        this.#emitter.dispatchEvent(event);\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param {String} eventName \r\n     * @param {*} listener \r\n     * @param {*} options \r\n     */\r\n    addEventListener = (eventName, listener, options) => {\r\n        this.#emitter.addEventListener(eventName, listener, options);\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param {String} eventName \r\n     * @param {*} listener \r\n     * @param {*} options \r\n     */\r\n    removeEventListener = (eventName, listener, options) => {\r\n        this.#emitter.removeEventListener(eventName, listener, options);\r\n    }\r\n\r\n    /**\r\n     * Register stage\r\n     * @param {String} name\r\n     * @param {SystemInterface} system \r\n     * @protected\r\n     */\r\n    _register(name, system) {\r\n        this.#name = name;\r\n        this.#system = system;\r\n        this.#setWorldDimensions();\r\n        this.#setCanvasSize();\r\n        this.register();\r\n    }\r\n\r\n    /**\r\n     * Initialization stage\r\n     * @protected\r\n     */\r\n    _init() {\r\n        this.init();\r\n        this.#isInitiated = true;\r\n    }\r\n\r\n    /**\r\n     * @tutorial screen_pages_stages\r\n     * Custom logic for register stage\r\n     */\r\n    register() {}\r\n    /**\r\n     * @tutorial screen_pages_stages\r\n     * Custom logic for init stage\r\n     */\r\n    init() {}\r\n    /**\r\n     * Custom logic for start stage\r\n     */\r\n    start() {}\r\n    /**\r\n     * @tutorial screen_pages_stages\r\n     * Custom logic for stop stage\r\n     */\r\n    stop() {}\r\n    /**\r\n     * Custom logic for resize stage\r\n     */\r\n    resize() {}\r\n\r\n    /**\r\n     * @tutorial assets_manager\r\n     * @type {AssetsManager}\r\n     */\r\n    get loader() {\r\n        return this.#loader;\r\n    }\r\n\r\n    /**\r\n     * @type {DrawObjectFactory}\r\n     */\r\n    get draw() {\r\n        return this.#drawObjectFactory;\r\n    }\r\n\r\n    /**\r\n     * Creates new canvas layer\r\n     * and set it to the #views\r\n     * @param {string} name\r\n     * @param {boolean} [isOffsetTurnedOff = false] - determines if offset is affected on this layer or not\r\n     */\r\n    createCanvasView = (name, isOffsetTurnedOff = false) => {\r\n        if (name && name.trim().length > 0) {\r\n            const newView = new CanvasView(name, this.#system.systemSettings, this.#screenPageData, this.#loader, isOffsetTurnedOff);\r\n            this.#views.set(name, newView);\r\n        } else\r\n            Exception(ERROR_CODES.UNEXPECTED_INPUT_PARAMS);\r\n    }\r\n\r\n    /**\r\n     * Attach all canvas elements from the #views to container\r\n     * @param {HTMLDivElement} container\r\n     * @protected\r\n     * @ignore\r\n     */\r\n    _attachViewsToContainer(container) {\r\n        for (const view of this.#views.values()) {\r\n            this.#attachElementToContainer(view.canvas, container);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Add render object to the view\r\n     * @param {String} canvasKey \r\n     * @param { DrawConusObject | DrawImageObject | \r\n     *          DrawLineObject | DrawPolygonObject | \r\n     *          DrawRectObject | DrawShapeObject | \r\n     *          DrawTextObject } renderObject \r\n     */\r\n    addRenderObject = (canvasKey, renderObject) => {\r\n        if (!canvasKey) {\r\n            Exception(ERROR_CODES.CANVAS_KEY_NOT_SPECIFIED, \", should pass canvasKey as 3rd parameter\");\r\n        } else if (!this.#views.has(canvasKey)) {\r\n            Exception(ERROR_CODES.CANVAS_WITH_KEY_NOT_EXIST, \", should create canvas view, with \" + canvasKey + \" key first\");\r\n        } else {\r\n            const view = this.#views.get(canvasKey);\r\n            view._renderObject = renderObject;\r\n            view._sortRenderObjectsByZIndex();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Add render layer to the view\r\n     * @param {String} canvasKey \r\n     * @param {String} layerKey \r\n     * @param {String} tileMapKey \r\n     * @param {Boolean} setBoundaries \r\n     */\r\n    addRenderLayer = (canvasKey, layerKey, tileMapKey, setBoundaries) => {\r\n        if (!canvasKey) {\r\n            Exception(ERROR_CODES.CANVAS_KEY_NOT_SPECIFIED, \", should pass canvasKey as 3rd parameter\");\r\n        } else if (!this.#views.has(canvasKey)) {\r\n            Exception(ERROR_CODES.CANVAS_WITH_KEY_NOT_EXIST, \", should create canvas view, with \" + canvasKey + \" key first\");\r\n        } else {\r\n            const view = this.#views.get(canvasKey);\r\n            view._renderLayers = new RenderLayer(layerKey, tileMapKey, setBoundaries);\r\n            if (setBoundaries && this.systemSettings.gameOptions.render.mapBoundariesEnabled) {\r\n                view._enableMapBoundaries();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Determines if this page render is Active or not\r\n     * @type {Boolean}\r\n     */\r\n    get isActive() {\r\n        return this.#isActive;\r\n    }\r\n\r\n    /**\r\n     * Determines if this page is initialized or not\r\n     * @type {Boolean}\r\n     */\r\n    get isInitiated() {\r\n        return this.#isInitiated;\r\n    }\r\n\r\n    /**\r\n     * Current page name\r\n     * @type {String}\r\n     */\r\n    get name () {\r\n        return this.#name;\r\n    }\r\n\r\n    /**\r\n     * Determines if all added files was loaded or not\r\n     * @returns {Boolean}\r\n     */\r\n    isAllFilesLoaded = () => {\r\n        return this.#loader.filesWaitingForUpload === 0;\r\n    }\r\n\r\n    /**\r\n     * @type {ScreenPageData}\r\n     */\r\n    get screenPageData() {\r\n        return this.#screenPageData;\r\n    }\r\n\r\n    /**\r\n     * @type {SystemSettings}\r\n     */\r\n    get systemSettings() {\r\n        return this.#system.systemSettings;\r\n    }\r\n\r\n    /**\r\n     * @type {SystemAudioInterface}\r\n     */\r\n    get audio() {\r\n        return this.#system.audio;\r\n    }\r\n\r\n    /**\r\n     * @type {SystemInterface}\r\n     */\r\n    get system() {\r\n        return this.#system;\r\n    }\r\n\r\n    /**\r\n     * @method\r\n     * @param {String} key \r\n     * @returns {CanvasView}\r\n     */\r\n    getView = (key) => {\r\n        const ctx = this.#views.get(key);\r\n        if (ctx) {\r\n            return this.#views.get(key);\r\n        } else {\r\n            Exception(ERROR_CODES.CANVAS_WITH_KEY_NOT_EXIST, \", cannot find canvas with key \" + key);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Load all assets,\r\n     * previously added to a loader query\r\n     * @returns {Promise}\r\n     * @protected\r\n     * @ignore\r\n     */\r\n    _loadPageAssets() {\r\n        return this.#loader.preload();\r\n    }\r\n\r\n    /** \r\n     * @returns {Promise}\r\n     * @protected \r\n     * @ignore\r\n     */\r\n    _registerPageAudio() {\r\n        return this.audio._registerAllAudio(this.#loader);\r\n    }\r\n\r\n    /**\r\n     * Start page render\r\n     * @param {*} options \r\n     * @protected\r\n     * @ignore\r\n     */\r\n    _start(options) {\r\n        this.#isActive = true;\r\n        window.addEventListener(\"resize\", this._resize);\r\n        this._resize();\r\n        if (this.#views.size > 0) {\r\n            requestAnimationFrame(this.#render);\r\n        }\r\n        this.emit(CONST.EVENTS.SYSTEM.START_PAGE);\r\n        this.start(options);\r\n    }\r\n\r\n    /**\r\n     * Stop page render\r\n     * @protected\r\n     * @ignore\r\n     */\r\n    _stop() {\r\n        this.#isActive = false;\r\n        window.removeEventListener(\"resize\", this._resize);\r\n        this.emit(CONST.EVENTS.SYSTEM.STOP_PAGE);\r\n        this.#removeCanvasFromDom();\r\n        clearInterval(this.#fpsAverageCountTimer);\r\n        this.stop();\r\n    }\r\n\r\n    /**\r\n     * Resize event\r\n     * @protected\r\n     * @ignore\r\n     */\r\n    _resize = () => {\r\n        this.#setCanvasSize();\r\n        this.resize();\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param {HTMLDivElement} htmlElement \r\n     * @param {HTMLDivElement} container \r\n     */\r\n    #attachElementToContainer(htmlElement, container) {\r\n        container.appendChild(htmlElement);\r\n    }\r\n\r\n    #removeCanvasFromDom() {\r\n        for (const view of this.#views.values()) {\r\n            document.getElementById(view.canvas.id).remove();\r\n        }\r\n    }\r\n\r\n    #setWorldDimensions() {\r\n        const width = this.systemSettings.worldSize ? this.systemSettings.worldSize.width : 0,\r\n            height = this.systemSettings.worldSize ? this.systemSettings.worldSize.height : 0;\r\n            \r\n        this.screenPageData._setWorldDimensions(width, height);\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param {Number} x \r\n     * @param {Number} y \r\n     * @returns {boolean}\r\n     */\r\n    #isPointToBoundariesCollision(x, y) {\r\n        const mapObjects = this.screenPageData.getBoundaries(),\r\n            [mapOffsetX, mapOffsetY] = this.screenPageData.worldOffset,\r\n            len = mapObjects.length;\r\n\r\n        for (let i = 0; i < len; i+=1) {\r\n            const item = mapObjects[i],\r\n                object = {\r\n                    x1: item[0],\r\n                    y1: item[1],\r\n                    x2: item[2],\r\n                    y2: item[3]\r\n                };\r\n            if (isPointLineIntersect({x: x - mapOffsetX, y: y - mapOffsetY}, object)) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * @param {Number} x\r\n     * @param {Number} y\r\n     * @param {Array<Vertex>} polygon\r\n     * @param {Number} rotation \r\n     * @returns {boolean}\r\n     */\r\n    #isPolygonToBoundariesCollision(x, y, polygon, rotation) {\r\n        //console.log(\"angle: \", rotation);\r\n        //console.log(\"boundaries before calculations: \");\r\n        //console.log(polygon);\r\n        const mapObjects = this.screenPageData.getBoundaries(),\r\n            [mapOffsetX, mapOffsetY] = this.screenPageData.worldOffset,\r\n            xWithOffset = x - mapOffsetX,\r\n            yWithOffset = y - mapOffsetY,\r\n            polygonWithOffsetAndRotation = polygon.map((vertex) => (this.#calculateShiftedVertexPos(vertex, xWithOffset, yWithOffset, rotation))),\r\n            len = mapObjects.length;\r\n            \r\n        for (let i = 0; i < len; i+=1) {\r\n            const item = mapObjects[i],\r\n                object = {\r\n                    x1: item[0],\r\n                    y1: item[1],\r\n                    x2: item[2],\r\n                    y2: item[3]\r\n                },\r\n                intersect = isPolygonLineIntersect(polygonWithOffsetAndRotation, object);\r\n            if (intersect) {\r\n                //console.log(\"rotation: \", rotation);\r\n                //console.log(\"polygon: \", polygonWithOffsetAndRotation);\r\n                //console.log(\"intersect: \", intersect);\r\n                return intersect;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    #calculateShiftedVertexPos(vertex, centerX, centerY, rotation) {\r\n        const vector = new Vector(0, 0, vertex.x, vertex.y),\r\n            vertexAngle = angle_2points(0, 0, vertex.x, vertex.y),\r\n            len = vector.length;\r\n        //console.log(\"coords without rotation: \");\r\n        //console.log(x + vertex.x);\r\n        //console.log(y + vertex.y);\r\n        //console.log(\"len: \", len);\r\n        //console.log(\"angle: \", rotation);\r\n        const newX = centerX + (len * Math.cos(rotation + vertexAngle)),\r\n            newY = centerY + (len * Math.sin(rotation + vertexAngle));\r\n        return { x: newX, y: newY };\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param {Number} x \r\n     * @param {Number} y \r\n     * @param {DrawShapeObject} drawObject \r\n     */\r\n    isBoundariesCollision = (x, y, drawObject) => {\r\n        const drawObjectType = drawObject.type;\r\n        switch(drawObjectType) {\r\n            case CONST.DRAW_TYPE.RECTANGLE:\r\n                return this.#isPolygonToBoundariesCollision(x, y, drawObject.boundaries, drawObject.rotation);\r\n            case CONST.DRAW_TYPE.CIRCLE:\r\n            case CONST.DRAW_TYPE.LINE:\r\n            case CONST.DRAW_TYPE.TEXT:\r\n            default:\r\n                if (drawObject.boundaries && drawObject.boundaries.length > 0) {\r\n                    return this.#isPolygonToBoundariesCollision(x, y, drawObject.boundaries, drawObject.rotation);\r\n                 } else {\r\n                     return this.#isPointToBoundariesCollision(x, y);\r\n                 }\r\n        }\r\n    }\r\n\r\n    #checkCollisions(renderObjects) {\r\n        const boundaries = this.screenPageData.getBoundaries(),\r\n            boundariesLen = boundaries.length,\r\n            objectsLen = renderObjects.length;\r\n        //console.log(this.screenPageData.worldOffset);\r\n        for (let i = 0; i < objectsLen; i++) {\r\n            const renderObject = renderObjects[i];\r\n            for (let j = 0; j < objectsLen; j++) {\r\n                if (i === j) {\r\n                    continue;\r\n                }\r\n                const renderObjectCheck = renderObjects[j];\r\n                // check object - object collisions\r\n            }\r\n\r\n            for (let k = 0; k < boundariesLen; k+=1) {\r\n                const item = boundaries[k],\r\n                    object = {\r\n                        x1: item[0],\r\n                        y1: item[1],\r\n                        x2: item[2],\r\n                        y2: item[3]\r\n                    };\r\n                const objectBoundaries = object.boundaries;\r\n                if (objectBoundaries) {\r\n                    if (isPolygonLineIntersect(objectBoundaries, object)) {\r\n                        this.emit(CONST.EVENTS.GAME.BOUNDARIES_COLLISION, renderObject);\r\n                    }\r\n                } else {\r\n                    if (isPointLineIntersect({ x: renderObject.x, y: renderObject.y }, object)) {\r\n                        this.emit(CONST.EVENTS.GAME.BOUNDARIES_COLLISION, renderObject);\r\n                        console.log(\"boundaries collision detected\");\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #setCanvasSize() {\r\n        const canvasWidth = this.systemSettings.canvasMaxSize.width && (this.systemSettings.canvasMaxSize.width < window.innerWidth) ? this.systemSettings.canvasMaxSize.width : window.innerWidth,\r\n            canvasHeight = this.systemSettings.canvasMaxSize.height && (this.systemSettings.canvasMaxSize.height < window.innerHeight) ? this.systemSettings.canvasMaxSize.height : window.innerHeight;\r\n        this.screenPageData._setCanvasDimensions(canvasWidth, canvasHeight);\r\n        for (const view of this.#views.values()) {\r\n            view._setCanvasSize(canvasWidth, canvasHeight);\r\n        }\r\n    }\r\n\r\n    #countFPSaverage() {\r\n        const timeLeft = this.systemSettings.gameOptions.render.averageFPStime,\r\n            steps = this.#tempFPStime.length;\r\n        let fullTime = 0;\r\n\r\n        for(let i = 0; i < steps; i++) {\r\n            const timeStep = this.#tempFPStime[i];\r\n            fullTime += timeStep;\r\n        }\r\n        console.log(\"FPS average for \", timeLeft/1000, \"sec, is \", fullTime / steps);\r\n\r\n        // cleanup\r\n        this.#tempFPStime = [];\r\n    }\r\n\r\n    #render = async (/*time*/) => {\r\n        Logger.debug(\"_render \" + this.name + \" class\");\r\n        if (this.#isActive) {\r\n            switch (this.systemSettings.gameOptions.library) {\r\n            case CONST.LIBRARY.WEBGL:\r\n                if (this.isAllFilesLoaded()) {\r\n                    //render\r\n                    await this.#prepareViews();\r\n                } else {\r\n                    Warning(WARNING_CODES.ASSETS_NOT_READY, \"Is page initialization phase missed?\");\r\n                    this.#isActive = false;\r\n                }\r\n                // wait for the end of the execution stack, before start next iteration\r\n                setTimeout(() => requestAnimationFrame(this.#drawViews));\r\n                break;\r\n            }\r\n            this.#fpsAverageCountTimer = setInterval(() => this.#countFPSaverage(), this.systemSettings.gameOptions.render.averageFPStime);\r\n        }\r\n    };\r\n\r\n    #prepareViews() {\r\n        return new Promise((resolve, reject) => {\r\n            let viewPromises = [];\r\n            for (const view of this.#views.values()) {\r\n                viewPromises.push(view._initiateWebGlContext(this.systemSettings.gameOptions.debugWebGl));\r\n            }\r\n            Promise.allSettled(viewPromises).then((drawingResults) => {\r\n                drawingResults.forEach((result) => {\r\n                    if (result.status === \"rejected\") {\r\n                        const error = result.reason || result.value;\r\n                        Warning(WARNING_CODES.UNHANDLED_DRAW_ISSUE, error);\r\n                        reject(error);\r\n                    }\r\n                });\r\n                resolve();\r\n            });\r\n        });\r\n    }\r\n\r\n    #drawViews = (/*drawTime*/) => {\r\n        const pt0 = performance.now(),\r\n            minCircleTime = this.systemSettings.gameOptions.render.minCircleTime;\r\n        let viewPromises = [];\r\n        this.emit(CONST.EVENTS.SYSTEM.RENDER.START);\r\n        this.screenPageData._clearBoundaries();\r\n        for (const [key, view] of this.#views.entries()) {\r\n            viewPromises.push(this.#executeRender(key, view));\r\n        }\r\n        Promise.allSettled(viewPromises).then((drawingResults) => {\r\n            drawingResults.forEach((result) => {\r\n                if (result.status === \"rejected\") {\r\n                    Warning(WARNING_CODES.UNHANDLED_DRAW_ISSUE, result.reason || result.value);\r\n                }\r\n            });\r\n            const r_time = performance.now() - pt0,\r\n                r_time_less = minCircleTime - r_time,\r\n                wait_time = r_time_less > 0 ? r_time_less : 0,\r\n                fps = 1000 / (r_time + wait_time);\r\n            //console.log(\"draw circle done, take: \", (r_time), \" ms\");\r\n            //console.log(\"fps: \", fps);\r\n            this.emit(CONST.EVENTS.SYSTEM.RENDER.END);\r\n            this.#tempFPStime.push(fps);\r\n            if (this.#isActive) {\r\n                setTimeout(() => requestAnimationFrame(this.#drawViews), wait_time);\r\n            }\r\n        });\r\n    };\r\n\r\n    #executeRender (key, view) {\r\n        return new Promise((resolve, reject) => {\r\n            if (!view._isCleared) {\r\n                view._clearWebGlContext();\r\n            }\r\n            if (view._renderLayers.length !== 0) {\r\n                view._prepareBindRenderLayerPromises();\r\n            }\r\n            view._executeBindRenderLayerPromises()\r\n                .then((bindResults) => {\r\n                    bindResults.forEach((result) => {\r\n                        if (result.status === \"rejected\") {\r\n                            Warning(WARNING_CODES.UNHANDLED_DRAW_ISSUE, result.reason || result.value);\r\n                            this.#isActive = false;\r\n                            return reject(WARNING_CODES.UNHANDLED_DRAW_ISSUE, result.reason);\r\n                        }\r\n                    });\r\n                    return view._executeTileImagesDraw();\r\n                })\r\n                .then(() => {\r\n                    if (view.renderObjects.length !== 0) {\r\n                        //this.#checkCollisions(view.renderObjects);\r\n                        view._prepareBindRenderObjectPromises();\r\n                    }\r\n                    if (key === CONST.LAYERS.BOUNDARIES) {\r\n                        view._prepareBindBoundariesPromise();\r\n                    }\r\n                    return view._executeBindRenderObjectPromises();\r\n                })\r\n                .then((bindResults) => {\r\n                    bindResults.forEach((result) => {\r\n                        if (result.status === \"rejected\") {\r\n                            Warning(WARNING_CODES.UNHANDLED_DRAW_ISSUE, result.reason || result.value);\r\n                            this.#isActive = false;\r\n                        }\r\n                    });\r\n                    \r\n                    view._isCleared = false;\r\n                    resolve();\r\n                });\r\n        });\r\n    }\r\n}","import { ERROR_CODES, WARNING_CODES } from \"../constants.js\";\r\nimport { Exception, Warning } from \"./Exception.js\";\r\nimport { Logger } from \"./Logger.js\";\r\n/**\r\n * An interface for common views data such as\r\n * boundaries, world dimensions, options\r\n * accessible via ScreenPage.screenPageData \r\n * @see {@link ScreenPage} a part of ScreenPage\r\n * @hideconstructor\r\n */\r\nexport class ScreenPageData {\r\n    #worldWidth;\r\n    #worldHeight;\r\n    #viewWidth;\r\n    #viewHeight;\r\n    #xOffset = 0;\r\n    #yOffset = 0;\r\n    #centerX = 0;\r\n    #centerY = 0;\r\n    #rotate = 0;\r\n    /**\r\n     * @type {Array.<Number[]>}\r\n     */\r\n    #boundaries = [];\r\n\r\n    /**\r\n     * Add a Boundaries line\r\n     * @param {*} boundaries \r\n     */\r\n    #addBoundaries(boundaries) {\r\n        this.#boundaries.push([boundaries.x1, boundaries.y1, boundaries.x2, boundaries.y2]);\r\n    }\r\n\r\n    /**\r\n     * Add array of boundaries lines\r\n     * @param {Array} boundaries \r\n     */\r\n    _addBoundariesArray(boundaries) {\r\n        this.#boundaries.push(...boundaries);\r\n    }\r\n\r\n    /**\r\n     * Clear map boundaries\r\n     */\r\n    _clearBoundaries() {\r\n        this.#boundaries = [];\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param {Number} width \r\n     * @param {Number} height \r\n     */\r\n    _setWorldDimensions(width, height) {\r\n        this.#worldWidth = width;\r\n        this.#worldHeight = height;\r\n    }\r\n\r\n    set mapRotate(value) {\r\n        this.#rotate = value;\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param {Number} width \r\n     * @param {Number} height \r\n     */\r\n    _setCanvasDimensions(width, height) {\r\n        this.#viewWidth = width;\r\n        this.#viewHeight = height;\r\n    }\r\n\r\n    /**\r\n     * Set map borders\r\n     */\r\n    _setMapBoundaries() {\r\n        const [w, h] = [this.#worldWidth, this.#worldHeight];\r\n        if (!w || !h) {\r\n            Warning(WARNING_CODES.WORLD_DIMENSIONS_NOT_SET, \"Can't set map boundaries.\");\r\n        }\r\n        this.#addBoundaries({x1: 0, y1: 0, x2: w, y2: 0});\r\n        this.#addBoundaries({x1: w, y1: 0, x2: w, y2: h});\r\n        this.#addBoundaries({x1: w, y1: h, x2: 0, y2: h});\r\n        this.#addBoundaries({x1: 0, y1: h, x2: 0, y2: 0});\r\n    }\r\n\r\n    /**\r\n     * Merge same boundaries\r\n     */\r\n    _mergeBoundaries() {\r\n        const boundaries = this.getBoundaries(),\r\n            boundariesSet = new Set(boundaries);\r\n        for (const line of boundariesSet.values()) {\r\n            const lineX1 = line[0],\r\n                lineY1 = line[1],\r\n                lineX2 = line[2],\r\n                lineY2 = line[3];\r\n            for (const line2 of boundariesSet.values()) {\r\n                const line2X1 = line2[0],\r\n                    line2Y1 = line2[1],\r\n                    line2X2 = line2[2],\r\n                    line2Y2 = line2[3];\r\n                if (lineX1 === line2X2 && lineY1 === line2Y2 &&\r\n                    lineX2 === line2X1 && lineY2 === line2Y1) {\r\n                    //remove double lines\r\n                    boundariesSet.delete(line);\r\n                    boundariesSet.delete(line2);\r\n                }\r\n                if (lineX2 === line2X1 && lineY2 === line2Y1 && (lineX1 === line2X2 || lineY1 === line2Y2)) {\r\n                    //merge lines\r\n                    line2[0] = lineX1;\r\n                    line2[1] = lineY1;\r\n                    boundariesSet.delete(line);\r\n                }\r\n            }\r\n        }\r\n\r\n        this.#boundaries = Array.from(boundariesSet);\r\n        boundariesSet.clear();\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @returns {Array}\r\n     */\r\n    getBoundaries() {\r\n        return this.#boundaries;\r\n    }\r\n\r\n    /**\r\n     * @type {Array<Number>}\r\n     */\r\n    get canvasDimensions() {\r\n        return [this.#viewWidth, this.#viewHeight];\r\n    }\r\n\r\n    /**\r\n     * @type {Array<Number>}\r\n     */\r\n    get worldDimensions() {\r\n        return [this.#worldWidth, this.#worldHeight];\r\n    }\r\n    \r\n    /**\r\n     * @type {Array<Number>}\r\n     */\r\n    get worldOffset() {\r\n        return [this.#xOffset, this.#yOffset];\r\n    }\r\n\r\n    /**\r\n     * @type {Array<Number>}\r\n     */\r\n    get mapCenter() {\r\n        return [this.#centerX, this.#centerY];\r\n    }\r\n\r\n    /**\r\n     * @type {Number}\r\n     */\r\n    get mapRotate() {\r\n        return this.#rotate;\r\n    }\r\n\r\n    /**\r\n     * @method\r\n     * @param {Number} x \r\n     * @param {Number} y \r\n     */\r\n    centerCameraPosition = (x, y) => {\r\n        let [mapOffsetX, mapOffsetY] = this.worldOffset;\r\n        const [canvasWidth, canvasHeight] = this.canvasDimensions,\r\n            [mapWidth, mapHeight] = this.worldDimensions,\r\n            halfScreenWidth = canvasWidth/2,\r\n            halfScreenHeight = canvasHeight/2,\r\n            currentCenterX = halfScreenWidth - mapOffsetX,\r\n            currentCenterY = halfScreenHeight - mapOffsetY;\r\n        if (currentCenterX < x) {\r\n            if (x < mapWidth - halfScreenWidth) {\r\n                const newXOffset = x - halfScreenWidth;\r\n                if (newXOffset >= 0)\r\n                    this.#xOffset = Math.round(newXOffset);\r\n            } else if (mapWidth > canvasWidth) {\r\n                const newXOffset = mapWidth - canvasWidth;\r\n                this.#xOffset = Math.round(newXOffset);\r\n            }\r\n        }\r\n        if (currentCenterY < y) {\r\n            if (y < mapHeight - halfScreenHeight) {\r\n                const newYOffset = y - halfScreenHeight;\r\n                if (newYOffset >= 0)\r\n                    this.#yOffset = Math.round(newYOffset);\r\n            } else if (mapHeight > canvasHeight) {\r\n                const newYOffset = mapHeight - canvasHeight;\r\n                this.#yOffset = Math.round(newYOffset);\r\n            }\r\n        }\r\n\r\n        this.#centerX = x;\r\n        this.#centerY = y;\r\n        //Logger.debug(\"center camera position, offset: \", this.worldOffset);\r\n        //Logger.debug(\"center: \", this.mapCenter);   \r\n    }\r\n\r\n    personRotatedCenterCamera = (x, y, rotationAngle) => {\r\n        console.log(\"new centering algorithm\");\r\n        /*\r\n        let [mapOffsetX, mapOffsetY] = this.worldOffset;\r\n        const [canvasWidth, canvasHeight] = this.canvasDimensions,\r\n            [mapWidth, mapHeight] = this.worldDimensions,\r\n            halfScreenWidth = canvasWidth/2,\r\n            halfScreenHeight = canvasHeight/2,\r\n            currentCenterX = halfScreenWidth - mapOffsetX,\r\n            currentCenterY = halfScreenHeight - mapOffsetY;\r\n        if (currentCenterX < x) {\r\n            if (x < mapWidth - halfScreenWidth) {\r\n                const newXOffset = x - halfScreenWidth;\r\n                if (newXOffset >= 0)\r\n                    this.#xOffset = Math.round(newXOffset);\r\n            } else if (mapWidth > canvasWidth) {\r\n                const newXOffset = mapWidth - canvasWidth;\r\n                this.#xOffset = Math.round(newXOffset);\r\n            }\r\n        }\r\n        if (currentCenterY < y) {\r\n            if (y < mapHeight - halfScreenHeight) {\r\n                const newYOffset = y - halfScreenHeight;\r\n                if (newYOffset >= 0)\r\n                    this.#yOffset = Math.round(newYOffset);\r\n            } else if (mapHeight > canvasHeight) {\r\n                const newYOffset = mapHeight - canvasHeight;\r\n                this.#yOffset = Math.round(newYOffset);\r\n            }\r\n        }\r\n\r\n        this.#centerX = x;\r\n        this.#centerY = y;\r\n        Logger.debug(\"center camera position, offset: \", this.worldOffset);\r\n        Logger.debug(\"center: \", this.mapCenter);   \r\n        */\r\n    }\r\n}","import { ERROR_CODES } from \"../constants.js\";\r\nimport { Exception } from \"./Exception.js\";\r\nimport { ScreenPage } from \"./ScreenPage.js\";\r\nimport { SystemInterface } from \"./SystemInterface.js\";\r\nimport { SystemSettings } from \"../configs.js\";\r\n/**\r\n * A main app class, <br>\r\n * Holder class for ScreenPage,<br>\r\n * can register new ScreenPages,<br>\r\n * init and preload data for them,<br>\r\n */\r\nexport class System {\r\n    #registeredPages;\r\n    #system;\r\n    /**\r\n     * @param {SystemSettings} systemSettings - holds system settings\r\n     * @param {HTMLDivElement} [canvasContainer] - If it is not passed, system will create div element and attach it to body\r\n     */\r\n    constructor(systemSettings, canvasContainer) {\r\n        if (!systemSettings) {\r\n            Exception(ERROR_CODES.CREATE_INSTANCE_ERROR, \"systemSettings should be passed to class instance\");\r\n        }\r\n        this.#registeredPages = new Map();\r\n\r\n        if (!canvasContainer) {\r\n            canvasContainer = document.createElement(\"div\");\r\n            document.body.appendChild(canvasContainer);\r\n        }\r\n\r\n        this.#system = new SystemInterface(systemSettings, canvasContainer, this.#registeredPages);\r\n    }\r\n\r\n    /**\r\n     * @type {SystemInterface}\r\n     */\r\n    get system() {\r\n        return this.#system;\r\n    }\r\n\r\n    /**\r\n     * A main factory method for create ScreenPage instances, <br>\r\n     * register them in a System and call ScreenPage.register() stage\r\n     * @param {String} screenPageName\r\n     * @param {ScreenPage} screen \r\n     */\r\n    registerPage(screenPageName, screen) {\r\n        if (screenPageName && typeof screenPageName === \"string\" && screenPageName.trim().length > 0) {\r\n            const page = new screen();\r\n            page._register(screenPageName, this.system);\r\n            this.#registeredPages.set(screenPageName, page);\r\n        } else {\r\n            Exception(ERROR_CODES.CREATE_INSTANCE_ERROR, \"valid class name should be provided\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Preloads assets for all registered pages\r\n     * @return {Promise}\r\n     */\r\n    preloadAllData() {\r\n        const promises = [];\r\n        for (const key of this.#registeredPages.keys()) {\r\n            promises.push(this.preloadPageData(key));\r\n        }\r\n        return Promise.all(promises);\r\n    }\r\n\r\n    /**\r\n     * Preloads assets data for specific page\r\n     * @param {String} screenPageName\r\n     * @return {Promise}\r\n     */\r\n    preloadPageData(screenPageName) {\r\n        return this.#registeredPages.get(screenPageName)._loadPageAssets();\r\n    }\r\n}","import AssetsManager from \"assetsm\";\r\nimport { ERROR_CODES, WARNING_CODES } from \"../constants.js\";\r\nimport { Exception, Warning } from \"./Exception.js\";\r\n\r\n/**\r\n * An audio interface, <br>\r\n * controls all application audio,<br>\r\n * holds and retrieves audio, changes volume<br> \r\n * accessible via ScreenPage.audio\r\n * @see {@link ScreenPage} a part of ScreenPage\r\n * @hideconstructor\r\n */\r\nexport class SystemAudioInterface {\r\n    #volume = 0.5;\r\n    #audio = new Map();\r\n\r\n    /**\r\n     * Original track\r\n     * @param {String} name \r\n     * @returns {HTMLAudioElement}\r\n     */\r\n    getAudio(name) {\r\n        const audio = this.#audio.get(name);\r\n        if (audio) {\r\n            return audio;\r\n        } else {\r\n            Warning(WARNING_CODES.AUDIO_NOT_REGISTERED);\r\n            return null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Clone of original track\r\n     * @param {String} name \r\n     * @returns {HTMLAudioElement}\r\n     */\r\n    getAudioCloned(name) {\r\n        const audio = this.#audio.get(name).cloneNode();\r\n        if (audio) {\r\n            audio.volume = this.#volume;\r\n            return audio;\r\n        } else {\r\n            Warning(WARNING_CODES.AUDIO_NOT_REGISTERED);\r\n            return null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Used to register audio in system after downloading\r\n     * @param {String} name \r\n     * @param {AssetsManager} loader \r\n     */\r\n    registerAudio(name, loader) {\r\n        let mediaElement = this.#audio.get(name);\r\n        if (!mediaElement) {\r\n            const audioEl = loader.getAudio(name);\r\n            if (!audioEl) {\r\n                Exception(ERROR_CODES.FILE_NOT_EXIST, \"can't get audio,\" + name);\r\n            }\r\n            //mediaElement = this.#audioContext.createMediaElementSource(audioEl);\r\n            audioEl.volume = this.#volume;\r\n            mediaElement = audioEl;\r\n            this.#audio.set(name, mediaElement);\r\n        } else {\r\n            Warning(WARNING_CODES.AUDIO_ALREADY_REGISTERED, \"\");\r\n        }\r\n    }\r\n\r\n    set volume(value) {\r\n        this.#volume = value;\r\n        this.#updateTracksVolumes(value);\r\n    }\r\n    /**\r\n     * Used to set or get audio volume, \r\n     * value should be from 0 to 1\r\n     * @type {Number}\r\n     */\r\n    get volume() {\r\n        return this.#volume;\r\n    }\r\n\r\n    #updateTracksVolumes(value) {\r\n        for (const track of this.#audio.values()) {\r\n            track.volume = value;\r\n        }\r\n    }\r\n}","import { ERROR_CODES } from \"../constants.js\";\r\nimport { Exception } from \"./Exception.js\";\r\nimport { SystemSocketConnection } from \"./SystemSocketConnection.js\";\r\nimport { SystemAudioInterface } from \"./SystemAudioInterface.js\";\r\nimport { SystemSettings } from \"../configs.js\";\r\n/**\r\n * Public interface for a System<br>\r\n * Can be used to start/stop ScreenPage render, <br>\r\n * And provides access to SystemSettings, SystemSocketConnection and SystemAudioInterface <br>\r\n * accessible via ScreenPage.system and System.system\r\n * @see {@link System} a part of System class instance\r\n * @see {@link ScreenPage} a part of ScreenPage class instance\r\n */\r\nexport class SystemInterface {\r\n    #systemSettings;\r\n    #canvasContainer;\r\n    #registeredPages;\r\n    #systemServerConnection;\r\n    #systemAudioInterface;\r\n\r\n    /**\r\n     * @hideconstructor\r\n     */\r\n    constructor(systemSettings, canvasContainer, registeredPages) {\r\n        if (!systemSettings) {\r\n            Exception(ERROR_CODES.CREATE_INSTANCE_ERROR, \"systemSettings should be passed to class instance\");\r\n        }\r\n        this.#systemSettings = systemSettings;\r\n        this.#canvasContainer = canvasContainer;\r\n        this.#registeredPages = registeredPages;\r\n        this.#systemAudioInterface = new SystemAudioInterface();\r\n        this.#systemServerConnection = new SystemSocketConnection(systemSettings);\r\n    }\r\n\r\n    /**\r\n     * @type { SystemSocketConnection }\r\n     */\r\n    get network () {\r\n        return this.#systemServerConnection;\r\n    }\r\n\r\n    /**\r\n     * @type { SystemSettings }\r\n     */\r\n    get systemSettings() {\r\n        return this.#systemSettings;\r\n    }\r\n\r\n    /**\r\n     * @type { SystemAudioInterface }\r\n     */\r\n    get audio() {\r\n        return this.#systemAudioInterface;\r\n    }\r\n\r\n    /**\r\n     * @method\r\n     * @param {String} screenPageName\r\n     * @param {Object} [options] - options\r\n     */\r\n    startScreenPage = (screenPageName, options) => {\r\n        if (this.#registeredPages.has(screenPageName)) {\r\n            const page = this.#registeredPages.get(screenPageName);\r\n            if (page.isInitiated === false) {\r\n                page._init();\r\n            }\r\n            page._attachViewsToContainer(this.#canvasContainer);\r\n            page._start(options);\r\n        } else {\r\n            Exception(ERROR_CODES.VIEW_NOT_EXIST, \"View \" + screenPageName + \" is not registered!\");\r\n        }\r\n    };\r\n\r\n    /**\r\n     * @method\r\n     * @param {String} screenPageName\r\n     */\r\n    stopScreenPage = (screenPageName) => {\r\n        if (this.#registeredPages.has(screenPageName)) {\r\n            this.#registeredPages.get(screenPageName)._stop();\r\n        } else {\r\n            Exception(ERROR_CODES.VIEW_NOT_EXIST, \"View \" + screenPageName + \" is not registered!\");\r\n        }\r\n    };\r\n}","import { CONST, ERROR_CODES } from \"../constants.js\";\r\nimport { Exception } from \"./Exception.js\";\r\nimport { io } from \"socket.io-client\";\r\nimport { Logger } from \"./Logger.js\";\r\nimport { SystemEvent } from \"./Events/SystemEvent.js\";\r\n\r\n/**\r\n * Represents Socket connection\r\n */\r\nexport class SystemSocketConnection extends EventTarget {\r\n    #systemSettings;\r\n    #socket;\r\n\r\n    /**\r\n     * @hideconstructor\r\n     */\r\n    constructor(systemSettings) {\r\n        super();\r\n        if (!systemSettings) {\r\n            Exception(ERROR_CODES.CREATE_INSTANCE_ERROR, \"systemSettings should be passed to class instance\");\r\n        }\r\n        this.#systemSettings = systemSettings;\r\n    }\r\n\r\n    init() {\r\n        this.#socket = io(this.#systemSettings.network.address, {withCredentials: true});\r\n        \r\n        this.#registerSocketListeners();\r\n    }\r\n\r\n    get isServerConnected () {\r\n        if (this.#socket && this.#socket.connected) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n    \r\n    get playerId() {\r\n        return this.#socket.id;\r\n    }\r\n\r\n    sendGatherRoomsInfo() {\r\n        this.#socket.emit(CONST.EVENTS.WEBSOCKET.CLIENT_SERVER.ROOMS_INFO_REQUEST);\r\n    }\r\n\r\n    sendCreateOrJoinRoom(roomName, map) {\r\n        this.#socket.emit(CONST.EVENTS.WEBSOCKET.CLIENT_SERVER.CREATE_OR_JOIN, roomName , map);\r\n    }\r\n\r\n    sendMessage(message) {\r\n        this.#socket.emit(CONST.EVENTS.WEBSOCKET.CLIENT_SERVER.CLIENT_MESSAGE, message);\r\n    }\r\n\r\n    #onConnect = () => {\r\n        Logger.debug(\"connected, socket id: \" + this.#socket.id);\r\n        this.dispatchEvent(new Event(CONST.EVENTS.WEBSOCKET.SERVER_CLIENT.CONNECTION_STATUS_CHANGED));\r\n    };\r\n\r\n    #onDisconnect = (reason) => {\r\n        Logger.debug(\"server disconnected, reason: \" + reason);\r\n        this.dispatchEvent(new Event(CONST.EVENTS.WEBSOCKET.SERVER_CLIENT.CONNECTION_STATUS_CHANGED));\r\n    };\r\n\r\n    #onData = (event) => {\r\n        console.warn(\"server data: \", event);\r\n    };\r\n\r\n    #onMessage = (message) => {\r\n        Logger.debug(\"received new message from server: \" + message);\r\n        this.dispatchEvent(new SystemEvent(CONST.EVENTS.WEBSOCKET.SERVER_CLIENT.SERVER_MESSAGE, message));\r\n    };\r\n\r\n    #onRoomsInfo = (rooms) => {\r\n        Logger.debug(\"received roomsInfo \" + rooms);\r\n        this.dispatchEvent(new SystemEvent(CONST.EVENTS.WEBSOCKET.SERVER_CLIENT.ROOMS_INFO, rooms));\r\n    };\r\n\r\n    #onCreateNewRoom = (room, map) => {\r\n        Logger.debug(\"CLIENT SOCKET: Created room  \" + room);\r\n        this.dispatchEvent(new SystemEvent(CONST.EVENTS.WEBSOCKET.SERVER_CLIENT.CREATED, {room, map}));\r\n    };\r\n\r\n    #onRoomIsFull = (room) => {\r\n        Logger.debug(\"CLIENT SOCKET: Room is full, can't join: \" + room);\r\n        this.dispatchEvent(new SystemEvent(CONST.EVENTS.WEBSOCKET.SERVER_CLIENT.FULL, {room}));\r\n    };\r\n\r\n    #onJoinedToRoom = (room, map) => {\r\n        Logger.debug(\"CLIENT SOCKET: Joined to room: \" + room, \", map: \", map);\r\n        this.dispatchEvent(new SystemEvent(CONST.EVENTS.WEBSOCKET.SERVER_CLIENT.JOINED, {room, map}));\r\n    };\r\n\r\n    #onUnjoinedFromRoom = (playerId) => {\r\n        this.dispatchEvent(new SystemEvent(CONST.EVENTS.WEBSOCKET.SERVER_CLIENT.DISCONNECTED, {playerId}));\r\n    }\r\n\r\n    #registerSocketListeners() {\r\n        this.#socket.on(\"connect\", this.#onConnect);\r\n        this.#socket.on(\"disconnect\", this.#onDisconnect);\r\n        this.#socket.on(\"data\", this.#onData);\r\n\r\n        this.#socket.on(\"roomsInfo\", this.#onRoomsInfo);\r\n    \r\n        this.#socket.on(\"created\", this.#onCreateNewRoom);\r\n    \r\n        this.#socket.on(\"full\", this.#onRoomIsFull);\r\n    \r\n        this.#socket.on(\"joined\", this.#onJoinedToRoom);\r\n    \r\n        this.#socket.on(\"log\", function(array) {\r\n            console.log.apply(console, array);\r\n        });\r\n    \r\n        this.#socket.on(\"message\", this.#onMessage);\r\n    \r\n        this.#socket.on(\"removed\", function(message) {\r\n            console.log(\"removed message\");\r\n            console.log(message);\r\n        });\r\n\r\n        this.#socket.on(\"disconnected\", this.#onUnjoinedFromRoom);\r\n\r\n        addEventListener(\"beforeunload\", this.#disconnect);\r\n    }\r\n\r\n    #disconnect = () => {\r\n        this.#socket.disconnect();\r\n    }\r\n\r\n    #isServerEventExist(eventValue) {\r\n        let isExist = false;\r\n        if (Object.values(CONST.EVENTS.WEBSOCKET.SERVER_CLIENT).find(eventVal => eventVal === eventValue)) {\r\n            isExist = true;\r\n        }\r\n        return isExist;\r\n    }\r\n}","export class WebGlDrawProgramData {\r\n    /**\r\n     * @type {String}\r\n     */\r\n    #programName;\r\n    /**\r\n     * @type {Number[]}\r\n     */\r\n    #vectors;\r\n    /**\r\n     * @type {Number[]}\r\n     */ \r\n    #textures;\r\n    /**\r\n     * @type {}\r\n     */ \r\n    #image;\r\n    /**\r\n     * @type {String}\r\n     */ \r\n    #imageName;\r\n    /**\r\n     * @type {String[]}\r\n     */\r\n    #drawMask;\r\n    /**\r\n     * @type {Number}\r\n     */ \r\n    #rotation;\r\n    /**\r\n     * @type {Number[]}\r\n     */ \r\n    #translation;\r\n    /**\r\n     * @type {Number[]}\r\n     */ \r\n    #scale;\r\n    /**\r\n     * @type {Number}\r\n     */ \r\n    #programVerticesNum;\r\n\r\n    constructor(programName, vectors, textures, image, imageName, drawMask = [\"SRC_ALPHA\", \"ONE_MINUS_SRC_ALPHA\"], rotation = 0, translation = [0,0], scale = [1, 1]) {\r\n        this.#programName = programName;\r\n        this.#vectors = vectors;\r\n        this.#textures = textures;\r\n        this.#image = image;\r\n        this.#imageName = imageName;\r\n        this.#drawMask = drawMask;\r\n        this.#rotation = rotation;\r\n        this.#translation = translation;\r\n        this.#scale = scale;\r\n        this.#programVerticesNum = vectors.length / 2; \r\n    }\r\n\r\n    get programName() {\r\n        return this.#programName;\r\n    }\r\n    \r\n    get vectors() {\r\n        return this.#vectors;\r\n    }\r\n    \r\n    get textures() {\r\n        return this.#textures;\r\n    }\r\n    \r\n    get image() {\r\n        return this.#image;\r\n    }\r\n    \r\n    get imageName() {\r\n        return this.#imageName;\r\n    }\r\n    \r\n    get drawMask() {\r\n        return this.#drawMask;\r\n    }\r\n    \r\n    get rotation() {\r\n        return this.#rotation;\r\n    }\r\n    \r\n    get translation() {\r\n        return this.#translation;\r\n    }\r\n    \r\n    get scale() {\r\n        return this.#scale;\r\n    }\r\n\r\n    get programVerticesNum() {\r\n        return this.#programVerticesNum;\r\n    }\r\n    \r\n    isProgramDataCanBeMerged(imageName, drawMask = [\"SRC_ALPHA\", \"ONE_MINUS_SRC_ALPHA\"], rotation = 0, translation = [0,0], scale = [1, 1]) {\r\n\r\n        if (this.imageName === imageName \r\n            && this.drawMask[0] === drawMask[0] \r\n            && this.drawMask[1] === drawMask[1]\r\n            && this.rotation === rotation\r\n            && this.translation[0] === translation[0]\r\n            && this.translation[1] === translation[1]\r\n            && this.scale[0] === scale[0]\r\n            && this.scale[1] === scale[1]) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n    \r\n    mergeProgramData(vectors, textures) {\r\n        this.#vectors.push(...vectors);\r\n        this.#textures.push(...textures);\r\n        this.#programVerticesNum = this.#vectors.length / 2; \r\n    }\r\n\r\n}\r\n","import { ERROR_CODES, CONST, WARNING_CODES } from \"../constants.js\";\r\nimport { crossProduct } from \"../utils.js\";\r\nimport { Exception, Warning } from \"./Exception.js\";\r\nimport { WebGlDrawProgramData } from \"./WebGlDrawProgramData.js\";\r\n\r\nexport class WebGlInterface {\r\n    #vertexShaderSource;\r\n    #fragmentShaderSource;\r\n    /**\r\n     * @type {Map<String, WebGLProgram>}\r\n     */\r\n    #programs;\r\n    /**\r\n     * @type {Map<String, WebGLProgram>}\r\n     */\r\n    #programsData;\r\n    /**\r\n     * @type {WebGlDrawProgramData[]}\r\n     */\r\n    #coordsLocations;\r\n    /**\r\n     * @type {Map<String, ArrayBuffer>}\r\n     */\r\n    #buffers;\r\n    /**\r\n     * @type {Number}\r\n     */\r\n    #verticesNumber;\r\n    /**\r\n     * @type {WebGLRenderingContext}\r\n     */\r\n    #gl;\r\n    /**\r\n     * @type {boolean}\r\n     */\r\n    #debug;\r\n    /**\r\n     * @param  {Map<String, Number>}\r\n     */\r\n    #images_bind;\r\n    /**\r\n     * @param {Map<String, WebGLBuffer>}\r\n     */\r\n    #positionBuffer;\r\n    /**\r\n     * @param {Map<String, WebGLBuffer>}\r\n     */\r\n    #texCoordBuffer;\r\n\r\n    constructor(context, debug) {\r\n        if (!context || !(context instanceof WebGLRenderingContext)) {\r\n            Exception(ERROR_CODES.UNEXPECTED_INPUT_PARAMS, \" context parameter should be specified and equal to WebGLRenderingContext\");\r\n        }\r\n        \r\n        this.#gl = context;\r\n        this.#debug = debug;\r\n        this.#programs = new Map();\r\n        this.#programsData = [];\r\n        this.#coordsLocations = new Map();\r\n        this.#images_bind = new Map();\r\n        this.#buffers = [];\r\n        this.#verticesNumber = 0;\r\n        this.#positionBuffer = this.#gl.createBuffer();\r\n        this.#texCoordBuffer = this.#gl.createBuffer();\r\n    }\r\n\r\n    _fixCanvasSize(width, height) {\r\n        this.#gl.viewport(0, 0, width, height);\r\n    }\r\n\r\n    _initiateImagesDrawProgram() {\r\n        this.#vertexShaderSource = `\r\n        attribute vec2 a_texCoord;\r\n\r\n        attribute vec2 a_position;\r\n\r\n        uniform vec2 u_translation;\r\n        uniform float u_rotation;\r\n        uniform vec2 u_scale;\r\n\r\n        uniform vec2 u_resolution;\r\n\r\n        varying vec2 v_texCoord;\r\n\r\n        void main(void) {\r\n            float c = cos(-u_rotation);\r\n            float s = sin(-u_rotation);\r\n\r\n            mat3 translationMatrix1 = mat3(\r\n                1, 0, 0,\r\n                0, 1, 0,\r\n                u_translation.x, u_translation.y, 1\r\n            );\r\n\r\n            mat3 translationMatrix2 = mat3(\r\n                1, 0, 0,\r\n                0, 1, 0,\r\n                -u_translation.x, -u_translation.y, 1\r\n            );\r\n            \r\n            mat3 rotationMatrix = mat3(\r\n                c, -s, 0,\r\n                s, c, 0,\r\n                0, 0, 1\r\n            );\r\n\r\n            mat3 scalingMatrix = mat3(\r\n                u_scale.x, 0, 0,\r\n                0, u_scale.y, 0,\r\n                0, 0, 1\r\n            );\r\n\r\n            mat3 matrix = translationMatrix1 * rotationMatrix * translationMatrix2 * scalingMatrix;\r\n            //Scale\r\n            // vec2 scaledPosition = a_position * u_scale;\r\n            // Rotate the position\r\n            // vec2 rotatedPosition = vec2(\r\n            //    scaledPosition.x * u_rotation.y + scaledPosition.y * u_rotation.x,\r\n            //    scaledPosition.y * u_rotation.y - scaledPosition.x * u_rotation.x\r\n            //);\r\n            \r\n            //vec2 position = rotatedPosition + u_translation;\r\n            vec2 position = (matrix * vec3(a_position, 1)).xy;\r\n\r\n            //convert position from pixels to 0.0 to 1.0\r\n            vec2 zeroToOne = position / u_resolution;\r\n\r\n            //convert from 0->1 to 0->2\r\n            vec2 zeroToTwo = zeroToOne * 2.0;\r\n\r\n            //convert from 0->2 to -1->+1\r\n            vec2 clipSpace = zeroToTwo - 1.0;\r\n\r\n            gl_Position = vec4(clipSpace * vec2(1, -1), 0, 1);\r\n            \r\n            v_texCoord = a_texCoord;\r\n        }\r\n        `;\r\n        this.#fragmentShaderSource = `\r\n        precision mediump float;\r\n\r\n        uniform sampler2D u_image;\r\n\r\n        //texCoords passed in from the vertex shader\r\n        varying vec2 v_texCoord;\r\n\r\n        void main() {\r\n            vec4 color = texture2D(u_image, v_texCoord);\r\n            gl_FragColor = color;\r\n        }\r\n        `;\r\n        const program = this.#initProgram(),\r\n            programName = CONST.WEBGL.DRAW_PROGRAMS.IMAGES;\r\n\r\n        this.#setProgram(programName, program);\r\n\r\n        const gl = this.#gl,\r\n            translationLocation = gl.getUniformLocation(program, \"u_translation\"),\r\n            rotationRotation = gl.getUniformLocation(program, \"u_rotation\"),\r\n            scaleLocation = gl.getUniformLocation(program, \"u_scale\"),\r\n            resolutionUniformLocation = gl.getUniformLocation(program, \"u_resolution\"),\r\n            positionAttributeLocation = gl.getAttribLocation(program, \"a_position\"),\r\n            texCoordLocation = gl.getAttribLocation(program, \"a_texCoord\"),\r\n            u_imageLocation = gl.getUniformLocation(program, \"u_image\");\r\n\r\n        gl.enable(gl.BLEND);\r\n        // turn attribute on\r\n\r\n        this.#coordsLocations.set(programName, {\r\n            translationLocation,\r\n            rotationRotation,\r\n            scaleLocation,\r\n            resolutionUniformLocation,\r\n            positionAttributeLocation,\r\n            texCoordLocation,\r\n            u_imageLocation\r\n        });\r\n        return Promise.resolve();\r\n    }\r\n\r\n    _initPrimitivesDrawProgram() {\r\n        this.#vertexShaderSource = `\r\n        attribute vec2 a_position;\r\n\r\n        uniform vec2 u_translation;\r\n        uniform float u_rotation;\r\n        uniform vec2 u_scale;\r\n\r\n        uniform vec2 u_resolution;\r\n\r\n        void main(void) {\r\n            float c = cos(-u_rotation);\r\n            float s = sin(-u_rotation);\r\n\r\n            mat3 translationMatrix1 = mat3(\r\n                1, 0, 0,\r\n                0, 1, 0,\r\n                u_translation.x, u_translation.y, 1\r\n            );\r\n\r\n            //mat3 translationMatrix2 = mat3(\r\n            //    1, 0, 0,\r\n            //    0, 1, 0,\r\n            //    -u_translation.x, -u_translation.y, 1\r\n            //);\r\n            \r\n            mat3 rotationMatrix = mat3(\r\n                c, -s, 0,\r\n                s, c, 0,\r\n                0, 0, 1\r\n            );\r\n\r\n            mat3 scalingMatrix = mat3(\r\n                u_scale.x, 0, 0,\r\n                0, u_scale.y, 0,\r\n                0, 0, 1\r\n            );\r\n\r\n            //mat3 matrix = translationMatrix1 * rotationMatrix * translationMatrix2 * scalingMatrix;\r\n\r\n            mat3 matrix = translationMatrix1 * rotationMatrix * scalingMatrix;\r\n\r\n            //Scale\r\n            // vec2 scaledPosition = a_position * u_scale;\r\n            // Rotate the position\r\n            // vec2 rotatedPosition = vec2(\r\n            //    scaledPosition.x * u_rotation.y + scaledPosition.y * u_rotation.x,\r\n            //    scaledPosition.y * u_rotation.y - scaledPosition.x * u_rotation.x\r\n            //);\r\n            \r\n            //vec2 position = rotatedPosition + u_translation;\r\n            vec2 position = (matrix * vec3(a_position, 1)).xy;\r\n\r\n            //convert position from pixels to 0.0 to 1.0\r\n            vec2 zeroToOne = position / u_resolution;\r\n\r\n            //convert from 0->1 to 0->2\r\n            vec2 zeroToTwo = zeroToOne * 2.0;\r\n\r\n            //convert from 0->2 to -1->+1\r\n            vec2 clipSpace = zeroToTwo - 1.0;\r\n\r\n            gl_Position = vec4(clipSpace * vec2(1, -1), 0, 1);\r\n        }\r\n        `;\r\n        this.#fragmentShaderSource = `\r\n        precision mediump float;\r\n\r\n        uniform vec4 u_color;\r\n        void main(void) {\r\n            gl_FragColor = u_color;\r\n        }\r\n        `;\r\n        const program = this.#initProgram(),\r\n            programName = CONST.WEBGL.DRAW_PROGRAMS.PRIMITIVES;\r\n        this.#setProgram(programName, program);\r\n\r\n        const gl = this.#gl,\r\n            translationLocation = gl.getUniformLocation(program, \"u_translation\"),\r\n            rotationRotation = gl.getUniformLocation(program, \"u_rotation\"),\r\n            scaleLocation = gl.getUniformLocation(program, \"u_scale\"),\r\n            resolutionUniformLocation = gl.getUniformLocation(program, \"u_resolution\"),\r\n            colorUniformLocation = gl.getUniformLocation(program, \"u_color\"),\r\n            positionAttributeLocation = gl.getAttribLocation(program, \"a_position\");\r\n\r\n        this.#coordsLocations.set(programName, {\r\n            translationLocation,\r\n            rotationRotation,\r\n            scaleLocation,\r\n            resolutionUniformLocation,\r\n            colorUniformLocation,\r\n            positionAttributeLocation\r\n        });\r\n        return Promise.resolve();\r\n    }\r\n    \r\n    _bindTileImages(vectors, textures, image, imageName, drawMask = [\"SRC_ALPHA\", \"ONE_MINUS_SRC_ALPHA\"], rotation = 0, translation = [0, 0], scale = [1, 1]) {\r\n        return new Promise((resolve) => {\r\n            const programName = CONST.WEBGL.DRAW_PROGRAMS.IMAGES,\r\n                existingProgramData = this.#programsData.filter((data) => data.programName === programName);\r\n                \r\n            let isProgramDataMerged = false;\r\n\r\n            for(let i = 0; i < existingProgramData.length; i++) {\r\n                const data = existingProgramData[i];\r\n                if (data.isProgramDataCanBeMerged(imageName, drawMask)) {\r\n                    data.mergeProgramData(vectors, textures);\r\n                    isProgramDataMerged = true;\r\n                }\r\n            }\r\n\r\n            if (!isProgramDataMerged) {\r\n                this.#programsData.push(new WebGlDrawProgramData(programName, vectors, textures, image, imageName, drawMask, rotation, translation, scale));\r\n            }\r\n\r\n            resolve();\r\n        });\r\n    }\r\n    \r\n    _executeTileImagesDraw() {\r\n        return new Promise((resolve) => {\r\n            const programName = CONST.WEBGL.DRAW_PROGRAMS.IMAGES,\r\n                program = this.#getProgram(programName),\r\n                { translationLocation,\r\n                    rotationRotation,\r\n                    scaleLocation,\r\n                    resolutionUniformLocation,\r\n                    positionAttributeLocation,\r\n                    texCoordLocation,\r\n                    u_imageLocation } = this.#coordsLocations.get(programName),\r\n                gl = this.#gl,\r\n                programsData = this.#programsData.filter(programData => programData.programName === programName);\r\n                \r\n            gl.useProgram(program);\r\n\r\n            for (let i = 0; i < programsData.length; i++) {\r\n                const data = programsData[i];\r\n                // set the resolution\r\n                gl.uniform2f(resolutionUniformLocation, gl.canvas.width, gl.canvas.height);\r\n                gl.uniform2f(translationLocation, data.translation[0], data.translation[1]);\r\n                gl.uniform2f(scaleLocation, data.scale[0], data.scale[1]);\r\n                gl.uniform1f(rotationRotation, data.rotation);\r\n                \r\n                gl.bindBuffer(gl.ARRAY_BUFFER, this.#positionBuffer);\r\n                gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(data.vectors), gl.STATIC_DRAW);\r\n\r\n                gl.enableVertexAttribArray(positionAttributeLocation);\r\n                //Tell the attribute how to get data out of positionBuffer\r\n                const size = 2,\r\n                    type = gl.FLOAT, // data is 32bit floats\r\n                    normalize = false,\r\n                    stride = 0, // move forward size * sizeof(type) each iteration to get next position\r\n                    offset = 0; // start of beginning of the buffer\r\n                gl.vertexAttribPointer(positionAttributeLocation, size, type, normalize, stride, offset);\r\n\r\n                //textures buffer\r\n                gl.bindBuffer(gl.ARRAY_BUFFER, this.#texCoordBuffer);\r\n                gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(data.textures), gl.STATIC_DRAW);\r\n\r\n                gl.enableVertexAttribArray(texCoordLocation);\r\n                gl.vertexAttribPointer(texCoordLocation, 2, gl.FLOAT, false, 0, offset);\r\n\r\n                let bind_number  = this.#images_bind.get(data.imageName);\r\n\r\n                if (!bind_number ) {\r\n                    bind_number  = this.#images_bind.size + 1;\r\n                    gl.activeTexture(gl[\"TEXTURE\" + bind_number]);\r\n                    gl.bindTexture(gl.TEXTURE_2D, gl.createTexture());\r\n                    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, data.image);\r\n                    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n                    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n                    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\r\n                    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\r\n                    this.#images_bind.set(data.imageName, bind_number);\r\n                } else {\r\n                    gl.activeTexture(gl[\"TEXTURE\" + bind_number]);\r\n                }\r\n                gl.uniform1i(u_imageLocation, bind_number);\r\n                gl.blendFunc(gl[data.drawMask[0]], gl[data.drawMask[1]]);\r\n                this.#verticesNumber = data.programVerticesNum;\r\n                // Upload the image into the texture.\r\n                this.#executeGlslProgram();\r\n            }\r\n\r\n            resolve();\r\n        });\r\n    }\r\n\r\n    _bindAndDrawTileImages(vectors, textures, image, image_name, rotation = 0, translation = [0, 0], scale = [1, 1]) {\r\n        const programName = CONST.WEBGL.DRAW_PROGRAMS.IMAGES,\r\n            program = this.#getProgram(programName),\r\n            { translationLocation,\r\n                rotationRotation,\r\n                scaleLocation,\r\n                resolutionUniformLocation,\r\n                positionAttributeLocation,\r\n                texCoordLocation,\r\n                u_imageLocation } = this.#coordsLocations.get(programName),\r\n            gl = this.#gl;\r\n\r\n        gl.useProgram(program);\r\n\r\n        // set the resolution\r\n        gl.uniform2f(resolutionUniformLocation, gl.canvas.width, gl.canvas.height);\r\n        gl.uniform2f(translationLocation, translation[0], translation[1]);\r\n        gl.uniform2f(scaleLocation, scale[0], scale[1]);\r\n        gl.uniform1f(rotationRotation, rotation);\r\n        \r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.#positionBuffer);\r\n        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vectors), gl.STATIC_DRAW);\r\n\r\n        this.#verticesNumber += vectors.length / 2;\r\n        gl.enableVertexAttribArray(positionAttributeLocation);\r\n        //Tell the attribute how to get data out of positionBuffer\r\n        const size = 2,\r\n            type = gl.FLOAT, // data is 32bit floats\r\n            normalize = false,\r\n            stride = 0, // move forward size * sizeof(type) each iteration to get next position\r\n            offset = 0; // start of beginning of the buffer\r\n        gl.vertexAttribPointer(positionAttributeLocation, size, type, normalize, stride, offset);\r\n\r\n        //textures buffer\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.#texCoordBuffer);\r\n        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(textures), gl.STATIC_DRAW);\r\n\r\n        gl.enableVertexAttribArray(texCoordLocation);\r\n        gl.vertexAttribPointer(texCoordLocation, 2, gl.FLOAT, false, 0, 0);\r\n\r\n        let bind_number  = this.#images_bind.get(image_name);\r\n\r\n        if (!bind_number ) {\r\n            bind_number  = this.#images_bind.size + 1;\r\n\r\n            gl.activeTexture(gl[\"TEXTURE\" + bind_number]);\r\n            gl.bindTexture(gl.TEXTURE_2D, gl.createTexture());\r\n            \r\n            gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, image);\r\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\r\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\r\n\r\n            this.#images_bind.set(image_name, bind_number);\r\n        } else {\r\n            gl.activeTexture(gl[\"TEXTURE\" + bind_number]);\r\n        }\r\n        gl.uniform1i(u_imageLocation, bind_number );\r\n        // make image transparent parts transparent\r\n        gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);\r\n        // Upload the image into the texture.\r\n        this.#executeGlslProgram();\r\n    }\r\n\r\n    _bindText(x, y, renderObject) {\r\n        const programName = CONST.WEBGL.DRAW_PROGRAMS.IMAGES,\r\n            program = this.#getProgram(programName),\r\n            { translationLocation,\r\n                rotationRotation,\r\n                scaleLocation,\r\n                resolutionUniformLocation,\r\n                positionAttributeLocation,\r\n                texCoordLocation,\r\n                u_imageLocation } = this.#coordsLocations.get(programName),\r\n            gl = this.#gl;\r\n\r\n        //@toDo: add additional info to the #images_bind and avoid this call, if image is already created\r\n        const { boxWidth, boxHeight, ctx } = this.#createCanvasText(renderObject),\r\n            texture = ctx.canvas,\r\n            image_name = renderObject.text;\r\n\r\n        y = y - boxHeight;\r\n\r\n        const rotation = 0, \r\n            translation = [0, 0], \r\n            scale = [1, 1];\r\n        const vecX1 = x,\r\n            vecY1 = y,\r\n            vecX2 = vecX1 + boxWidth,\r\n            vecY2 = vecY1 + boxHeight;\r\n        const verticesBufferData = [\r\n                vecX1, vecY1,\r\n                vecX2, vecY1,\r\n                vecX1, vecY2,\r\n                vecX1, vecY2,\r\n                vecX2, vecY1,\r\n                vecX2, vecY2\r\n            ],\r\n            texturesBufferData = [\r\n                0, 0,\r\n                1, 0,\r\n                0, 1,\r\n                0, 1,\r\n                1, 0,\r\n                1, 1\r\n            ];\r\n\r\n        gl.useProgram(program);\r\n\r\n        // set the resolution\r\n        gl.uniform2f(resolutionUniformLocation, gl.canvas.width, gl.canvas.height);\r\n        gl.uniform2f(translationLocation, translation[0], translation[1]);\r\n        gl.uniform2f(scaleLocation, scale[0], scale[1]);\r\n        gl.uniform1f(rotationRotation, rotation);\r\n        \r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.#positionBuffer);\r\n        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(verticesBufferData), gl.STATIC_DRAW);\r\n        gl.enableVertexAttribArray(positionAttributeLocation);\r\n        //Tell the attribute how to get data out of positionBuffer\r\n        const size = 2,\r\n            type = gl.FLOAT, // data is 32bit floats\r\n            normalize = false,\r\n            stride = 0, // move forward size * sizeof(type) each iteration to get next position\r\n            offset = 0; // start of beginning of the buffer\r\n        gl.vertexAttribPointer(positionAttributeLocation, size, type, normalize, stride, offset);\r\n\r\n        //textures buffer\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.#texCoordBuffer);\r\n        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(texturesBufferData), gl.STATIC_DRAW);\r\n\r\n        gl.enableVertexAttribArray(texCoordLocation);\r\n        gl.vertexAttribPointer(texCoordLocation, 2, gl.FLOAT, false, 0, 0);\r\n        \r\n        this.#verticesNumber += 6;\r\n        // remove box\r\n        // fix text edges\r\n        gl.blendFunc(gl.ONE, gl.ONE_MINUS_SRC_ALPHA);\r\n        //gl.depthMask(false);\r\n        let bind_number = this.#images_bind.get(image_name);\r\n        if (!bind_number) {\r\n            bind_number  = this.#images_bind.size + 1;\r\n\r\n            gl.activeTexture(gl[\"TEXTURE\" + bind_number]);\r\n            gl.bindTexture(gl.TEXTURE_2D, gl.createTexture());\r\n            // Upload the image into the texture.\r\n            gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, texture);\r\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\r\n\r\n            // As image properties such as text stroke changes, image_name still the same,\r\n            // and image won't replaced\r\n            //this.#images_bind.set(image_name, bind_number);\r\n        } else {\r\n            gl.activeTexture(gl[\"TEXTURE\" + bind_number]);\r\n        }\r\n        gl.uniform1i(u_imageLocation, bind_number);\r\n        //console.log(\"vertex attrib 1 :\", gl.getVertexAttrib(1, gl.VERTEX_ATTRIB_ARRAY_BUFFER_BINDING));\r\n        this.#executeGlslProgram();\r\n    }\r\n\r\n    _bindPrimitives(renderObject, rotation = 0, translation = [0, 0], scale = [1, 1]) {\r\n        const programName = CONST.WEBGL.DRAW_PROGRAMS.PRIMITIVES,\r\n            program = this.#getProgram(programName),\r\n            { \r\n                translationLocation,\r\n                rotationRotation,\r\n                scaleLocation,\r\n                resolutionUniformLocation,\r\n                colorUniformLocation,\r\n                positionAttributeLocation \r\n            } = this.#coordsLocations.get(programName),\r\n            gl = this.#gl;\r\n\r\n        gl.useProgram(program);\r\n\r\n        // set the resolution\r\n        gl.uniform2f(resolutionUniformLocation, gl.canvas.width, gl.canvas.height);\r\n        gl.uniform2f(translationLocation, translation[0], translation[1]);\r\n        gl.uniform2f(scaleLocation, scale[0], scale[1]);\r\n        gl.uniform1f(rotationRotation, rotation);\r\n        gl.enableVertexAttribArray(positionAttributeLocation);\r\n\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.#positionBuffer);\r\n\r\n        switch (renderObject.type) {\r\n            case CONST.DRAW_TYPE.RECTANGLE:\r\n                this.#setSingleRectangle(renderObject.width, renderObject.height);\r\n                this.#verticesNumber += 6;\r\n                break;\r\n            case CONST.DRAW_TYPE.TEXT:\r\n                break;\r\n            case CONST.DRAW_TYPE.CIRCLE:\r\n                const coords = renderObject.vertices;\r\n                gl.bufferData(this.#gl.ARRAY_BUFFER, \r\n                    new Float32Array(coords), this.#gl.STATIC_DRAW);\r\n                this.#verticesNumber += coords.length / 2;\r\n                break;\r\n            case CONST.DRAW_TYPE.POLYGON: {\r\n                const triangles = this.#triangulatePolygon(renderObject.vertices);\r\n                this.#bindPolygon(triangles);\r\n                const len = triangles.length;\r\n                if (len % 3 !== 0) {\r\n                    Warning(WARNING_CODES.POLYGON_VERTICES_NOT_CORRECT, `polygons ${renderObject.id}, vertices are not correct, skip drawing`);\r\n                    return;\r\n                }\r\n                this.#verticesNumber += len / 2;\r\n                break;\r\n            }\r\n        }\r\n        //Tell the attribute how to get data out of positionBuffer\r\n        const size = 2,\r\n            type = gl.FLOAT, // data is 32bit floats\r\n            normalize = false,\r\n            stride = 0, // move forward size * sizeof(type) each iteration to get next position\r\n            offset = 0; // start of beginning of the buffer\r\n        gl.vertexAttribPointer(positionAttributeLocation, size, type, normalize, stride, offset);\r\n\r\n        const colorArray = this.#rgbaToArray(renderObject.bgColor);\r\n        gl.uniform4f(colorUniformLocation, colorArray[0]/255, colorArray[1]/255, colorArray[2]/255, colorArray[3]);\r\n        \r\n        if (renderObject.blendFunc) {\r\n            gl.blendFunc(renderObject.blendFunc[0], renderObject.blendFunc[1]);\r\n        }\r\n        if (renderObject.subtract) {\r\n            gl.blendEquation(gl.FUNC_SUBTRACT);\r\n        }\r\n        //disable attribute which is not used in this program\r\n        //if (gl.getVertexAttrib(1, gl.VERTEX_ATTRIB_ARRAY_ENABLED)) {\r\n        //gl.disableVertexAttribArray(1);\r\n        //}\r\n        this.#executeGlslProgram(0, null, true);\r\n    }\r\n\r\n    _drawLines(linesArray, color, lineWidth = 1, rotation = 0, translation = [0, 0]) {\r\n        const programName = CONST.WEBGL.DRAW_PROGRAMS.PRIMITIVES,\r\n            program = this.#getProgram(programName),\r\n            { resolutionUniformLocation,\r\n                colorUniformLocation,\r\n                positionAttributeLocation,\r\n            \r\n                translationLocation,\r\n                rotationRotation,\r\n                scaleLocation} = this.#coordsLocations.get(programName),\r\n            gl = this.#gl;\r\n\r\n        gl.useProgram(program);\r\n        // set the resolution\r\n        gl.uniform2f(resolutionUniformLocation, gl.canvas.width, gl.canvas.height);\r\n\r\n        gl.uniform2f(translationLocation, translation[0], translation[1]);\r\n        gl.uniform2f(scaleLocation, 1, 1);\r\n        gl.uniform1f(rotationRotation, rotation);\r\n\r\n        gl.enableVertexAttribArray(positionAttributeLocation);\r\n\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.#positionBuffer);\r\n\r\n        this.#gl.bufferData(\r\n            this.#gl.ARRAY_BUFFER, \r\n            new Float32Array(linesArray),\r\n            this.#gl.STATIC_DRAW);\r\n\r\n        this.#verticesNumber += linesArray.length / 2;\r\n        //Tell the attribute how to get data out of positionBuffer\r\n        const size = 2,\r\n            type = gl.FLOAT, // data is 32bit floats\r\n            normalize = false,\r\n            stride = 0, // move forward size * sizeof(type) each iteration to get next position\r\n            offset = 0; // start of beginning of the buffer\r\n        gl.vertexAttribPointer(positionAttributeLocation, size, type, normalize, stride, offset);\r\n\r\n        const colorArray = this.#rgbaToArray(color);\r\n        gl.uniform4f(colorUniformLocation, colorArray[0]/255, colorArray[1]/255, colorArray[2]/255, colorArray[3]);\r\n        \r\n        gl.lineWidth(lineWidth);\r\n\r\n        //gl.blendFunc(gl.ONE, gl.DST_COLOR );\r\n        \r\n        //disable attribute which is not used in this program\r\n        //if (gl.getVertexAttrib(1, gl.VERTEX_ATTRIB_ARRAY_ENABLED)) {\r\n        //    gl.disableVertexAttribArray(1);\r\n        //}\r\n        this.#executeGlslProgram(0, gl.LINES);\r\n    }\r\n\r\n    _drawPolygon(vertices, color, lineWidth = 1, rotation = 0, translation = [0, 0]) {\r\n        const programName = CONST.WEBGL.DRAW_PROGRAMS.PRIMITIVES,\r\n            program = this.#getProgram(programName),\r\n            { resolutionUniformLocation,\r\n                colorUniformLocation,\r\n                positionAttributeLocation,\r\n            \r\n                translationLocation,\r\n                rotationRotation,\r\n                scaleLocation} = this.#coordsLocations.get(programName),\r\n            gl = this.#gl;\r\n\r\n        gl.useProgram(program);\r\n        // set the resolution\r\n        gl.uniform2f(resolutionUniformLocation, gl.canvas.width, gl.canvas.height);\r\n\r\n        gl.uniform2f(translationLocation, translation[0], translation[1]);\r\n        gl.uniform2f(scaleLocation, 1, 1);\r\n        gl.uniform1f(rotationRotation, rotation);\r\n\r\n        gl.enableVertexAttribArray(positionAttributeLocation);\r\n\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.#positionBuffer);\r\n\r\n        const triangles = this.#triangulatePolygon(vertices);\r\n        \r\n        const polygonVerticesNum = triangles.length;\r\n        if (polygonVerticesNum % 3 !== 0) {\r\n            Warning(WARNING_CODES.POLYGON_VERTICES_NOT_CORRECT, `polygon boundaries vertices are not correct, skip drawing`);\r\n            return;\r\n        }\r\n        this.#bindPolygon(triangles);\r\n        this.#verticesNumber += polygonVerticesNum / 2;\r\n        //Tell the attribute how to get data out of positionBuffer\r\n        const size = 2,\r\n            type = gl.FLOAT, // data is 32bit floats\r\n            normalize = false,\r\n            stride = 0, // move forward size * sizeof(type) each iteration to get next position\r\n            offset = 0; // start of beginning of the buffer\r\n        gl.vertexAttribPointer(positionAttributeLocation, size, type, normalize, stride, offset);\r\n\r\n        const colorArray = this.#rgbaToArray(color);\r\n        gl.uniform4f(colorUniformLocation, colorArray[0]/255, colorArray[1]/255, colorArray[2]/255, colorArray[3]);\r\n\r\n        this.#executeGlslProgram(0, null);\r\n    }\r\n\r\n    _bindConus(renderObject, rotation = 0, translation = [0, 0], scale = [1, 1]) {\r\n        const programName = CONST.WEBGL.DRAW_PROGRAMS.PRIMITIVES,\r\n            program = this.#getProgram(programName),\r\n            { \r\n                translationLocation,\r\n                rotationRotation,\r\n                scaleLocation,\r\n                resolutionUniformLocation,\r\n                colorUniformLocation,\r\n                positionAttributeLocation \r\n            } = this.#coordsLocations.get(programName),\r\n            gl = this.#gl,\r\n            coords = renderObject.vertices,\r\n            fillStyle = renderObject.bgColor;\r\n            \r\n        gl.useProgram(program);\r\n        \r\n        // set the resolution\r\n        gl.uniform2f(resolutionUniformLocation, gl.canvas.width, gl.canvas.height);\r\n        gl.uniform2f(translationLocation, translation[0], translation[1]);\r\n        gl.uniform2f(scaleLocation, scale[0], scale[1]);\r\n        gl.uniform1f(rotationRotation, rotation);\r\n        \r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.#positionBuffer);\r\n\r\n        gl.bufferData(this.#gl.ARRAY_BUFFER, \r\n            new Float32Array(coords), this.#gl.STATIC_DRAW);\r\n\r\n        gl.enableVertexAttribArray(positionAttributeLocation);\r\n        //Tell the attribute how to get data out of positionBuffer\r\n        const size = 2,\r\n            type = gl.FLOAT, // data is 32bit floats\r\n            normalize = false,\r\n            stride = 0, // move forward size * sizeof(type) each iteration to get next position\r\n            offset = 0; // start of beginning of the buffer\r\n        gl.vertexAttribPointer(positionAttributeLocation, size, type, normalize, stride, offset);\r\n\r\n        this.#verticesNumber += coords.length / 2;\r\n\r\n        if (renderObject.blendFunc) {\r\n            gl.blendFunc(renderObject.blendFunc[0], renderObject.blendFunc[1]);\r\n        }\r\n\r\n        if (renderObject.subtract) {\r\n            // cut bottom \r\n            gl.blendEquation(gl.FUNC_SUBTRACT);\r\n            //gl.blendFunc( gl.ONE, gl.ONE );\r\n            //gl.blendFunc(gl.ONE, gl.DST_COLOR);\r\n        } //else {\r\n            //gl.disable(gl.BLEND);\r\n            // make transparent\r\n            //gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);\r\n        //}\r\n\r\n        const colorArray = this.#rgbaToArray(fillStyle);\r\n\r\n        gl.uniform4f(colorUniformLocation, colorArray[0]/255, colorArray[1]/255, colorArray[2]/255, colorArray[3]);\r\n        \r\n        //disable attribute which is not used in this program\r\n        //if (gl.getVertexAttrib(1, gl.VERTEX_ATTRIB_ARRAY_ENABLED)) {\r\n        //gl.disableVertexAttribArray(1);\r\n        //}\r\n        this.#executeGlslProgram(0, gl.TRIANGLE_FAN, true);\r\n    }\r\n\r\n    _clearView() {\r\n        const gl = this.#gl;\r\n        // Set clear color to black, fully opaque\r\n        this.#programsData = [];\r\n        gl.clearColor(0, 0, 0, 0);\r\n        // Clear the color buffer with specified clear color\r\n        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\r\n    }\r\n\r\n    #setProgram(name, program) {\r\n        this.#programs.set(name, program);\r\n    }\r\n\r\n    #getProgram(name) {\r\n        return this.#programs.get(name);\r\n    }\r\n\r\n    #bindPolygon(vertices) {\r\n        this.#gl.bufferData(\r\n            this.#gl.ARRAY_BUFFER, \r\n            new Float32Array(vertices),\r\n            this.#gl.STATIC_DRAW);\r\n    }\r\n\r\n    #randomInt(range) {\r\n        return Math.floor(Math.random() * range);\r\n    } \r\n\r\n    #setSingleRectangle(width, height) {\r\n        const x1 = 0,\r\n            x2 = 0 + width,\r\n            y1 = 0,\r\n            y2 = 0 + height;\r\n        this.#gl.bufferData(this.#gl.ARRAY_BUFFER, \r\n            new Float32Array([\r\n                x1, y1,\r\n                x2, y1,\r\n                x1, y2,\r\n                x1, y2,\r\n                x2, y1,\r\n                x2, y2]), this.#gl.STATIC_DRAW);\r\n    }\r\n    \r\n    #executeGlslProgram(offset = 0, primitiveType, resetEquation) {\r\n        const primitiveTypeValue = primitiveType ? primitiveType : this.#gl.TRIANGLES,\r\n            gl = this.#gl;\r\n            \r\n        const err = this.#debug ? gl.getError() : 0;\r\n        if (err !== 0) {\r\n            console.error(err);\r\n            throw new Error(\"Error num: \" + err);\r\n        } else {\r\n            gl.drawArrays(primitiveTypeValue, offset, this.#verticesNumber);\r\n            this.#verticesNumber = 0;\r\n            // set blend to default\r\n            if (resetEquation) {\r\n                gl.blendEquation(  gl.FUNC_ADD );\r\n            }\r\n        }\r\n    }\r\n\r\n    #initProgram() {\r\n        const gl = this.#gl,\r\n            program = gl.createProgram();\r\n\r\n        gl.attachShader(program, this.#compileShader(this.#vertexShaderSource, gl.VERTEX_SHADER));\r\n        gl.attachShader(program, this.#compileShader(this.#fragmentShaderSource, gl.FRAGMENT_SHADER));\r\n\r\n        gl.linkProgram(program);\r\n        if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\r\n            const info = gl.getProgramInfoLog(program);\r\n            Exception(ERROR_CODES.WEBGL_ERROR, `Could not compile WebGL program. \\n\\n${info}`);\r\n        }\r\n        return program;\r\n    }\r\n\r\n    #createCanvasText(renderObject) {\r\n        const ctx = document.createElement(\"canvas\").getContext(\"2d\");\r\n\r\n        ctx.font = renderObject.font;\r\n        renderObject.textMetrics = ctx.measureText(renderObject.text);\r\n        const boxWidth = renderObject.boundariesBox.width, \r\n            boxHeight = renderObject.boundariesBox.height;\r\n        ctx.canvas.width = boxWidth;\r\n        ctx.canvas.height = boxHeight;\r\n        ctx.font = renderObject.font;\r\n        ctx.textBaseline = \"bottom\";// bottom\r\n        if (renderObject.fillStyle) {\r\n            ctx.fillStyle = renderObject.fillStyle;\r\n            ctx.fillText(renderObject.text, 0, boxHeight);\r\n        } \r\n        if (renderObject.strokeStyle) {\r\n            ctx.strokeStyle = renderObject.strokeStyle;\r\n            ctx.strokeText(renderObject.text, 0, boxHeight);\r\n        }\r\n\r\n        return { boxWidth, boxHeight, ctx };\r\n    }\r\n\r\n    #compileShader(shaderSource, shaderType) {\r\n        const shader = this.#gl.createShader(shaderType);\r\n        this.#gl.shaderSource(shader, shaderSource);\r\n        this.#gl.compileShader(shader);\r\n\r\n        if (!this.#gl.getShaderParameter(shader, this.#gl.COMPILE_STATUS)) {\r\n            const info = this.#gl.getShaderInfoLog(shader);\r\n            Exception(ERROR_CODES.WEBGL_ERROR, \"Couldn't compile webGl program. \\n\\n\" + info);\r\n        }\r\n        return shader;\r\n    }\r\n\r\n    #rgbaToArray (rgbaColor) {\r\n        return rgbaColor.replace(\"rgba(\", \"\").replace(\")\", \"\").split(\",\").map((item) => Number(item.trim()));\r\n    }\r\n\r\n    #triangulatePolygon(vertices) {\r\n        return this.#triangulate(vertices);\r\n    }\r\n\r\n    #triangulate (polygonVertices, triangulatedPolygon = []) {\r\n        const len = polygonVertices.length,\r\n            vectorsCS = (a, b, c) => crossProduct({x:c.x - a.x, y: c.y - a.y}, {x:b.x - a.x, y: b.y - a.y});\r\n\r\n        if (len <= 3) {\r\n            polygonVertices.forEach(vertex => {\r\n                triangulatedPolygon.push(vertex.x);\r\n                triangulatedPolygon.push(vertex.y);\r\n            });\r\n            return triangulatedPolygon;\r\n        }\r\n        const verticesSortedByY = [...polygonVertices].sort((curr, next) => next.y - curr.y);\r\n        const topVertexIndex = polygonVertices.indexOf(verticesSortedByY[0]),\r\n            startVertexIndex = topVertexIndex !== len - 1 ? topVertexIndex + 1 : 0;\r\n        \r\n        let processedVertices = polygonVertices,\r\n            processedVerticesLen = processedVertices.length,\r\n            skipCount = 0,\r\n            i = startVertexIndex;\r\n        \r\n        while(processedVertices.length > 2) {\r\n            // if overflowed, start from beginning\r\n            const currLen = processedVertices.length;\r\n            if (i >= currLen) {\r\n                i -= currLen;\r\n            }\r\n    \r\n            const prevVertex = i === 0 ? processedVertices[currLen - 1] : processedVertices[i - 1],\r\n                currentVertex = processedVertices[i],\r\n                nextVertex = currLen === i + 1 ? processedVertices[0] : processedVertices[i + 1];\r\n    \r\n            \r\n            const cs = vectorsCS(prevVertex, currentVertex, nextVertex);\r\n    \r\n            if (cs < 0) {\r\n                triangulatedPolygon.push(prevVertex.x);\r\n                triangulatedPolygon.push(prevVertex.y);\r\n                triangulatedPolygon.push(currentVertex.x);\r\n                triangulatedPolygon.push(currentVertex.y);\r\n                triangulatedPolygon.push(nextVertex.x);\r\n                triangulatedPolygon.push(nextVertex.y);\r\n                processedVertices = processedVertices.filter((val, index) => index !== i);\r\n            } else {\r\n                skipCount += 1;\r\n                if (skipCount > processedVerticesLen) {\r\n                    console.warn(\"Can\\'t extract triangles. Probably vertices input is not correct\");\r\n                    return;\r\n                }\r\n            }\r\n            i++;\r\n        }\r\n        \r\n        return triangulatedPolygon;\r\n    }\r\n}","import { CONST } from \"./constants.js\";\r\n\r\n/**\r\n * Settings object, should be passed as a parameter to System.constructor()\r\n */\r\nexport const SystemSettings = {\r\n    mode: CONST.MODE.DEBUG,\r\n    \r\n    gameOptions: {\r\n        library: CONST.LIBRARY.WEBGL,\r\n        debugWebGl: false,\r\n        debugMobileTouch: false,\r\n        optimization: null,\r\n        boundaries: {\r\n            drawLayerBoundaries: false,\r\n            drawObjectBoundaries: false,\r\n            boundariesColor: \"rgba(224, 12, 21, 1)\",\r\n            boundariesWidth: 2\r\n        },\r\n        render: {\r\n            averageFPStime: 10000,\r\n            minCircleTime: 16, //ms which is ~60 FPS\r\n            mapBoundariesEnabled: true\r\n        }\r\n    },\r\n\r\n    network: {\r\n        address: \"https://gameserver.reslc.ru:9009\",\r\n        gatherRoomsInfoInterval: 5000\r\n    },\r\n\r\n    canvasMaxSize: {\r\n        width: 900,\r\n        height: 960\r\n    },\r\n\r\n    worldSize: {\r\n        width: 960,\r\n        height: 960\r\n    },\r\n\r\n    defaultCanvasKey: \"default\"\r\n}","export const CONST = {\r\n    MODE: {\r\n        DEBUG: \"DEBUG\",\r\n        PRODUCTION: \"PRODUCTION\"\r\n    },\r\n    SCREENS: {},\r\n    AUDIO: {},\r\n    CONNECTION_STATUS: {\r\n        DISCONNECTED: \"disconnected\",\r\n        CONNECTED: \"connected\",\r\n        CONNECTION_LOST: \"connection lost\"\r\n    },\r\n    EVENTS: {\r\n        SYSTEM: {\r\n            START_PAGE:\"START_PAGE\",\r\n            STOP_PAGE: \"STOP_PAGE\",\r\n            RENDER: {\r\n                START: \"start\",\r\n                END: \"end\"\r\n            }\r\n        },\r\n        GAME: {\r\n            BOUNDARIES_COLLISION: \"BOUNDARIES_COLLISION\",\r\n            OBJECTS_COLLISION: \"OBJECTS_COLLISION\"\r\n        },\r\n        WEBSOCKET: {\r\n            SERVER_CLIENT: {\r\n                CONNECTION_STATUS_CHANGED: \"CONNECTION_STATUS_CHANGED\",\r\n                ROOMS_INFO: \"roomsInfo\",\r\n                CREATED: \"created\",\r\n                JOINED: \"joined\",\r\n                FULL: \"full\",\r\n                DISCONNECTED: \"disconnected\",\r\n                SERVER_MESSAGE: \"message\",\r\n                RESTARTED: \"restarted\",\r\n            },\r\n            CLIENT_SERVER: {\r\n                ROOMS_INFO_REQUEST: \"gatherRoomsInfo\",\r\n                CREATE_OR_JOIN: \"create or join\",\r\n                RESTART_REQUEST: \"restart\",\r\n                CLIENT_MESSAGE: \"message\"\r\n            }\r\n        }\r\n    },\r\n    WEBGL: {\r\n        DRAW_PROGRAMS: {\r\n            PRIMITIVES: \"drawPrimitives\",\r\n            IMAGES: \"drawImages\"\r\n        }\r\n    },\r\n    DRAW_TYPE: {\r\n        RECTANGLE: \"rect\",\r\n        CIRCLE: \"circle\",\r\n        POLYGON: \"polygon\",\r\n        LINE: \"line\",\r\n        TEXT: \"text\",\r\n        IMAGE: \"image\"\r\n    },\r\n    LAYERS: {\r\n        DEFAULT: \"default-view-layer\",\r\n        BOUNDARIES: \"boundaries-view-layer\"\r\n    },\r\n    GAME_OPTIONS: {},\r\n    LIBRARY: {\r\n        WEBGL: \"webgl\"\r\n    },\r\n    OPTIMIZATION: {\r\n        WEB_ASSEMBLY: {\r\n            ASSEMBLY_SCRIPT: \"ASSEMBLY_SCRIPT\",\r\n            NATIVE_C: \"NATIVE_C\"\r\n        }\r\n    }\r\n};\r\n\r\nexport const ERROR_CODES = {\r\n    CREATE_INSTANCE_ERROR: \"CREATE_INSTANCE_ERROR\",\r\n    VIEW_NOT_EXIST: \"VIEW_NOT_EXIST\", \r\n    ELEMENT_NOT_EXIST: \"ELEMENT_NOT_EXIST\",\r\n    FILE_NOT_EXIST: \"FILE_NOT_EXIST\",\r\n    UNEXPECTED_INPUT_PARAMS: \"UNEXPECTED_INPUT_PARAMS\",\r\n    UNHANDLED_EXCEPTION: \"UNHANDLED_EXCEPTION\",\r\n    UNHANDLED_PREPARE_EXCEPTION: \"UNHANDLED_PREPARE_EXCEPTION\",\r\n    CANVAS_KEY_NOT_SPECIFIED: \"CANVAS_KEY_NOT_SPECIFIED\",\r\n    CANVAS_WITH_KEY_NOT_EXIST: \"CANVAS_WITH_KEY_NOT_EXIST\",\r\n    WRONG_TYPE_ERROR: \"WRONG_TYPE_ERROR\",\r\n    UNEXPECTED_WS_MESSAGE: \"UNEXPECTED_WS_MESSAGE\",\r\n    UNEXPECTED_PLAYER_ID: \"UNEXPECTED_PLAYER_ID\",\r\n    UNEXPECTED_BULLET_ID: \"UNEXPECTED_BULLET_ID\",\r\n    UNEXPECTED_EVENT_NAME: \"UNEXPECTED_EVENT_NAME\",\r\n    WEBGL_ERROR: \"WEBGL_ERROR\",\r\n    UNEXPECTED_TOUCH_AREA: \"UNEXPECTED_TOUCH_AREA\",\r\n};\r\n\r\nexport const WARNING_CODES =  {\r\n    FILE_LOADING_ISSUE: \"FILE_LOADING_ISSUE\",\r\n    ASSETS_NOT_READY: \"ASSETS_NOT_READY\",\r\n    NOT_FOUND: \"NOT_FOUND\",\r\n    NOT_TESTED: \"NOT_TESTED\",\r\n    WORLD_DIMENSIONS_NOT_SET: \"WORLD_DIMENSIONS_NOT_SET\",\r\n    UNHANDLED_DRAW_ISSUE: \"UNHANDLED_DRAW_ISSUE\",\r\n    UNEXPECTED_WORLD_SIZE: \"UNEXPECTED_WORLD_SIZE\",\r\n    AUDIO_ALREADY_REGISTERED: \"AUDIO_ALREADY_REGISTERED\",\r\n    AUDIO_NOT_REGISTERED: \"AUDIO_NOT_REGISTERED\",\r\n    POLYGON_VERTICES_NOT_CORRECT: \"POLYGON_VERTICES_NOT_CORRECT\"\r\n};","import { Vector, Vertex } from \"./base/Primitives.js\";\r\n\r\nfunction isMobile() {\r\n    return /Android|webOS|iPhone|iPad|iPod|Opera Mini/i.test(navigator.userAgent) ;\r\n}\r\n\r\nfunction isSafari() {\r\n    return /^((?!chrome|android).)*safari/i.test(navigator.userAgent);\r\n}\r\n\r\nfunction pointToCircleDistance(x, y, circle) {\r\n    const pointToCircleCenterDistance = new Vector(x, y, circle.x, circle.y).length;\r\n    return pointToCircleCenterDistance - circle.r;\r\n}\r\n\r\nfunction countClosestTraversal(line, sight) {\r\n    const x1 = sight.x1,\r\n        y1 = sight.y1,\r\n        x2 = sight.x2,\r\n        y2 = sight.y2;\r\n    const x3 = line.x1,\r\n        y3 = line.y1,\r\n        x4 = line.x2,\r\n        y4 = line.y2;\r\n\r\n    const r_px = x1,\r\n        r_py = y1,\r\n        r_dx = x2-x1,\r\n        r_dy = y2-y1;\r\n\r\n    const s_px = x3,\r\n        s_py = y3,\r\n        s_dx = x4-x3,\r\n        s_dy = y4-y3;\r\n\r\n    const r_mag = Math.sqrt(r_dx*r_dx+r_dy*r_dy),\r\n        s_mag = Math.sqrt(s_dx*s_dx+s_dy*s_dy);\r\n    if(r_dx/r_mag==s_dx/s_mag && r_dy/r_mag==s_dy/s_mag){\r\n        return null;\r\n    }\r\n\r\n    const T2 = (r_dx*(s_py-r_py) + r_dy*(r_px-s_px))/(s_dx*r_dy - s_dy*r_dx),\r\n        T1 = (s_px+s_dx*T2-r_px)/r_dx;\r\n\r\n    if(T1<0 || isNaN(T1)) return null;\r\n    if(T2<0 || T2>1) return null;\r\n\r\n    return {\r\n        x: r_px+r_dx*T1,\r\n        y: r_py+r_dy*T1,\r\n        p: T1\r\n    };\r\n}\r\n\r\nfunction countClosestTraversal2(line1, line2) {\r\n    const x1 = line2.x1,\r\n        y1 = line2.y1,\r\n        x2 = line2.x2,\r\n        y2 = line2.y2;\r\n    const x3 = line1.x1,\r\n        y3 = line1.y1,\r\n        x4 = line1.x2,\r\n        y4 = line1.y2;\r\n\r\n    const det = (x1 - x2) * (y3 - y4) - (y1 - y2) * (x3 - x4);\r\n    // lines are parallel, or coincident\r\n    if (det === 0){\r\n        return;\r\n    }\r\n    let x = ((x1*y2 - y1*x2) * (x3 - x4) - (x1 - x2) * (x3*y4 - y3*x4)) / det;\r\n    let y = ((x1*y2 - y1*x2) * (y3 - y4) - (y1 - y2) * (x3*y4 - y3*x4)) / det;\r\n    const point = {x, y};\r\n    \r\n    if (isPointOnTheLine(point, line1, 0.0000000000001) && isPointOnTheLine(point, line2, 0.0000000000001)) {\r\n        const p = Math.sqrt(Math.pow((x - x1), 2) + Math.pow((y - y1), 2));\r\n        return {x, y, p};\r\n    } else {\r\n        return;\r\n    }\r\n}\r\n\r\nfunction angle_2points(x1, y1, x2, y2) {\r\n    return Math.atan2(y2 - y1, x2 - x1);\r\n}\r\n\r\nfunction angle_3points(a, b, c) {\r\n    const x1 = a.x - b.x,\r\n        x2 = c.x - b.x,\r\n        y1 = a.y - b.y,\r\n        y2 = c.y - b.y,\r\n        d1 = Math.sqrt(x1 * x1 + y1 * y1),\r\n        d2 = Math.sqrt(x2 * x2 + y2 * y2);\r\n    //console.log(\"angle: \", (Math.acos((x1* x2 + y1 * y2) / (d1 * d2))* 180) / Math.PI);\r\n    return Math.acos((x1* x2 + y1 * y2) / (d1 * d2));\r\n}\r\n\r\nfunction dotProductWithAngle(lenA, lenB, angle) {\r\n    return lenA * lenB * Math.cos(angle);\r\n}\r\n\r\nfunction dotProduct(vec1, vec2) {\r\n    return vec1.x * vec2.x + vec1.y * vec2.y;\r\n}\r\n\r\nfunction crossProduct(a, b) {\r\n    return (a.x * b.y - b.x * a.y);\r\n}\r\n\r\nfunction isPointOnTheLine(point, line, m_error = 0) {\r\n    return  (\r\n                ((point.x >= (line.x1 - m_error)) && (point.x <= (line.x2 + m_error))) || \r\n                ((point.x <= (line.x1 + m_error)) && (point.x >= (line.x2 - m_error)))\r\n            ) && (\r\n                ((point.y >= (line.y1 - m_error)) && (point.y <= (line.y2 + m_error))) || \r\n                ((point.y <= (line.y1 + m_error)) && (point.y >= (line.y2 - m_error)))\r\n            );\r\n}\r\n\r\nfunction isLineShorter(line1, line2) {\r\n    return (new Vector(line1.x1, line1.y1, line1.x2, line1.y2)).length < (new Vector(line2.x1, line2.y1, line2.x2, line2.y2)).length;\r\n}\r\n\r\nfunction isPointLineIntersect(point, line) {\r\n    const lineL = new Vector(line.x1, line.y1, line.x2, line.y2).length,\r\n        lengthAB = new Vector(line.x1, line.y1, point.x, point.y).length + new Vector(line.x2, line.y2, point.x, point.y).length;\r\n\r\n    if (lengthAB <= lineL + 0.2) {\r\n        //Logger.debug(\"point to line intersect. line len: \" + lineL + \", line AB len: \" + lengthAB);\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n\r\nfunction isPolygonLineIntersect(polygon, line) {\r\n    const len = polygon.length;\r\n    for (let i = 0; i < len; i+=1) {\r\n        let curr = polygon[i],\r\n            next = polygon[i+1];\r\n        //if next item not exist and current is not first\r\n        if (!next) {\r\n            // if current vertex is not the first one\r\n            if (!(curr.x === polygon[0].x && curr.y === polygon[0].y)) {\r\n                next = polygon[0];\r\n            } else {\r\n                continue;\r\n            }\r\n        }\r\n        const edge = { x1: curr.x, y1: curr.y, x2: next.x, y2: next.y };\r\n        const intersection = countClosestTraversal2(edge, line);\r\n        if (intersection) {\r\n            return intersection;\r\n        }\r\n    }\r\n    if (polygon[len-1] !== polygon[0]) {\r\n        //check one last item\r\n        const curr = polygon[len - 1],\r\n            next = polygon[0];\r\n        const edge = { x1: curr.x, y1: curr.y, x2: next.x, y2: next.y };\r\n        const intersection = countClosestTraversal2(edge, line);\r\n        if (intersection) {\r\n            return intersection;\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\nfunction isPointPolygonIntersect(/*x, y, polygon*/) {\r\n    //const vertices = polygon.vertices;\r\n\r\n    return false;\r\n}\r\n\r\nfunction isPointRectIntersect(x, y, rect) {\r\n    if (x >= rect.x && x <= rect.width + rect.x && y >= rect.y && y <= rect.y + rect.height) {\r\n        return true;\r\n    } else {\r\n        return false;\r\n    }\r\n}\r\n\r\nfunction isPointCircleIntersect(x, y, circle) {\r\n    const radius = circle.width,\r\n        lineToCircleCenter = new Vector(x, y, circle.x, circle.y),\r\n        pointCircleLineLength = lineToCircleCenter.length;\r\n    if (pointCircleLineLength < radius)\r\n        return true;\r\n    else\r\n        return false;\r\n}\r\n\r\nfunction generateUniqId() {\r\n    return Math.round(Math.random() * 1000000); \r\n}\r\n\r\nfunction arrayNumbersToVerticesArray(array) {\r\n    const len = array.length,\r\n        vertices = [];\r\n    for (let i = 0; i < len; i+=2) {\r\n        const x = array[i],\r\n            y = array[i + 1];\r\n        vertices.push(new Vertex(x, y));\r\n    }\r\n    return vertices;\r\n}\r\n\r\nexport { \r\n    isMobile, \r\n    isSafari, \r\n    pointToCircleDistance, \r\n    countClosestTraversal, \r\n    countClosestTraversal2,\r\n    angle_2points,\r\n    angle_3points,\r\n    dotProductWithAngle,\r\n    dotProduct,\r\n    crossProduct,\r\n    isPointOnTheLine,\r\n    isLineShorter,\r\n    isPointLineIntersect,\r\n    isPointPolygonIntersect,\r\n    isPointRectIntersect,\r\n    isPointCircleIntersect,\r\n    isPolygonLineIntersect,\r\n    generateUniqId,\r\n    arrayNumbersToVerticesArray };","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { System } from \"./base/System.js\";\r\nimport { ScreenPage } from \"./base/ScreenPage.js\";\r\nimport { DrawImageObject } from \"./base/DrawImageObject.js\";\r\nimport * as Primitives from \"./base/Primitives.js\";\r\nimport { SystemSettings } from \"./configs.js\";\r\nimport { CONST } from \"./constants.js\";\r\nimport * as utils from \"./utils.js\";\r\n\r\nexport { System, SystemSettings, CONST, ScreenPage, DrawImageObject, Primitives, utils };"],"names":[],"sourceRoot":""}